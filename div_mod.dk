mod_aux :
  cts.Term
    cts.diamond
    (cts.cast
       cts.triangle
       cts.sinf
       (cts.univ cts.box cts.triangle cts.I)
       (cts.univ cts.diamond cts.sinf cts.I)
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x =>
           cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0 => cts.prod cts.box cts.box cts.box cts.I nat.nat (x1 => nat.nat))))).

mod_aux_body :
  cts.Term
    cts.diamond
    (cts.cast
       cts.triangle
       cts.sinf
       (cts.univ cts.box cts.triangle cts.I)
       (cts.univ cts.diamond cts.sinf cts.I)
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x =>
           cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0 => cts.prod cts.box cts.box cts.box cts.I nat.nat (x1 => nat.nat))))).

axiom_mod_aux :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        connectives.equal
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0 => cts.prod cts.box cts.box cts.box cts.I nat.nat (x1 => nat.nat)))
          (mod_aux x)
          (nat.filter_nat_type
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x0 => cts.prod cts.box cts.box cts.box cts.I nat.nat (x1 => nat.nat)))
             mod_aux_body
             x))).

def eq_mod_aux :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        leibniz.leibniz
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0 => cts.prod cts.box cts.box cts.box cts.I nat.nat (x1 => nat.nat)))
          (mod_aux x)
          (nat.filter_nat_type
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x0 => cts.prod cts.box cts.box cts.box cts.I nat.nat (x1 => nat.nat)))
             mod_aux_body
             x)))
  :=
  p:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  connectives.equal_leibniz
    (cts.prod
       cts.box
       cts.box
       cts.box
       cts.I
       nat.nat
       (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat)))
    (mod_aux p)
    (nat.filter_nat_type
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat)))
       mod_aux_body
       p)
    (axiom_mod_aux p).

def sym_eq_mod_aux :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        leibniz.leibniz
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0 => cts.prod cts.box cts.box cts.box cts.I nat.nat (x1 => nat.nat)))
          (nat.filter_nat_type
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x0 => cts.prod cts.box cts.box cts.box cts.I nat.nat (x1 => nat.nat)))
             mod_aux_body
             x)
          (mod_aux x)))
  :=
  p:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  leibniz.sym_leibniz
    (cts.prod
       cts.box
       cts.box
       cts.box
       cts.I
       nat.nat
       (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat)))
    (mod_aux p)
    (nat.filter_nat_type
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat)))
       mod_aux_body
       p)
    (eq_mod_aux p).

axiom_mod_aux_body_O :
  cts.Term
    cts.star
    (connectives.equal
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat)))
       (mod_aux_body nat.O)
       (m:(cts.Term
             cts.diamond
             (cts.cast
                cts.triangle
                cts.sinf
                (cts.univ cts.box cts.triangle cts.I)
                (cts.univ cts.diamond cts.sinf cts.I)
                cts.I
                nat.nat)) =>
        n:(cts.Term
             cts.diamond
             (cts.cast
                cts.triangle
                cts.sinf
                (cts.univ cts.box cts.triangle cts.I)
                (cts.univ cts.diamond cts.sinf cts.I)
                cts.I
                nat.nat)) =>
        m)).

def eq_mod_aux_body_O :
  cts.Term
    cts.star
    (leibniz.leibniz
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat)))
       (mod_aux_body nat.O)
       (m:(cts.Term
             cts.diamond
             (cts.cast
                cts.triangle
                cts.sinf
                (cts.univ cts.box cts.triangle cts.I)
                (cts.univ cts.diamond cts.sinf cts.I)
                cts.I
                nat.nat)) =>
        n:(cts.Term
             cts.diamond
             (cts.cast
                cts.triangle
                cts.sinf
                (cts.univ cts.box cts.triangle cts.I)
                (cts.univ cts.diamond cts.sinf cts.I)
                cts.I
                nat.nat)) =>
        m))
  :=
  connectives.equal_leibniz
    (cts.prod
       cts.box
       cts.box
       cts.box
       cts.I
       nat.nat
       (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat)))
    (mod_aux_body nat.O)
    (m:(cts.Term
          cts.diamond
          (cts.cast
             cts.triangle
             cts.sinf
             (cts.univ cts.box cts.triangle cts.I)
             (cts.univ cts.diamond cts.sinf cts.I)
             cts.I
             nat.nat)) =>
     n:(cts.Term
          cts.diamond
          (cts.cast
             cts.triangle
             cts.sinf
             (cts.univ cts.box cts.triangle cts.I)
             (cts.univ cts.diamond cts.sinf cts.I)
             cts.I
             nat.nat)) =>
     m)
    axiom_mod_aux_body_O.

def sym_eq_mod_aux_body_O :
  cts.Term
    cts.star
    (leibniz.leibniz
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat)))
       (m:(cts.Term
             cts.diamond
             (cts.cast
                cts.triangle
                cts.sinf
                (cts.univ cts.box cts.triangle cts.I)
                (cts.univ cts.diamond cts.sinf cts.I)
                cts.I
                nat.nat)) =>
        n:(cts.Term
             cts.diamond
             (cts.cast
                cts.triangle
                cts.sinf
                (cts.univ cts.box cts.triangle cts.I)
                (cts.univ cts.diamond cts.sinf cts.I)
                cts.I
                nat.nat)) =>
        m)
       (mod_aux_body nat.O))
  :=
  leibniz.sym_leibniz
    (cts.prod
       cts.box
       cts.box
       cts.box
       cts.I
       nat.nat
       (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat)))
    (mod_aux_body nat.O)
    (m:(cts.Term
          cts.diamond
          (cts.cast
             cts.triangle
             cts.sinf
             (cts.univ cts.box cts.triangle cts.I)
             (cts.univ cts.diamond cts.sinf cts.I)
             cts.I
             nat.nat)) =>
     n:(cts.Term
          cts.diamond
          (cts.cast
             cts.triangle
             cts.sinf
             (cts.univ cts.box cts.triangle cts.I)
             (cts.univ cts.diamond cts.sinf cts.I)
             cts.I
             nat.nat)) =>
     m)
    eq_mod_aux_body_O.

axiom_mod_aux_body_S :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        connectives.equal
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0 => cts.prod cts.box cts.box cts.box cts.I nat.nat (x1 => nat.nat)))
          (mod_aux_body (nat.S x))
          (m:(cts.Term
                cts.diamond
                (cts.cast
                   cts.triangle
                   cts.sinf
                   (cts.univ cts.box cts.triangle cts.I)
                   (cts.univ cts.diamond cts.sinf cts.I)
                   cts.I
                   nat.nat)) =>
           n:(cts.Term
                cts.diamond
                (cts.cast
                   cts.triangle
                   cts.sinf
                   (cts.univ cts.box cts.triangle cts.I)
                   (cts.univ cts.diamond cts.sinf cts.I)
                   cts.I
                   nat.nat)) =>
           bool.match_bool_type nat.nat m (mod_aux x (nat.minus m (nat.S n)) n) (nat.leb m n)))).

def eq_mod_aux_body_S :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        leibniz.leibniz
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0 => cts.prod cts.box cts.box cts.box cts.I nat.nat (x1 => nat.nat)))
          (mod_aux_body (nat.S x))
          (m:(cts.Term
                cts.diamond
                (cts.cast
                   cts.triangle
                   cts.sinf
                   (cts.univ cts.box cts.triangle cts.I)
                   (cts.univ cts.diamond cts.sinf cts.I)
                   cts.I
                   nat.nat)) =>
           n:(cts.Term
                cts.diamond
                (cts.cast
                   cts.triangle
                   cts.sinf
                   (cts.univ cts.box cts.triangle cts.I)
                   (cts.univ cts.diamond cts.sinf cts.I)
                   cts.I
                   nat.nat)) =>
           bool.match_bool_type nat.nat m (mod_aux x (nat.minus m (nat.S n)) n) (nat.leb m n))))
  :=
  p:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  connectives.equal_leibniz
    (cts.prod
       cts.box
       cts.box
       cts.box
       cts.I
       nat.nat
       (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat)))
    (mod_aux_body (nat.S p))
    (m:(cts.Term
          cts.diamond
          (cts.cast
             cts.triangle
             cts.sinf
             (cts.univ cts.box cts.triangle cts.I)
             (cts.univ cts.diamond cts.sinf cts.I)
             cts.I
             nat.nat)) =>
     n:(cts.Term
          cts.diamond
          (cts.cast
             cts.triangle
             cts.sinf
             (cts.univ cts.box cts.triangle cts.I)
             (cts.univ cts.diamond cts.sinf cts.I)
             cts.I
             nat.nat)) =>
     bool.match_bool_type nat.nat m (mod_aux p (nat.minus m (nat.S n)) n) (nat.leb m n))
    (axiom_mod_aux_body_S p).

def sym_eq_mod_aux_body_S :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        leibniz.leibniz
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0 => cts.prod cts.box cts.box cts.box cts.I nat.nat (x1 => nat.nat)))
          (m:(cts.Term
                cts.diamond
                (cts.cast
                   cts.triangle
                   cts.sinf
                   (cts.univ cts.box cts.triangle cts.I)
                   (cts.univ cts.diamond cts.sinf cts.I)
                   cts.I
                   nat.nat)) =>
           n:(cts.Term
                cts.diamond
                (cts.cast
                   cts.triangle
                   cts.sinf
                   (cts.univ cts.box cts.triangle cts.I)
                   (cts.univ cts.diamond cts.sinf cts.I)
                   cts.I
                   nat.nat)) =>
           bool.match_bool_type nat.nat m (mod_aux x (nat.minus m (nat.S n)) n) (nat.leb m n))
          (mod_aux_body (nat.S x))))
  :=
  p:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  leibniz.sym_leibniz
    (cts.prod
       cts.box
       cts.box
       cts.box
       cts.I
       nat.nat
       (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat)))
    (mod_aux_body (nat.S p))
    (m:(cts.Term
          cts.diamond
          (cts.cast
             cts.triangle
             cts.sinf
             (cts.univ cts.box cts.triangle cts.I)
             (cts.univ cts.diamond cts.sinf cts.I)
             cts.I
             nat.nat)) =>
     n:(cts.Term
          cts.diamond
          (cts.cast
             cts.triangle
             cts.sinf
             (cts.univ cts.box cts.triangle cts.I)
             (cts.univ cts.diamond cts.sinf cts.I)
             cts.I
             nat.nat)) =>
     bool.match_bool_type nat.nat m (mod_aux p (nat.minus m (nat.S n)) n) (nat.leb m n))
    (eq_mod_aux_body_S p).

def mod :
  cts.Term
    cts.diamond
    (cts.cast
       cts.triangle
       cts.sinf
       (cts.univ cts.box cts.triangle cts.I)
       (cts.univ cts.diamond cts.sinf cts.I)
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat))))
  :=
  n:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  m:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  nat.match_nat_type
    nat.nat
    n
    (p:(cts.Term
          cts.diamond
          (cts.cast
             cts.triangle
             cts.sinf
             (cts.univ cts.box cts.triangle cts.I)
             (cts.univ cts.diamond cts.sinf cts.I)
             cts.I
             nat.nat)) =>
     mod_aux n n p)
    m.

div_aux :
  cts.Term
    cts.diamond
    (cts.cast
       cts.triangle
       cts.sinf
       (cts.univ cts.box cts.triangle cts.I)
       (cts.univ cts.diamond cts.sinf cts.I)
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x =>
           cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0 => cts.prod cts.box cts.box cts.box cts.I nat.nat (x1 => nat.nat))))).

div_aux_body :
  cts.Term
    cts.diamond
    (cts.cast
       cts.triangle
       cts.sinf
       (cts.univ cts.box cts.triangle cts.I)
       (cts.univ cts.diamond cts.sinf cts.I)
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x =>
           cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0 => cts.prod cts.box cts.box cts.box cts.I nat.nat (x1 => nat.nat))))).

axiom_div_aux :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        connectives.equal
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0 => cts.prod cts.box cts.box cts.box cts.I nat.nat (x1 => nat.nat)))
          (div_aux x)
          (nat.filter_nat_type
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x0 => cts.prod cts.box cts.box cts.box cts.I nat.nat (x1 => nat.nat)))
             div_aux_body
             x))).

def eq_div_aux :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        leibniz.leibniz
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0 => cts.prod cts.box cts.box cts.box cts.I nat.nat (x1 => nat.nat)))
          (div_aux x)
          (nat.filter_nat_type
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x0 => cts.prod cts.box cts.box cts.box cts.I nat.nat (x1 => nat.nat)))
             div_aux_body
             x)))
  :=
  p:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  connectives.equal_leibniz
    (cts.prod
       cts.box
       cts.box
       cts.box
       cts.I
       nat.nat
       (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat)))
    (div_aux p)
    (nat.filter_nat_type
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat)))
       div_aux_body
       p)
    (axiom_div_aux p).

def sym_eq_div_aux :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        leibniz.leibniz
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0 => cts.prod cts.box cts.box cts.box cts.I nat.nat (x1 => nat.nat)))
          (nat.filter_nat_type
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x0 => cts.prod cts.box cts.box cts.box cts.I nat.nat (x1 => nat.nat)))
             div_aux_body
             x)
          (div_aux x)))
  :=
  p:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  leibniz.sym_leibniz
    (cts.prod
       cts.box
       cts.box
       cts.box
       cts.I
       nat.nat
       (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat)))
    (div_aux p)
    (nat.filter_nat_type
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat)))
       div_aux_body
       p)
    (eq_div_aux p).

axiom_div_aux_body_O :
  cts.Term
    cts.star
    (connectives.equal
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat)))
       (div_aux_body nat.O)
       (m:(cts.Term
             cts.diamond
             (cts.cast
                cts.triangle
                cts.sinf
                (cts.univ cts.box cts.triangle cts.I)
                (cts.univ cts.diamond cts.sinf cts.I)
                cts.I
                nat.nat)) =>
        n:(cts.Term
             cts.diamond
             (cts.cast
                cts.triangle
                cts.sinf
                (cts.univ cts.box cts.triangle cts.I)
                (cts.univ cts.diamond cts.sinf cts.I)
                cts.I
                nat.nat)) =>
        nat.O)).

def eq_div_aux_body_O :
  cts.Term
    cts.star
    (leibniz.leibniz
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat)))
       (div_aux_body nat.O)
       (m:(cts.Term
             cts.diamond
             (cts.cast
                cts.triangle
                cts.sinf
                (cts.univ cts.box cts.triangle cts.I)
                (cts.univ cts.diamond cts.sinf cts.I)
                cts.I
                nat.nat)) =>
        n:(cts.Term
             cts.diamond
             (cts.cast
                cts.triangle
                cts.sinf
                (cts.univ cts.box cts.triangle cts.I)
                (cts.univ cts.diamond cts.sinf cts.I)
                cts.I
                nat.nat)) =>
        nat.O))
  :=
  connectives.equal_leibniz
    (cts.prod
       cts.box
       cts.box
       cts.box
       cts.I
       nat.nat
       (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat)))
    (div_aux_body nat.O)
    (m:(cts.Term
          cts.diamond
          (cts.cast
             cts.triangle
             cts.sinf
             (cts.univ cts.box cts.triangle cts.I)
             (cts.univ cts.diamond cts.sinf cts.I)
             cts.I
             nat.nat)) =>
     n:(cts.Term
          cts.diamond
          (cts.cast
             cts.triangle
             cts.sinf
             (cts.univ cts.box cts.triangle cts.I)
             (cts.univ cts.diamond cts.sinf cts.I)
             cts.I
             nat.nat)) =>
     nat.O)
    axiom_div_aux_body_O.

def sym_eq_div_aux_body_O :
  cts.Term
    cts.star
    (leibniz.leibniz
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat)))
       (m:(cts.Term
             cts.diamond
             (cts.cast
                cts.triangle
                cts.sinf
                (cts.univ cts.box cts.triangle cts.I)
                (cts.univ cts.diamond cts.sinf cts.I)
                cts.I
                nat.nat)) =>
        n:(cts.Term
             cts.diamond
             (cts.cast
                cts.triangle
                cts.sinf
                (cts.univ cts.box cts.triangle cts.I)
                (cts.univ cts.diamond cts.sinf cts.I)
                cts.I
                nat.nat)) =>
        nat.O)
       (div_aux_body nat.O))
  :=
  leibniz.sym_leibniz
    (cts.prod
       cts.box
       cts.box
       cts.box
       cts.I
       nat.nat
       (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat)))
    (div_aux_body nat.O)
    (m:(cts.Term
          cts.diamond
          (cts.cast
             cts.triangle
             cts.sinf
             (cts.univ cts.box cts.triangle cts.I)
             (cts.univ cts.diamond cts.sinf cts.I)
             cts.I
             nat.nat)) =>
     n:(cts.Term
          cts.diamond
          (cts.cast
             cts.triangle
             cts.sinf
             (cts.univ cts.box cts.triangle cts.I)
             (cts.univ cts.diamond cts.sinf cts.I)
             cts.I
             nat.nat)) =>
     nat.O)
    eq_div_aux_body_O.

axiom_div_aux_body_S :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        connectives.equal
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0 => cts.prod cts.box cts.box cts.box cts.I nat.nat (x1 => nat.nat)))
          (div_aux_body (nat.S x))
          (m:(cts.Term
                cts.diamond
                (cts.cast
                   cts.triangle
                   cts.sinf
                   (cts.univ cts.box cts.triangle cts.I)
                   (cts.univ cts.diamond cts.sinf cts.I)
                   cts.I
                   nat.nat)) =>
           n:(cts.Term
                cts.diamond
                (cts.cast
                   cts.triangle
                   cts.sinf
                   (cts.univ cts.box cts.triangle cts.I)
                   (cts.univ cts.diamond cts.sinf cts.I)
                   cts.I
                   nat.nat)) =>
           bool.match_bool_type
             nat.nat
             nat.O
             (nat.S (div_aux x (nat.minus m (nat.S n)) n))
             (nat.leb m n)))).

def eq_div_aux_body_S :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        leibniz.leibniz
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0 => cts.prod cts.box cts.box cts.box cts.I nat.nat (x1 => nat.nat)))
          (div_aux_body (nat.S x))
          (m:(cts.Term
                cts.diamond
                (cts.cast
                   cts.triangle
                   cts.sinf
                   (cts.univ cts.box cts.triangle cts.I)
                   (cts.univ cts.diamond cts.sinf cts.I)
                   cts.I
                   nat.nat)) =>
           n:(cts.Term
                cts.diamond
                (cts.cast
                   cts.triangle
                   cts.sinf
                   (cts.univ cts.box cts.triangle cts.I)
                   (cts.univ cts.diamond cts.sinf cts.I)
                   cts.I
                   nat.nat)) =>
           bool.match_bool_type
             nat.nat
             nat.O
             (nat.S (div_aux x (nat.minus m (nat.S n)) n))
             (nat.leb m n))))
  :=
  p:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  connectives.equal_leibniz
    (cts.prod
       cts.box
       cts.box
       cts.box
       cts.I
       nat.nat
       (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat)))
    (div_aux_body (nat.S p))
    (m:(cts.Term
          cts.diamond
          (cts.cast
             cts.triangle
             cts.sinf
             (cts.univ cts.box cts.triangle cts.I)
             (cts.univ cts.diamond cts.sinf cts.I)
             cts.I
             nat.nat)) =>
     n:(cts.Term
          cts.diamond
          (cts.cast
             cts.triangle
             cts.sinf
             (cts.univ cts.box cts.triangle cts.I)
             (cts.univ cts.diamond cts.sinf cts.I)
             cts.I
             nat.nat)) =>
     bool.match_bool_type nat.nat nat.O (nat.S (div_aux p (nat.minus m (nat.S n)) n)) (nat.leb m n))
    (axiom_div_aux_body_S p).

def sym_eq_div_aux_body_S :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        leibniz.leibniz
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0 => cts.prod cts.box cts.box cts.box cts.I nat.nat (x1 => nat.nat)))
          (m:(cts.Term
                cts.diamond
                (cts.cast
                   cts.triangle
                   cts.sinf
                   (cts.univ cts.box cts.triangle cts.I)
                   (cts.univ cts.diamond cts.sinf cts.I)
                   cts.I
                   nat.nat)) =>
           n:(cts.Term
                cts.diamond
                (cts.cast
                   cts.triangle
                   cts.sinf
                   (cts.univ cts.box cts.triangle cts.I)
                   (cts.univ cts.diamond cts.sinf cts.I)
                   cts.I
                   nat.nat)) =>
           bool.match_bool_type
             nat.nat
             nat.O
             (nat.S (div_aux x (nat.minus m (nat.S n)) n))
             (nat.leb m n))
          (div_aux_body (nat.S x))))
  :=
  p:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  leibniz.sym_leibniz
    (cts.prod
       cts.box
       cts.box
       cts.box
       cts.I
       nat.nat
       (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat)))
    (div_aux_body (nat.S p))
    (m:(cts.Term
          cts.diamond
          (cts.cast
             cts.triangle
             cts.sinf
             (cts.univ cts.box cts.triangle cts.I)
             (cts.univ cts.diamond cts.sinf cts.I)
             cts.I
             nat.nat)) =>
     n:(cts.Term
          cts.diamond
          (cts.cast
             cts.triangle
             cts.sinf
             (cts.univ cts.box cts.triangle cts.I)
             (cts.univ cts.diamond cts.sinf cts.I)
             cts.I
             nat.nat)) =>
     bool.match_bool_type nat.nat nat.O (nat.S (div_aux p (nat.minus m (nat.S n)) n)) (nat.leb m n))
    (eq_div_aux_body_S p).

def div :
  cts.Term
    cts.diamond
    (cts.cast
       cts.triangle
       cts.sinf
       (cts.univ cts.box cts.triangle cts.I)
       (cts.univ cts.diamond cts.sinf cts.I)
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat))))
  :=
  n:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  m:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  nat.match_nat_type
    nat.nat
    (nat.S n)
    (p:(cts.Term
          cts.diamond
          (cts.cast
             cts.triangle
             cts.sinf
             (cts.univ cts.box cts.triangle cts.I)
             (cts.univ cts.diamond cts.sinf cts.I)
             cts.I
             nat.nat)) =>
     div_aux n n p)
    m.

def le_mod_aux_m_m :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1 =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (nat.le x0 x)
                (x2 => nat.le (mod_aux x x0 x1) x1)))))
  :=
  p:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  nat.nat_ind
    (_x_365:(cts.Term
               cts.diamond
               (cts.cast
                  cts.triangle
                  cts.sinf
                  (cts.univ cts.box cts.triangle cts.I)
                  (cts.univ cts.diamond cts.sinf cts.I)
                  cts.I
                  nat.nat)) =>
     cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (nat.le x _x_365)
             (x1 => nat.le (mod_aux _x_365 x x0) x0))))
    (n:(cts.Term
          cts.diamond
          (cts.cast
             cts.triangle
             cts.sinf
             (cts.univ cts.box cts.triangle cts.I)
             (cts.univ cts.diamond cts.sinf cts.I)
             cts.I
             nat.nat)) =>
     m:(cts.Term
          cts.diamond
          (cts.cast
             cts.triangle
             cts.sinf
             (cts.univ cts.box cts.triangle cts.I)
             (cts.univ cts.diamond cts.sinf cts.I)
             cts.I
             nat.nat)) =>
     sym_eq_mod_aux
       nat.O
       (y:(cts.Term
             cts.diamond
             (cts.cast
                cts.triangle
                cts.sinf
                (cts.univ cts.box cts.triangle cts.I)
                (cts.univ cts.diamond cts.sinf cts.I)
                cts.I
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat))))) =>
        cts.prod cts.star cts.star cts.star cts.I (nat.le n nat.O) (x => nat.le (y n m) m))
       (nat.sym_eq_filter_nat_type_O
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat)))
          mod_aux_body
          (y:(cts.Term
                cts.diamond
                (cts.cast
                   cts.triangle
                   cts.sinf
                   (cts.univ cts.box cts.triangle cts.I)
                   (cts.univ cts.diamond cts.sinf cts.I)
                   cts.I
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      nat.nat
                      (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat))))) =>
           cts.prod cts.star cts.star cts.star cts.I (nat.le n nat.O) (x => nat.le (y n m) m))
          (sym_eq_mod_aux_body_O
             (y:(cts.Term
                   cts.diamond
                   (cts.cast
                      cts.triangle
                      cts.sinf
                      (cts.univ cts.box cts.triangle cts.I)
                      (cts.univ cts.diamond cts.sinf cts.I)
                      cts.I
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         nat.nat
                         (x =>
                          cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat))))) =>
              cts.prod cts.star cts.star cts.star cts.I (nat.le n nat.O) (x => nat.le (y n m) m))
             (lenO:(cts.Term cts.star (nat.le n nat.O)) =>
              nat.le_n_O_elim
                n
                lenO
                (__:(cts.Term
                       cts.diamond
                       (cts.cast
                          cts.triangle
                          cts.sinf
                          (cts.univ cts.box cts.triangle cts.I)
                          (cts.univ cts.diamond cts.sinf cts.I)
                          cts.I
                          nat.nat)) =>
                 nat.le __ m)
                (nat.le_O_n m)))))
    (q:(cts.Term
          cts.diamond
          (cts.cast
             cts.triangle
             cts.sinf
             (cts.univ cts.box cts.triangle cts.I)
             (cts.univ cts.diamond cts.sinf cts.I)
             cts.I
             nat.nat)) =>
     sym_eq_mod_aux
       (nat.S q)
       (y:(cts.Term
             cts.diamond
             (cts.cast
                cts.triangle
                cts.sinf
                (cts.univ cts.box cts.triangle cts.I)
                (cts.univ cts.diamond cts.sinf cts.I)
                cts.I
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat))))) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x0 =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (nat.le x q)
                   (x1 => nat.le (mod_aux q x x0) x0))))
          (x =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x0 =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x1 =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (nat.le x0 (nat.S q))
                   (x2 => nat.le (y x0 x1) x1)))))
       (nat.sym_eq_filter_nat_type_S
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat)))
          mod_aux_body
          q
          (y:(cts.Term
                cts.diamond
                (cts.cast
                   cts.triangle
                   cts.sinf
                   (cts.univ cts.box cts.triangle cts.I)
                   (cts.univ cts.diamond cts.sinf cts.I)
                   cts.I
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      nat.nat
                      (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat))))) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x0 =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (nat.le x q)
                      (x1 => nat.le (mod_aux q x x0) x0))))
             (x =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x0 =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x1 =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (nat.le x0 (nat.S q))
                      (x2 => nat.le (y x0 x1) x1)))))
          (sym_eq_mod_aux_body_S
             q
             (y:(cts.Term
                   cts.diamond
                   (cts.cast
                      cts.triangle
                      cts.sinf
                      (cts.univ cts.box cts.triangle cts.I)
                      (cts.univ cts.diamond cts.sinf cts.I)
                      cts.I
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         nat.nat
                         (x =>
                          cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat))))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x =>
                    cts.prod
                      cts.box
                      cts.star
                      cts.star
                      cts.I
                      nat.nat
                      (x0 =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (nat.le x q)
                         (x1 => nat.le (mod_aux q x x0) x0))))
                (x =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x0 =>
                    cts.prod
                      cts.box
                      cts.star
                      cts.star
                      cts.I
                      nat.nat
                      (x1 =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (nat.le x0 (nat.S q))
                         (x2 => nat.le (y x0 x1) x1)))))
             (Hind:(cts.Term
                      cts.star
                      (cts.prod
                         cts.box
                         cts.star
                         cts.star
                         cts.I
                         nat.nat
                         (x =>
                          cts.prod
                            cts.box
                            cts.star
                            cts.star
                            cts.I
                            nat.nat
                            (x0 =>
                             cts.prod
                               cts.star
                               cts.star
                               cts.star
                               cts.I
                               (nat.le x q)
                               (x1 => nat.le (mod_aux q x x0) x0))))) =>
              n:(cts.Term
                   cts.diamond
                   (cts.cast
                      cts.triangle
                      cts.sinf
                      (cts.univ cts.box cts.triangle cts.I)
                      (cts.univ cts.diamond cts.sinf cts.I)
                      cts.I
                      nat.nat)) =>
              m:(cts.Term
                   cts.diamond
                   (cts.cast
                      cts.triangle
                      cts.sinf
                      (cts.univ cts.box cts.triangle cts.I)
                      (cts.univ cts.diamond cts.sinf cts.I)
                      cts.I
                      nat.nat)) =>
              len:(cts.Term cts.star (nat.le n (nat.S q))) =>
              nat.leb_elim
                n
                m
                (__:(cts.Term
                       cts.diamond
                       (cts.cast
                          cts.triangle
                          cts.sinf
                          (cts.univ cts.box cts.triangle cts.I)
                          (cts.univ cts.diamond cts.sinf cts.I)
                          cts.I
                          bool.bool)) =>
                 nat.le
                   (bool.match_bool_type nat.nat n (mod_aux q (nat.minus n (nat.S m)) m) __)
                   m)
                (bool.sym_eq_match_bool_type_true
                   nat.nat
                   n
                   (mod_aux q (nat.minus n (nat.S m)) m)
                   (y:(cts.Term
                         cts.diamond
                         (cts.cast
                            cts.triangle
                            cts.sinf
                            (cts.univ cts.box cts.triangle cts.I)
                            (cts.univ cts.diamond cts.sinf cts.I)
                            cts.I
                            nat.nat)) =>
                    cts.prod cts.star cts.star cts.star cts.I (nat.le n m) (x => nat.le y m))
                   (auto:(cts.Term cts.star (nat.le n m)) => auto))
                (bool.sym_eq_match_bool_type_false
                   nat.nat
                   n
                   (mod_aux q (nat.minus n (nat.S m)) m)
                   (y:(cts.Term
                         cts.diamond
                         (cts.cast
                            cts.triangle
                            cts.sinf
                            (cts.univ cts.box cts.triangle cts.I)
                            (cts.univ cts.diamond cts.sinf cts.I)
                            cts.I
                            nat.nat)) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (connectives.Not (nat.le n m))
                      (x => nat.le y m))
                   (notlenm:(cts.Term cts.star (connectives.Not (nat.le n m))) =>
                    Hind
                      (nat.minus n (nat.S m))
                      m
                      (nat.le_plus_to_minus
                         n
                         (nat.S m)
                         q
                         (nat.transitive_le
                            n
                            (nat.S q)
                            (nat.plus q (nat.S m))
                            len
                            (logic.eq_coerc
                               (nat.le (nat.S q) (nat.plus (nat.S q) m))
                               (nat.le (nat.S q) (nat.plus q (nat.S m)))
                               (nat.le_plus_n_r m (nat.S q))
                               (logic.rewrite_l
                                  nat.nat
                                  (nat.plus m (nat.S q))
                                  (__:(cts.Term
                                         cts.diamond
                                         (cts.cast
                                            cts.triangle
                                            cts.sinf
                                            (cts.univ cts.box cts.triangle cts.I)
                                            (cts.univ cts.diamond cts.sinf cts.I)
                                            cts.I
                                            nat.nat)) =>
                                   logic.eq
                                     (cts.univ cts.star cts.box cts.I)
                                     (nat.le (nat.S q) __)
                                     (nat.le (nat.S q) (nat.plus q (nat.S m))))
                                  (logic.rewrite_r
                                     nat.nat
                                     (nat.plus q (nat.S m))
                                     (__:(cts.Term
                                            cts.diamond
                                            (cts.cast
                                               cts.triangle
                                               cts.sinf
                                               (cts.univ cts.box cts.triangle cts.I)
                                               (cts.univ cts.diamond cts.sinf cts.I)
                                               cts.I
                                               nat.nat)) =>
                                      logic.eq
                                        (cts.univ cts.star cts.box cts.I)
                                        (nat.le (nat.S q) __)
                                        (nat.le (nat.S q) (nat.plus q (nat.S m))))
                                     (logic.refl
                                        (cts.univ cts.star cts.box cts.I)
                                        (nat.le (nat.S q) (nat.plus q (nat.S m))))
                                     (nat.plus m (nat.S q))
                                     (logic.rewrite_l
                                        nat.nat
                                        (nat.S (nat.plus m q))
                                        (__:(cts.Term
                                               cts.diamond
                                               (cts.cast
                                                  cts.triangle
                                                  cts.sinf
                                                  (cts.univ
                                                     cts.box
                                                     cts.triangle
                                                     cts.I)
                                                  (cts.univ
                                                     cts.diamond
                                                     cts.sinf
                                                     cts.I)
                                                  cts.I
                                                  nat.nat)) =>
                                         logic.eq nat.nat __ (nat.plus q (nat.S m)))
                                        (logic.rewrite_l
                                           nat.nat
                                           (nat.plus q m)
                                           (__:(cts.Term
                                                  cts.diamond
                                                  (cts.cast
                                                     cts.triangle
                                                     cts.sinf
                                                     (cts.univ
                                                        cts.box
                                                        cts.triangle
                                                        cts.I)
                                                     (cts.univ
                                                        cts.diamond
                                                        cts.sinf
                                                        cts.I)
                                                     cts.I
                                                     nat.nat)) =>
                                            logic.eq
                                              nat.nat
                                              (nat.S __)
                                              (nat.plus q (nat.S m)))
                                           (nat.plus_n_Sm q m)
                                           (nat.plus m q)
                                           (nat.commutative_plus q m))
                                        (nat.plus m (nat.S q))
                                        (nat.plus_n_Sm m q)))
                                  (nat.plus (nat.S q) m)
                                  (nat.commutative_plus m (nat.S q))))))))))))
    p.

def lt_mod_m_m :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0 =>
           cts.prod cts.star cts.star cts.star cts.I (nat.lt nat.O x0) (x1 => nat.lt (mod x x0) x0))))
  :=
  n:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  m:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  nat.match_nat_prop
    (__:(cts.Term
           cts.diamond
           (cts.cast
              cts.triangle
              cts.sinf
              (cts.univ cts.box cts.triangle cts.I)
              (cts.univ cts.diamond cts.sinf cts.I)
              cts.I
              nat.nat)) =>
     cts.prod cts.star cts.star cts.star cts.I (nat.lt nat.O __) (x => nat.lt (mod n __) __))
    (abs:(cts.Term cts.star (nat.lt nat.O nat.O)) =>
     connectives.falsity
       (nat.lt (mod n nat.O) nat.O)
       (logic.absurd (nat.le (nat.S nat.O) nat.O) abs (nat.not_le_Sn_O nat.O)))
    (p:(cts.Term
          cts.diamond
          (cts.cast
             cts.triangle
             cts.sinf
             (cts.univ cts.box cts.triangle cts.I)
             (cts.univ cts.diamond cts.sinf cts.I)
             cts.I
             nat.nat)) =>
     nat.sym_eq_match_nat_type_S
       nat.nat
       n
       (q:(cts.Term
             cts.diamond
             (cts.cast
                cts.triangle
                cts.sinf
                (cts.univ cts.box cts.triangle cts.I)
                (cts.univ cts.diamond cts.sinf cts.I)
                cts.I
                nat.nat)) =>
        mod_aux n n q)
       p
       (y:(cts.Term
             cts.diamond
             (cts.cast
                cts.triangle
                cts.sinf
                (cts.univ cts.box cts.triangle cts.I)
                (cts.univ cts.diamond cts.sinf cts.I)
                cts.I
                nat.nat)) =>
        cts.prod cts.star cts.star cts.star cts.I (nat.lt nat.O (nat.S p)) (x => nat.lt y (nat.S p)))
       (__:(cts.Term cts.star (nat.lt nat.O (nat.S p))) =>
        nat.le_S_S (mod_aux n n p) p (le_mod_aux_m_m n n p (nat.le_n n))))
    m.

def div_aux_mod_aux :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1 =>
              logic.eq
                nat.nat
                x0
                (nat.plus (nat.times (div_aux x x0 x1) (nat.S x1)) (mod_aux x x0 x1))))))
  :=
  p:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  nat.nat_ind
    (_x_365:(cts.Term
               cts.diamond
               (cts.cast
                  cts.triangle
                  cts.sinf
                  (cts.univ cts.box cts.triangle cts.I)
                  (cts.univ cts.diamond cts.sinf cts.I)
                  cts.I
                  nat.nat)) =>
     cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0 =>
           logic.eq
             nat.nat
             x
             (nat.plus (nat.times (div_aux _x_365 x x0) (nat.S x0)) (mod_aux _x_365 x x0)))))
    (n:(cts.Term
          cts.diamond
          (cts.cast
             cts.triangle
             cts.sinf
             (cts.univ cts.box cts.triangle cts.I)
             (cts.univ cts.diamond cts.sinf cts.I)
             cts.I
             nat.nat)) =>
     m:(cts.Term
          cts.diamond
          (cts.cast
             cts.triangle
             cts.sinf
             (cts.univ cts.box cts.triangle cts.I)
             (cts.univ cts.diamond cts.sinf cts.I)
             cts.I
             nat.nat)) =>
     sym_eq_div_aux
       nat.O
       (y:(cts.Term
             cts.diamond
             (cts.cast
                cts.triangle
                cts.sinf
                (cts.univ cts.box cts.triangle cts.I)
                (cts.univ cts.diamond cts.sinf cts.I)
                cts.I
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat))))) =>
        logic.eq nat.nat n (nat.plus (nat.times (y n m) (nat.S m)) (mod_aux nat.O n m)))
       (nat.sym_eq_filter_nat_type_O
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat)))
          div_aux_body
          (y:(cts.Term
                cts.diamond
                (cts.cast
                   cts.triangle
                   cts.sinf
                   (cts.univ cts.box cts.triangle cts.I)
                   (cts.univ cts.diamond cts.sinf cts.I)
                   cts.I
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      nat.nat
                      (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat))))) =>
           logic.eq nat.nat n (nat.plus (nat.times (y n m) (nat.S m)) (mod_aux nat.O n m)))
          (sym_eq_div_aux_body_O
             (y:(cts.Term
                   cts.diamond
                   (cts.cast
                      cts.triangle
                      cts.sinf
                      (cts.univ cts.box cts.triangle cts.I)
                      (cts.univ cts.diamond cts.sinf cts.I)
                      cts.I
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         nat.nat
                         (x =>
                          cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat))))) =>
              logic.eq nat.nat n (nat.plus (nat.times (y n m) (nat.S m)) (mod_aux nat.O n m)))
             (nat.eq_match_nat_type_O
                nat.nat
                nat.O
                (q:(cts.Term
                      cts.diamond
                      (cts.cast
                         cts.triangle
                         cts.sinf
                         (cts.univ cts.box cts.triangle cts.I)
                         (cts.univ cts.diamond cts.sinf cts.I)
                         cts.I
                         nat.nat)) =>
                 bool.match_bool_type
                   nat.nat
                   nat.O
                   (nat.S (div_aux q (nat.minus n (nat.S m)) m))
                   (nat.leb n m))
                (y:(cts.Term
                      cts.diamond
                      (cts.cast
                         cts.triangle
                         cts.sinf
                         (cts.univ cts.box cts.triangle cts.I)
                         (cts.univ cts.diamond cts.sinf cts.I)
                         cts.I
                         nat.nat)) =>
                 logic.eq nat.nat n (nat.plus (nat.times y (nat.S m)) (mod_aux nat.O n m)))
                (sym_eq_mod_aux
                   nat.O
                   (y:(cts.Term
                         cts.diamond
                         (cts.cast
                            cts.triangle
                            cts.sinf
                            (cts.univ cts.box cts.triangle cts.I)
                            (cts.univ cts.diamond cts.sinf cts.I)
                            cts.I
                            (cts.prod
                               cts.box
                               cts.box
                               cts.box
                               cts.I
                               nat.nat
                               (x =>
                                cts.prod
                                  cts.box
                                  cts.box
                                  cts.box
                                  cts.I
                                  nat.nat
                                  (x0 => nat.nat))))) =>
                    logic.eq
                      nat.nat
                      n
                      (nat.plus
                         (nat.times
                            (nat.match_nat_type
                               nat.nat
                               nat.O
                               (q:(cts.Term
                                     cts.diamond
                                     (cts.cast
                                        cts.triangle
                                        cts.sinf
                                        (cts.univ cts.box cts.triangle cts.I)
                                        (cts.univ cts.diamond cts.sinf cts.I)
                                        cts.I
                                        nat.nat)) =>
                                bool.match_bool_type
                                  nat.nat
                                  nat.O
                                  (nat.S (div_aux q (nat.minus n (nat.S m)) m))
                                  (nat.leb n m))
                               nat.O)
                            (nat.S m))
                         (y n m)))
                   (nat.sym_eq_filter_nat_type_O
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         nat.nat
                         (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat)))
                      mod_aux_body
                      (y:(cts.Term
                            cts.diamond
                            (cts.cast
                               cts.triangle
                               cts.sinf
                               (cts.univ cts.box cts.triangle cts.I)
                               (cts.univ cts.diamond cts.sinf cts.I)
                               cts.I
                               (cts.prod
                                  cts.box
                                  cts.box
                                  cts.box
                                  cts.I
                                  nat.nat
                                  (x =>
                                   cts.prod
                                     cts.box
                                     cts.box
                                     cts.box
                                     cts.I
                                     nat.nat
                                     (x0 => nat.nat))))) =>
                       logic.eq
                         nat.nat
                         n
                         (nat.plus
                            (nat.times
                               (nat.match_nat_type
                                  nat.nat
                                  nat.O
                                  (q:(cts.Term
                                        cts.diamond
                                        (cts.cast
                                           cts.triangle
                                           cts.sinf
                                           (cts.univ cts.box cts.triangle cts.I)
                                           (cts.univ cts.diamond cts.sinf cts.I)
                                           cts.I
                                           nat.nat)) =>
                                   bool.match_bool_type
                                     nat.nat
                                     nat.O
                                     (nat.S (div_aux q (nat.minus n (nat.S m)) m))
                                     (nat.leb n m))
                                  nat.O)
                               (nat.S m))
                            (y n m)))
                      (sym_eq_mod_aux_body_O
                         (y:(cts.Term
                               cts.diamond
                               (cts.cast
                                  cts.triangle
                                  cts.sinf
                                  (cts.univ cts.box cts.triangle cts.I)
                                  (cts.univ cts.diamond cts.sinf cts.I)
                                  cts.I
                                  (cts.prod
                                     cts.box
                                     cts.box
                                     cts.box
                                     cts.I
                                     nat.nat
                                     (x =>
                                      cts.prod
                                        cts.box
                                        cts.box
                                        cts.box
                                        cts.I
                                        nat.nat
                                        (x0 => nat.nat))))) =>
                          logic.eq
                            nat.nat
                            n
                            (nat.plus
                               (nat.times
                                  (nat.match_nat_type
                                     nat.nat
                                     nat.O
                                     (q:(cts.Term
                                           cts.diamond
                                           (cts.cast
                                              cts.triangle
                                              cts.sinf
                                              (cts.univ cts.box cts.triangle cts.I)
                                              (cts.univ cts.diamond cts.sinf cts.I)
                                              cts.I
                                              nat.nat)) =>
                                      bool.match_bool_type
                                        nat.nat
                                        nat.O
                                        (nat.S (div_aux q (nat.minus n (nat.S m)) m))
                                        (nat.leb n m))
                                     nat.O)
                                  (nat.S m))
                               (y n m)))
                         (nat.sym_eq_match_nat_type_O
                            nat.nat
                            nat.O
                            (q:(cts.Term
                                  cts.diamond
                                  (cts.cast
                                     cts.triangle
                                     cts.sinf
                                     (cts.univ cts.box cts.triangle cts.I)
                                     (cts.univ cts.diamond cts.sinf cts.I)
                                     cts.I
                                     nat.nat)) =>
                             bool.match_bool_type
                               nat.nat
                               nat.O
                               (nat.S (div_aux q (nat.minus n (nat.S m)) m))
                               (nat.leb n m))
                            (y:(cts.Term
                                  cts.diamond
                                  (cts.cast
                                     cts.triangle
                                     cts.sinf
                                     (cts.univ cts.box cts.triangle cts.I)
                                     (cts.univ cts.diamond cts.sinf cts.I)
                                     cts.I
                                     nat.nat)) =>
                             logic.eq nat.nat n (nat.plus (nat.times y (nat.S m)) n))
                            (nat.sym_eq_times
                               nat.O
                               (y:(cts.Term
                                     cts.diamond
                                     (cts.cast
                                        cts.triangle
                                        cts.sinf
                                        (cts.univ cts.box cts.triangle cts.I)
                                        (cts.univ cts.diamond cts.sinf cts.I)
                                        cts.I
                                        (cts.prod
                                           cts.box
                                           cts.box
                                           cts.box
                                           cts.I
                                           nat.nat
                                           (x => nat.nat)))) =>
                                logic.eq nat.nat n (nat.plus (y (nat.S m)) n))
                               (nat.sym_eq_filter_nat_type_O
                                  (cts.prod
                                     cts.box
                                     cts.box
                                     cts.box
                                     cts.I
                                     nat.nat
                                     (x => nat.nat))
                                  nat.times_body
                                  (y:(cts.Term
                                        cts.diamond
                                        (cts.cast
                                           cts.triangle
                                           cts.sinf
                                           (cts.univ cts.box cts.triangle cts.I)
                                           (cts.univ cts.diamond cts.sinf cts.I)
                                           cts.I
                                           (cts.prod
                                              cts.box
                                              cts.box
                                              cts.box
                                              cts.I
                                              nat.nat
                                              (x => nat.nat)))) =>
                                   logic.eq nat.nat n (nat.plus (y (nat.S m)) n))
                                  (nat.sym_eq_times_body_O
                                     (y:(cts.Term
                                           cts.diamond
                                           (cts.cast
                                              cts.triangle
                                              cts.sinf
                                              (cts.univ cts.box cts.triangle cts.I)
                                              (cts.univ cts.diamond cts.sinf cts.I)
                                              cts.I
                                              (cts.prod
                                                 cts.box
                                                 cts.box
                                                 cts.box
                                                 cts.I
                                                 nat.nat
                                                 (x => nat.nat)))) =>
                                      logic.eq nat.nat n (nat.plus (y (nat.S m)) n))
                                     (nat.sym_eq_plus
                                        nat.O
                                        (y:(cts.Term
                                              cts.diamond
                                              (cts.cast
                                                 cts.triangle
                                                 cts.sinf
                                                 (cts.univ
                                                    cts.box
                                                    cts.triangle
                                                    cts.I)
                                                 (cts.univ
                                                    cts.diamond
                                                    cts.sinf
                                                    cts.I)
                                                 cts.I
                                                 (cts.prod
                                                    cts.box
                                                    cts.box
                                                    cts.box
                                                    cts.I
                                                    nat.nat
                                                    (x => nat.nat)))) =>
                                         logic.eq nat.nat n (y n))
                                        (nat.sym_eq_filter_nat_type_O
                                           (cts.prod
                                              cts.box
                                              cts.box
                                              cts.box
                                              cts.I
                                              nat.nat
                                              (x => nat.nat))
                                           nat.plus_body
                                           (y:(cts.Term
                                                 cts.diamond
                                                 (cts.cast
                                                    cts.triangle
                                                    cts.sinf
                                                    (cts.univ
                                                       cts.box
                                                       cts.triangle
                                                       cts.I)
                                                    (cts.univ
                                                       cts.diamond
                                                       cts.sinf
                                                       cts.I)
                                                    cts.I
                                                    (cts.prod
                                                       cts.box
                                                       cts.box
                                                       cts.box
                                                       cts.I
                                                       nat.nat
                                                       (x => nat.nat)))) =>
                                            logic.eq nat.nat n (y n))
                                           (nat.sym_eq_plus_body_O
                                              (y:(cts.Term
                                                    cts.diamond
                                                    (cts.cast
                                                       cts.triangle
                                                       cts.sinf
                                                       (cts.univ
                                                          cts.box
                                                          cts.triangle
                                                          cts.I)
                                                       (cts.univ
                                                          cts.diamond
                                                          cts.sinf
                                                          cts.I)
                                                       cts.I
                                                       (cts.prod
                                                          cts.box
                                                          cts.box
                                                          cts.box
                                                          cts.I
                                                          nat.nat
                                                          (x => nat.nat)))) =>
                                               logic.eq nat.nat n (y n))
                                              (logic.refl nat.nat n)))))))))))))))
    (q:(cts.Term
          cts.diamond
          (cts.cast
             cts.triangle
             cts.sinf
             (cts.univ cts.box cts.triangle cts.I)
             (cts.univ cts.diamond cts.sinf cts.I)
             cts.I
             nat.nat)) =>
     sym_eq_div_aux
       (nat.S q)
       (y:(cts.Term
             cts.diamond
             (cts.cast
                cts.triangle
                cts.sinf
                (cts.univ cts.box cts.triangle cts.I)
                (cts.univ cts.diamond cts.sinf cts.I)
                cts.I
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat))))) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x0 =>
                 logic.eq
                   nat.nat
                   x
                   (nat.plus (nat.times (div_aux q x x0) (nat.S x0)) (mod_aux q x x0)))))
          (x =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x0 =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x1 =>
                 logic.eq
                   nat.nat
                   x0
                   (nat.plus (nat.times (y x0 x1) (nat.S x1)) (mod_aux (nat.S q) x0 x1))))))
       (nat.sym_eq_filter_nat_type_S
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat)))
          div_aux_body
          q
          (y:(cts.Term
                cts.diamond
                (cts.cast
                   cts.triangle
                   cts.sinf
                   (cts.univ cts.box cts.triangle cts.I)
                   (cts.univ cts.diamond cts.sinf cts.I)
                   cts.I
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      nat.nat
                      (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat))))) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x0 =>
                    logic.eq
                      nat.nat
                      x
                      (nat.plus (nat.times (div_aux q x x0) (nat.S x0)) (mod_aux q x x0)))))
             (x =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x0 =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x1 =>
                    logic.eq
                      nat.nat
                      x0
                      (nat.plus (nat.times (y x0 x1) (nat.S x1)) (mod_aux (nat.S q) x0 x1))))))
          (sym_eq_div_aux_body_S
             q
             (y:(cts.Term
                   cts.diamond
                   (cts.cast
                      cts.triangle
                      cts.sinf
                      (cts.univ cts.box cts.triangle cts.I)
                      (cts.univ cts.diamond cts.sinf cts.I)
                      cts.I
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         nat.nat
                         (x =>
                          cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat))))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x =>
                    cts.prod
                      cts.box
                      cts.star
                      cts.star
                      cts.I
                      nat.nat
                      (x0 =>
                       logic.eq
                         nat.nat
                         x
                         (nat.plus (nat.times (div_aux q x x0) (nat.S x0)) (mod_aux q x x0)))))
                (x =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x0 =>
                    cts.prod
                      cts.box
                      cts.star
                      cts.star
                      cts.I
                      nat.nat
                      (x1 =>
                       logic.eq
                         nat.nat
                         x0
                         (nat.plus (nat.times (y x0 x1) (nat.S x1)) (mod_aux (nat.S q) x0 x1))))))
             (Hind:(cts.Term
                      cts.star
                      (cts.prod
                         cts.box
                         cts.star
                         cts.star
                         cts.I
                         nat.nat
                         (x =>
                          cts.prod
                            cts.box
                            cts.star
                            cts.star
                            cts.I
                            nat.nat
                            (x0 =>
                             logic.eq
                               nat.nat
                               x
                               (nat.plus
                                  (nat.times (div_aux q x x0) (nat.S x0))
                                  (mod_aux q x x0)))))) =>
              n:(cts.Term
                   cts.diamond
                   (cts.cast
                      cts.triangle
                      cts.sinf
                      (cts.univ cts.box cts.triangle cts.I)
                      (cts.univ cts.diamond cts.sinf cts.I)
                      cts.I
                      nat.nat)) =>
              m:(cts.Term
                   cts.diamond
                   (cts.cast
                      cts.triangle
                      cts.sinf
                      (cts.univ cts.box cts.triangle cts.I)
                      (cts.univ cts.diamond cts.sinf cts.I)
                      cts.I
                      nat.nat)) =>
              nat.eq_match_nat_type_S
                nat.nat
                nat.O
                (q0:(cts.Term
                       cts.diamond
                       (cts.cast
                          cts.triangle
                          cts.sinf
                          (cts.univ cts.box cts.triangle cts.I)
                          (cts.univ cts.diamond cts.sinf cts.I)
                          cts.I
                          nat.nat)) =>
                 bool.match_bool_type
                   nat.nat
                   nat.O
                   (nat.S (div_aux q0 (nat.minus n (nat.S m)) m))
                   (nat.leb n m))
                q
                (y:(cts.Term
                      cts.diamond
                      (cts.cast
                         cts.triangle
                         cts.sinf
                         (cts.univ cts.box cts.triangle cts.I)
                         (cts.univ cts.diamond cts.sinf cts.I)
                         cts.I
                         nat.nat)) =>
                 logic.eq nat.nat n (nat.plus (nat.times y (nat.S m)) (mod_aux (nat.S q) n m)))
                (sym_eq_mod_aux
                   (nat.S q)
                   (y:(cts.Term
                         cts.diamond
                         (cts.cast
                            cts.triangle
                            cts.sinf
                            (cts.univ cts.box cts.triangle cts.I)
                            (cts.univ cts.diamond cts.sinf cts.I)
                            cts.I
                            (cts.prod
                               cts.box
                               cts.box
                               cts.box
                               cts.I
                               nat.nat
                               (x =>
                                cts.prod
                                  cts.box
                                  cts.box
                                  cts.box
                                  cts.I
                                  nat.nat
                                  (x0 => nat.nat))))) =>
                    logic.eq
                      nat.nat
                      n
                      (nat.plus
                         (nat.times
                            (nat.match_nat_type
                               nat.nat
                               nat.O
                               (q0:(cts.Term
                                      cts.diamond
                                      (cts.cast
                                         cts.triangle
                                         cts.sinf
                                         (cts.univ cts.box cts.triangle cts.I)
                                         (cts.univ cts.diamond cts.sinf cts.I)
                                         cts.I
                                         nat.nat)) =>
                                bool.match_bool_type
                                  nat.nat
                                  nat.O
                                  (nat.S (div_aux q0 (nat.minus n (nat.S m)) m))
                                  (nat.leb n m))
                               (nat.S q))
                            (nat.S m))
                         (y n m)))
                   (nat.sym_eq_filter_nat_type_S
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         nat.nat
                         (x => cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat)))
                      mod_aux_body
                      q
                      (y:(cts.Term
                            cts.diamond
                            (cts.cast
                               cts.triangle
                               cts.sinf
                               (cts.univ cts.box cts.triangle cts.I)
                               (cts.univ cts.diamond cts.sinf cts.I)
                               cts.I
                               (cts.prod
                                  cts.box
                                  cts.box
                                  cts.box
                                  cts.I
                                  nat.nat
                                  (x =>
                                   cts.prod
                                     cts.box
                                     cts.box
                                     cts.box
                                     cts.I
                                     nat.nat
                                     (x0 => nat.nat))))) =>
                       logic.eq
                         nat.nat
                         n
                         (nat.plus
                            (nat.times
                               (nat.match_nat_type
                                  nat.nat
                                  nat.O
                                  (q0:(cts.Term
                                         cts.diamond
                                         (cts.cast
                                            cts.triangle
                                            cts.sinf
                                            (cts.univ cts.box cts.triangle cts.I)
                                            (cts.univ cts.diamond cts.sinf cts.I)
                                            cts.I
                                            nat.nat)) =>
                                   bool.match_bool_type
                                     nat.nat
                                     nat.O
                                     (nat.S (div_aux q0 (nat.minus n (nat.S m)) m))
                                     (nat.leb n m))
                                  (nat.S q))
                               (nat.S m))
                            (y n m)))
                      (sym_eq_mod_aux_body_S
                         q
                         (y:(cts.Term
                               cts.diamond
                               (cts.cast
                                  cts.triangle
                                  cts.sinf
                                  (cts.univ cts.box cts.triangle cts.I)
                                  (cts.univ cts.diamond cts.sinf cts.I)
                                  cts.I
                                  (cts.prod
                                     cts.box
                                     cts.box
                                     cts.box
                                     cts.I
                                     nat.nat
                                     (x =>
                                      cts.prod
                                        cts.box
                                        cts.box
                                        cts.box
                                        cts.I
                                        nat.nat
                                        (x0 => nat.nat))))) =>
                          logic.eq
                            nat.nat
                            n
                            (nat.plus
                               (nat.times
                                  (nat.match_nat_type
                                     nat.nat
                                     nat.O
                                     (q0:(cts.Term
                                            cts.diamond
                                            (cts.cast
                                               cts.triangle
                                               cts.sinf
                                               (cts.univ cts.box cts.triangle cts.I)
                                               (cts.univ cts.diamond cts.sinf cts.I)
                                               cts.I
                                               nat.nat)) =>
                                      bool.match_bool_type
                                        nat.nat
                                        nat.O
                                        (nat.S (div_aux q0 (nat.minus n (nat.S m)) m))
                                        (nat.leb n m))
                                     (nat.S q))
                                  (nat.S m))
                               (y n m)))
                         (nat.sym_eq_match_nat_type_S
                            nat.nat
                            nat.O
                            (z:(cts.Term
                                  cts.diamond
                                  (cts.cast
                                     cts.triangle
                                     cts.sinf
                                     (cts.univ cts.box cts.triangle cts.I)
                                     (cts.univ cts.diamond cts.sinf cts.I)
                                     cts.I
                                     nat.nat)) =>
                             bool.match_bool_type
                               nat.nat
                               nat.O
                               (nat.S (div_aux z (nat.minus n (nat.S m)) m))
                               (nat.leb n m))
                            q
                            (y:(cts.Term
                                  cts.diamond
                                  (cts.cast
                                     cts.triangle
                                     cts.sinf
                                     (cts.univ cts.box cts.triangle cts.I)
                                     (cts.univ cts.diamond cts.sinf cts.I)
                                     cts.I
                                     nat.nat)) =>
                             logic.eq
                               nat.nat
                               n
                               (nat.plus
                                  (nat.times y (nat.S m))
                                  (bool.match_bool_type
                                     nat.nat
                                     n
                                     (mod_aux q (nat.minus n (nat.S m)) m)
                                     (nat.leb n m))))
                            (nat.leb_elim
                               n
                               m
                               (__:(cts.Term
                                      cts.diamond
                                      (cts.cast
                                         cts.triangle
                                         cts.sinf
                                         (cts.univ cts.box cts.triangle cts.I)
                                         (cts.univ cts.diamond cts.sinf cts.I)
                                         cts.I
                                         bool.bool)) =>
                                logic.eq
                                  nat.nat
                                  n
                                  (nat.plus
                                     (nat.times
                                        (bool.match_bool_type
                                           nat.nat
                                           nat.O
                                           (nat.S (div_aux q (nat.minus n (nat.S m)) m))
                                           __)
                                        (nat.S m))
                                     (bool.match_bool_type
                                        nat.nat
                                        n
                                        (mod_aux q (nat.minus n (nat.S m)) m)
                                        __)))
                               (bool.sym_eq_match_bool_type_true
                                  nat.nat
                                  nat.O
                                  (nat.S (div_aux q (nat.minus n (nat.S m)) m))
                                  (x:(cts.Term
                                        cts.diamond
                                        (cts.cast
                                           cts.triangle
                                           cts.sinf
                                           (cts.univ cts.box cts.triangle cts.I)
                                           (cts.univ cts.diamond cts.sinf cts.I)
                                           cts.I
                                           nat.nat)) =>
                                   cts.prod
                                     cts.star
                                     cts.star
                                     cts.star
                                     cts.I
                                     (nat.le n m)
                                     (x0 =>
                                      logic.eq
                                        nat.nat
                                        n
                                        (nat.plus
                                           (nat.times x (nat.S m))
                                           (bool.match_bool_type
                                              nat.nat
                                              n
                                              (mod_aux q (nat.minus n (nat.S m)) m)
                                              bool.true))))
                                  (nat.sym_eq_times
                                     nat.O
                                     (y:(cts.Term
                                           cts.diamond
                                           (cts.cast
                                              cts.triangle
                                              cts.sinf
                                              (cts.univ cts.box cts.triangle cts.I)
                                              (cts.univ cts.diamond cts.sinf cts.I)
                                              cts.I
                                              (cts.prod
                                                 cts.box
                                                 cts.box
                                                 cts.box
                                                 cts.I
                                                 nat.nat
                                                 (x => nat.nat)))) =>
                                      cts.prod
                                        cts.star
                                        cts.star
                                        cts.star
                                        cts.I
                                        (nat.le n m)
                                        (x =>
                                         logic.eq
                                           nat.nat
                                           n
                                           (nat.plus
                                              (y (nat.S m))
                                              (bool.match_bool_type
                                                 nat.nat
                                                 n
                                                 (mod_aux q (nat.minus n (nat.S m)) m)
                                                 bool.true))))
                                     (nat.sym_eq_filter_nat_type_O
                                        (cts.prod
                                           cts.box
                                           cts.box
                                           cts.box
                                           cts.I
                                           nat.nat
                                           (x => nat.nat))
                                        nat.times_body
                                        (y:(cts.Term
                                              cts.diamond
                                              (cts.cast
                                                 cts.triangle
                                                 cts.sinf
                                                 (cts.univ
                                                    cts.box
                                                    cts.triangle
                                                    cts.I)
                                                 (cts.univ
                                                    cts.diamond
                                                    cts.sinf
                                                    cts.I)
                                                 cts.I
                                                 (cts.prod
                                                    cts.box
                                                    cts.box
                                                    cts.box
                                                    cts.I
                                                    nat.nat
                                                    (x => nat.nat)))) =>
                                         cts.prod
                                           cts.star
                                           cts.star
                                           cts.star
                                           cts.I
                                           (nat.le n m)
                                           (x =>
                                            logic.eq
                                              nat.nat
                                              n
                                              (nat.plus
                                                 (y (nat.S m))
                                                 (bool.match_bool_type
                                                    nat.nat
                                                    n
                                                    (mod_aux
                                                       q
                                                       (nat.minus n (nat.S m))
                                                       m)
                                                    bool.true))))
                                        (nat.sym_eq_times_body_O
                                           (y:(cts.Term
                                                 cts.diamond
                                                 (cts.cast
                                                    cts.triangle
                                                    cts.sinf
                                                    (cts.univ
                                                       cts.box
                                                       cts.triangle
                                                       cts.I)
                                                    (cts.univ
                                                       cts.diamond
                                                       cts.sinf
                                                       cts.I)
                                                    cts.I
                                                    (cts.prod
                                                       cts.box
                                                       cts.box
                                                       cts.box
                                                       cts.I
                                                       nat.nat
                                                       (x => nat.nat)))) =>
                                            cts.prod
                                              cts.star
                                              cts.star
                                              cts.star
                                              cts.I
                                              (nat.le n m)
                                              (x =>
                                               logic.eq
                                                 nat.nat
                                                 n
                                                 (nat.plus
                                                    (y (nat.S m))
                                                    (bool.match_bool_type
                                                       nat.nat
                                                       n
                                                       (mod_aux
                                                          q
                                                          (nat.minus n (nat.S m))
                                                          m)
                                                       bool.true))))
                                           (bool.sym_eq_match_bool_type_true
                                              nat.nat
                                              n
                                              (mod_aux q (nat.minus n (nat.S m)) m)
                                              (y:(cts.Term
                                                    cts.diamond
                                                    (cts.cast
                                                       cts.triangle
                                                       cts.sinf
                                                       (cts.univ
                                                          cts.box
                                                          cts.triangle
                                                          cts.I)
                                                       (cts.univ
                                                          cts.diamond
                                                          cts.sinf
                                                          cts.I)
                                                       cts.I
                                                       nat.nat)) =>
                                               cts.prod
                                                 cts.star
                                                 cts.star
                                                 cts.star
                                                 cts.I
                                                 (nat.le n m)
                                                 (x =>
                                                  logic.eq
                                                    nat.nat
                                                    n
                                                    (nat.plus nat.O y)))
                                              (nat.sym_eq_plus
                                                 nat.O
                                                 (y:(cts.Term
                                                       cts.diamond
                                                       (cts.cast
                                                          cts.triangle
                                                          cts.sinf
                                                          (cts.univ
                                                             cts.box
                                                             cts.triangle
                                                             cts.I)
                                                          (cts.univ
                                                             cts.diamond
                                                             cts.sinf
                                                             cts.I)
                                                          cts.I
                                                          (cts.prod
                                                             cts.box
                                                             cts.box
                                                             cts.box
                                                             cts.I
                                                             nat.nat
                                                             (x => nat.nat)))) =>
                                                  cts.prod
                                                    cts.star
                                                    cts.star
                                                    cts.star
                                                    cts.I
                                                    (nat.le n m)
                                                    (x => logic.eq nat.nat n (y n)))
                                                 (nat.sym_eq_filter_nat_type_O
                                                    (cts.prod
                                                       cts.box
                                                       cts.box
                                                       cts.box
                                                       cts.I
                                                       nat.nat
                                                       (x => nat.nat))
                                                    nat.plus_body
                                                    (y:(cts.Term
                                                          cts.diamond
                                                          (cts.cast
                                                             cts.triangle
                                                             cts.sinf
                                                             (cts.univ
                                                                cts.box
                                                                cts.triangle
                                                                cts.I)
                                                             (cts.univ
                                                                cts.diamond
                                                                cts.sinf
                                                                cts.I)
                                                             cts.I
                                                             (cts.prod
                                                                cts.box
                                                                cts.box
                                                                cts.box
                                                                cts.I
                                                                nat.nat
                                                                (x => nat.nat)))) =>
                                                     cts.prod
                                                       cts.star
                                                       cts.star
                                                       cts.star
                                                       cts.I
                                                       (nat.le n m)
                                                       (x =>
                                                        logic.eq nat.nat n (y n)))
                                                    (nat.sym_eq_plus_body_O
                                                       (y:(cts.Term
                                                             cts.diamond
                                                             (cts.cast
                                                                cts.triangle
                                                                cts.sinf
                                                                (cts.univ
                                                                   cts.box
                                                                   cts.triangle
                                                                   cts.I)
                                                                (cts.univ
                                                                   cts.diamond
                                                                   cts.sinf
                                                                   cts.I)
                                                                cts.I
                                                                (cts.prod
                                                                   cts.box
                                                                   cts.box
                                                                   cts.box
                                                                   cts.I
                                                                   nat.nat
                                                                   (x =>
                                                                    nat.nat)))) =>
                                                        cts.prod
                                                          cts.star
                                                          cts.star
                                                          cts.star
                                                          cts.I
                                                          (nat.le n m)
                                                          (x =>
                                                           logic.eq nat.nat n (y n)))
                                                       (lenm:(cts.Term
                                                                cts.star
                                                                (nat.le n m)) =>
                                                        logic.refl nat.nat n)))))))))
                               (bool.sym_eq_match_bool_type_false
                                  nat.nat
                                  n
                                  (mod_aux q (nat.minus n (nat.S m)) m)
                                  (x:(cts.Term
                                        cts.diamond
                                        (cts.cast
                                           cts.triangle
                                           cts.sinf
                                           (cts.univ cts.box cts.triangle cts.I)
                                           (cts.univ cts.diamond cts.sinf cts.I)
                                           cts.I
                                           nat.nat)) =>
                                   cts.prod
                                     cts.star
                                     cts.star
                                     cts.star
                                     cts.I
                                     (connectives.Not (nat.le n m))
                                     (x0 =>
                                      logic.eq
                                        nat.nat
                                        n
                                        (nat.plus
                                           (nat.times
                                              (bool.match_bool_type
                                                 nat.nat
                                                 nat.O
                                                 (nat.S
                                                    (div_aux
                                                       q
                                                       (nat.minus n (nat.S m))
                                                       m))
                                                 bool.false)
                                              (nat.S m))
                                           x)))
                                  (bool.sym_eq_match_bool_type_false
                                     nat.nat
                                     nat.O
                                     (nat.S (div_aux q (nat.minus n (nat.S m)) m))
                                     (y:(cts.Term
                                           cts.diamond
                                           (cts.cast
                                              cts.triangle
                                              cts.sinf
                                              (cts.univ cts.box cts.triangle cts.I)
                                              (cts.univ cts.diamond cts.sinf cts.I)
                                              cts.I
                                              nat.nat)) =>
                                      cts.prod
                                        cts.star
                                        cts.star
                                        cts.star
                                        cts.I
                                        (connectives.Not (nat.le n m))
                                        (x =>
                                         logic.eq
                                           nat.nat
                                           n
                                           (nat.plus
                                              (nat.times y (nat.S m))
                                              (mod_aux q (nat.minus n (nat.S m)) m))))
                                     (nat.sym_eq_times
                                        (nat.S (div_aux q (nat.minus n (nat.S m)) m))
                                        (y:(cts.Term
                                              cts.diamond
                                              (cts.cast
                                                 cts.triangle
                                                 cts.sinf
                                                 (cts.univ
                                                    cts.box
                                                    cts.triangle
                                                    cts.I)
                                                 (cts.univ
                                                    cts.diamond
                                                    cts.sinf
                                                    cts.I)
                                                 cts.I
                                                 (cts.prod
                                                    cts.box
                                                    cts.box
                                                    cts.box
                                                    cts.I
                                                    nat.nat
                                                    (x => nat.nat)))) =>
                                         cts.prod
                                           cts.star
                                           cts.star
                                           cts.star
                                           cts.I
                                           (connectives.Not (nat.le n m))
                                           (x =>
                                            logic.eq
                                              nat.nat
                                              n
                                              (nat.plus
                                                 (y (nat.S m))
                                                 (mod_aux q (nat.minus n (nat.S m)) m))))
                                        (nat.sym_eq_filter_nat_type_S
                                           (cts.prod
                                              cts.box
                                              cts.box
                                              cts.box
                                              cts.I
                                              nat.nat
                                              (x => nat.nat))
                                           nat.times_body
                                           (div_aux q (nat.minus n (nat.S m)) m)
                                           (y:(cts.Term
                                                 cts.diamond
                                                 (cts.cast
                                                    cts.triangle
                                                    cts.sinf
                                                    (cts.univ
                                                       cts.box
                                                       cts.triangle
                                                       cts.I)
                                                    (cts.univ
                                                       cts.diamond
                                                       cts.sinf
                                                       cts.I)
                                                    cts.I
                                                    (cts.prod
                                                       cts.box
                                                       cts.box
                                                       cts.box
                                                       cts.I
                                                       nat.nat
                                                       (x => nat.nat)))) =>
                                            cts.prod
                                              cts.star
                                              cts.star
                                              cts.star
                                              cts.I
                                              (connectives.Not (nat.le n m))
                                              (x =>
                                               logic.eq
                                                 nat.nat
                                                 n
                                                 (nat.plus
                                                    (y (nat.S m))
                                                    (mod_aux
                                                       q
                                                       (nat.minus n (nat.S m))
                                                       m))))
                                           (nat.sym_eq_times_body_S
                                              (div_aux q (nat.minus n (nat.S m)) m)
                                              (y:(cts.Term
                                                    cts.diamond
                                                    (cts.cast
                                                       cts.triangle
                                                       cts.sinf
                                                       (cts.univ
                                                          cts.box
                                                          cts.triangle
                                                          cts.I)
                                                       (cts.univ
                                                          cts.diamond
                                                          cts.sinf
                                                          cts.I)
                                                       cts.I
                                                       (cts.prod
                                                          cts.box
                                                          cts.box
                                                          cts.box
                                                          cts.I
                                                          nat.nat
                                                          (x => nat.nat)))) =>
                                               cts.prod
                                                 cts.star
                                                 cts.star
                                                 cts.star
                                                 cts.I
                                                 (connectives.Not (nat.le n m))
                                                 (x =>
                                                  logic.eq
                                                    nat.nat
                                                    n
                                                    (nat.plus
                                                       (y (nat.S m))
                                                       (mod_aux
                                                          q
                                                          (nat.minus n (nat.S m))
                                                          m))))
                                              (nat.sym_eq_plus
                                                 (nat.S m)
                                                 (y:(cts.Term
                                                       cts.diamond
                                                       (cts.cast
                                                          cts.triangle
                                                          cts.sinf
                                                          (cts.univ
                                                             cts.box
                                                             cts.triangle
                                                             cts.I)
                                                          (cts.univ
                                                             cts.diamond
                                                             cts.sinf
                                                             cts.I)
                                                          cts.I
                                                          (cts.prod
                                                             cts.box
                                                             cts.box
                                                             cts.box
                                                             cts.I
                                                             nat.nat
                                                             (x => nat.nat)))) =>
                                                  cts.prod
                                                    cts.star
                                                    cts.star
                                                    cts.star
                                                    cts.I
                                                    (connectives.Not (nat.le n m))
                                                    (x =>
                                                     logic.eq
                                                       nat.nat
                                                       n
                                                       (nat.plus
                                                          (y
                                                             (nat.times
                                                                (div_aux
                                                                   q
                                                                   (nat.minus
                                                                    n
                                                                    (nat.S m))
                                                                   m)
                                                                (nat.S m)))
                                                          (mod_aux
                                                             q
                                                             (nat.minus
                                                                n
                                                                (nat.S m))
                                                             m))))
                                                 (nat.sym_eq_filter_nat_type_S
                                                    (cts.prod
                                                       cts.box
                                                       cts.box
                                                       cts.box
                                                       cts.I
                                                       nat.nat
                                                       (x => nat.nat))
                                                    nat.plus_body
                                                    m
                                                    (y:(cts.Term
                                                          cts.diamond
                                                          (cts.cast
                                                             cts.triangle
                                                             cts.sinf
                                                             (cts.univ
                                                                cts.box
                                                                cts.triangle
                                                                cts.I)
                                                             (cts.univ
                                                                cts.diamond
                                                                cts.sinf
                                                                cts.I)
                                                             cts.I
                                                             (cts.prod
                                                                cts.box
                                                                cts.box
                                                                cts.box
                                                                cts.I
                                                                nat.nat
                                                                (x => nat.nat)))) =>
                                                     cts.prod
                                                       cts.star
                                                       cts.star
                                                       cts.star
                                                       cts.I
                                                       (connectives.Not (nat.le n m))
                                                       (x =>
                                                        logic.eq
                                                          nat.nat
                                                          n
                                                          (nat.plus
                                                             (y
                                                                (nat.times
                                                                   (div_aux
                                                                    q
                                                                    (nat.minus
                                                                    n
                                                                    (nat.S
                                                                    m))
                                                                    m)
                                                                   (nat.S m)))
                                                             (mod_aux
                                                                q
                                                                (nat.minus
                                                                   n
                                                                   (nat.S m))
                                                                m))))
                                                    (nat.sym_eq_plus_body_S
                                                       m
                                                       (y:(cts.Term
                                                             cts.diamond
                                                             (cts.cast
                                                                cts.triangle
                                                                cts.sinf
                                                                (cts.univ
                                                                   cts.box
                                                                   cts.triangle
                                                                   cts.I)
                                                                (cts.univ
                                                                   cts.diamond
                                                                   cts.sinf
                                                                   cts.I)
                                                                cts.I
                                                                (cts.prod
                                                                   cts.box
                                                                   cts.box
                                                                   cts.box
                                                                   cts.I
                                                                   nat.nat
                                                                   (x =>
                                                                    nat.nat)))) =>
                                                        cts.prod
                                                          cts.star
                                                          cts.star
                                                          cts.star
                                                          cts.I
                                                          (connectives.Not
                                                             (nat.le n m))
                                                          (x =>
                                                           logic.eq
                                                             nat.nat
                                                             n
                                                             (nat.plus
                                                                (y
                                                                   (nat.times
                                                                    (div_aux
                                                                    q
                                                                    (nat.minus
                                                                    n
                                                                    (nat.S
                                                                    m))
                                                                    m)
                                                                    (nat.S m)))
                                                                (mod_aux
                                                                   q
                                                                   (nat.minus
                                                                    n
                                                                    (nat.S m))
                                                                   m))))
                                                       (nat.sym_eq_plus
                                                          (nat.S
                                                             (nat.plus
                                                                m
                                                                (nat.times
                                                                   (div_aux
                                                                    q
                                                                    (nat.minus
                                                                    n
                                                                    (nat.S
                                                                    m))
                                                                    m)
                                                                   (nat.S m))))
                                                          (y:(cts.Term
                                                                cts.diamond
                                                                (cts.cast
                                                                   cts.triangle
                                                                   cts.sinf
                                                                   (cts.univ
                                                                    cts.box
                                                                    cts.triangle
                                                                    cts.I)
                                                                   (cts.univ
                                                                    cts.diamond
                                                                    cts.sinf
                                                                    cts.I)
                                                                   cts.I
                                                                   (cts.prod
                                                                    cts.box
                                                                    cts.box
                                                                    cts.box
                                                                    cts.I
                                                                    nat.nat
                                                                    (x =>
                                                                    nat.nat)))) =>
                                                           cts.prod
                                                             cts.star
                                                             cts.star
                                                             cts.star
                                                             cts.I
                                                             (connectives.Not
                                                                (nat.le n m))
                                                             (x =>
                                                              logic.eq
                                                                nat.nat
                                                                n
                                                                (y
                                                                   (mod_aux
                                                                    q
                                                                    (nat.minus
                                                                    n
                                                                    (nat.S
                                                                    m))
                                                                    m))))
                                                          (nat.sym_eq_filter_nat_type_S
                                                             (cts.prod
                                                                cts.box
                                                                cts.box
                                                                cts.box
                                                                cts.I
                                                                nat.nat
                                                                (x => nat.nat))
                                                             nat.plus_body
                                                             (nat.plus
                                                                m
                                                                (nat.times
                                                                   (div_aux
                                                                    q
                                                                    (nat.minus
                                                                    n
                                                                    (nat.S
                                                                    m))
                                                                    m)
                                                                   (nat.S m)))
                                                             (y:(cts.Term
                                                                   cts.diamond
                                                                   (cts.cast
                                                                    cts.triangle
                                                                    cts.sinf
                                                                    (cts.univ
                                                                    cts.box
                                                                    cts.triangle
                                                                    cts.I)
                                                                    (cts.univ
                                                                    cts.diamond
                                                                    cts.sinf
                                                                    cts.I)
                                                                    cts.I
                                                                    (cts.prod
                                                                    cts.box
                                                                    cts.box
                                                                    cts.box
                                                                    cts.I
                                                                    nat.nat
                                                                    (x =>
                                                                    nat.nat)))) =>
                                                              cts.prod
                                                                cts.star
                                                                cts.star
                                                                cts.star
                                                                cts.I
                                                                (connectives.Not
                                                                   (nat.le n m))
                                                                (x =>
                                                                 logic.eq
                                                                   nat.nat
                                                                   n
                                                                   (y
                                                                    (mod_aux
                                                                    q
                                                                    (nat.minus
                                                                    n
                                                                    (nat.S
                                                                    m))
                                                                    m))))
                                                             (nat.sym_eq_plus_body_S
                                                                (nat.plus
                                                                   m
                                                                   (nat.times
                                                                    (div_aux
                                                                    q
                                                                    (nat.minus
                                                                    n
                                                                    (nat.S
                                                                    m))
                                                                    m)
                                                                    (nat.S m)))
                                                                (y:(cts.Term
                                                                    cts.diamond
                                                                    (cts.cast
                                                                    cts.triangle
                                                                    cts.sinf
                                                                    (cts.univ
                                                                    cts.box
                                                                    cts.triangle
                                                                    cts.I)
                                                                    (cts.univ
                                                                    cts.diamond
                                                                    cts.sinf
                                                                    cts.I)
                                                                    cts.I
                                                                    (cts.prod
                                                                    cts.box
                                                                    cts.box
                                                                    cts.box
                                                                    cts.I
                                                                    nat.nat
                                                                    (x =>
                                                                    nat.nat)))) =>
                                                                 cts.prod
                                                                   cts.star
                                                                   cts.star
                                                                   cts.star
                                                                   cts.I
                                                                   (connectives.Not
                                                                    (nat.le
                                                                    n
                                                                    m))
                                                                   (x =>
                                                                    logic.eq
                                                                    nat.nat
                                                                    n
                                                                    (y
                                                                    (mod_aux
                                                                    q
                                                                    (nat.minus
                                                                    n
                                                                    (nat.S
                                                                    m))
                                                                    m))))
                                                                (lenm:(
                                                                 cts.Term
                                                                   cts.star
                                                                   (connectives.Not
                                                                    (nat.le
                                                                    n
                                                                    m))) =>
                                                                 logic.eq_ind_r
                                                                   nat.nat
                                                                   (nat.plus
                                                                    m
                                                                    (nat.plus
                                                                    (nat.times
                                                                    (div_aux
                                                                    q
                                                                    (nat.minus
                                                                    n
                                                                    (nat.S
                                                                    m))
                                                                    m)
                                                                    (nat.S
                                                                    m))
                                                                    (mod_aux
                                                                    q
                                                                    (nat.minus
                                                                    n
                                                                    (nat.S
                                                                    m))
                                                                    m)))
                                                                   (x:(
                                                                    cts.Term
                                                                    cts.diamond
                                                                    (cts.cast
                                                                    cts.triangle
                                                                    cts.sinf
                                                                    (cts.univ
                                                                    cts.box
                                                                    cts.triangle
                                                                    cts.I)
                                                                    (cts.univ
                                                                    cts.diamond
                                                                    cts.sinf
                                                                    cts.I)
                                                                    cts.I
                                                                    nat.nat)) =>
                                                                    logic.eq
                                                                    nat.nat
                                                                    n
                                                                    (nat.S x))
                                                                   (logic.eq_ind
                                                                    nat.nat
                                                                    (nat.minus
                                                                    n
                                                                    (nat.S
                                                                    m))
                                                                    (x_1:(
                                                                    cts.Term
                                                                    cts.diamond
                                                                    (cts.cast
                                                                    cts.triangle
                                                                    cts.sinf
                                                                    (cts.univ
                                                                    cts.box
                                                                    cts.triangle
                                                                    cts.I)
                                                                    (cts.univ
                                                                    cts.diamond
                                                                    cts.sinf
                                                                    cts.I)
                                                                    cts.I
                                                                    nat.nat)) =>
                                                                    logic.eq
                                                                    nat.nat
                                                                    n
                                                                    (nat.S
                                                                    (nat.plus
                                                                    m
                                                                    x_1)))
                                                                    (logic.eq_coerc
                                                                    (logic.eq
                                                                    nat.nat
                                                                    n
                                                                    (nat.plus
                                                                    (nat.minus
                                                                    n
                                                                    (nat.S
                                                                    m))
                                                                    (nat.S
                                                                    m)))
                                                                    (logic.eq
                                                                    nat.nat
                                                                    n
                                                                    (nat.S
                                                                    (nat.plus
                                                                    m
                                                                    (nat.minus
                                                                    n
                                                                    (nat.S
                                                                    m)))))
                                                                    (nat.plus_minus_m_m
                                                                    n
                                                                    (nat.S
                                                                    m)
                                                                    (nat.not_le_to_lt
                                                                    n
                                                                    m
                                                                    lenm))
                                                                    (logic.rewrite_r
                                                                    nat.nat
                                                                    (nat.pred
                                                                    (nat.minus
                                                                    n
                                                                    m))
                                                                    (__:(
                                                                    cts.Term
                                                                    cts.diamond
                                                                    (cts.cast
                                                                    cts.triangle
                                                                    cts.sinf
                                                                    (cts.univ
                                                                    cts.box
                                                                    cts.triangle
                                                                    cts.I)
                                                                    (cts.univ
                                                                    cts.diamond
                                                                    cts.sinf
                                                                    cts.I)
                                                                    cts.I
                                                                    nat.nat)) =>
                                                                    logic.eq
                                                                    (cts.univ
                                                                    cts.star
                                                                    cts.box
                                                                    cts.I)
                                                                    (logic.eq
                                                                    nat.nat
                                                                    n
                                                                    (nat.plus
                                                                    __
                                                                    (nat.S
                                                                    m)))
                                                                    (logic.eq
                                                                    nat.nat
                                                                    n
                                                                    (nat.S
                                                                    (nat.plus
                                                                    m
                                                                    (nat.minus
                                                                    n
                                                                    (nat.S
                                                                    m))))))
                                                                    (logic.rewrite_r
                                                                    nat.nat
                                                                    (nat.pred
                                                                    (nat.minus
                                                                    n
                                                                    m))
                                                                    (__:(
                                                                    cts.Term
                                                                    cts.diamond
                                                                    (cts.cast
                                                                    cts.triangle
                                                                    cts.sinf
                                                                    (cts.univ
                                                                    cts.box
                                                                    cts.triangle
                                                                    cts.I)
                                                                    (cts.univ
                                                                    cts.diamond
                                                                    cts.sinf
                                                                    cts.I)
                                                                    cts.I
                                                                    nat.nat)) =>
                                                                    logic.eq
                                                                    (cts.univ
                                                                    cts.star
                                                                    cts.box
                                                                    cts.I)
                                                                    (logic.eq
                                                                    nat.nat
                                                                    n
                                                                    (nat.plus
                                                                    (nat.pred
                                                                    (nat.minus
                                                                    n
                                                                    m))
                                                                    (nat.S
                                                                    m)))
                                                                    (logic.eq
                                                                    nat.nat
                                                                    n
                                                                    (nat.S
                                                                    (nat.plus
                                                                    m
                                                                    __))))
                                                                    (logic.rewrite_r
                                                                    nat.nat
                                                                    (nat.plus
                                                                    m
                                                                    (nat.S
                                                                    (nat.pred
                                                                    (nat.minus
                                                                    n
                                                                    m))))
                                                                    (__:(
                                                                    cts.Term
                                                                    cts.diamond
                                                                    (cts.cast
                                                                    cts.triangle
                                                                    cts.sinf
                                                                    (cts.univ
                                                                    cts.box
                                                                    cts.triangle
                                                                    cts.I)
                                                                    (cts.univ
                                                                    cts.diamond
                                                                    cts.sinf
                                                                    cts.I)
                                                                    cts.I
                                                                    nat.nat)) =>
                                                                    logic.eq
                                                                    (cts.univ
                                                                    cts.star
                                                                    cts.box
                                                                    cts.I)
                                                                    (logic.eq
                                                                    nat.nat
                                                                    n
                                                                    (nat.plus
                                                                    (nat.pred
                                                                    (nat.minus
                                                                    n
                                                                    m))
                                                                    (nat.S
                                                                    m)))
                                                                    (logic.eq
                                                                    nat.nat
                                                                    n
                                                                    __))
                                                                    (logic.rewrite_r
                                                                    nat.nat
                                                                    (nat.plus
                                                                    m
                                                                    (nat.S
                                                                    (nat.pred
                                                                    (nat.minus
                                                                    n
                                                                    m))))
                                                                    (__:(
                                                                    cts.Term
                                                                    cts.diamond
                                                                    (cts.cast
                                                                    cts.triangle
                                                                    cts.sinf
                                                                    (cts.univ
                                                                    cts.box
                                                                    cts.triangle
                                                                    cts.I)
                                                                    (cts.univ
                                                                    cts.diamond
                                                                    cts.sinf
                                                                    cts.I)
                                                                    cts.I
                                                                    nat.nat)) =>
                                                                    logic.eq
                                                                    (cts.univ
                                                                    cts.star
                                                                    cts.box
                                                                    cts.I)
                                                                    (logic.eq
                                                                    nat.nat
                                                                    n
                                                                    __)
                                                                    (logic.eq
                                                                    nat.nat
                                                                    n
                                                                    (nat.plus
                                                                    m
                                                                    (nat.S
                                                                    (nat.pred
                                                                    (nat.minus
                                                                    n
                                                                    m))))))
                                                                    (logic.refl
                                                                    (cts.univ
                                                                    cts.star
                                                                    cts.box
                                                                    cts.I)
                                                                    (logic.eq
                                                                    nat.nat
                                                                    n
                                                                    (nat.plus
                                                                    m
                                                                    (nat.S
                                                                    (nat.pred
                                                                    (nat.minus
                                                                    n
                                                                    m))))))
                                                                    (nat.plus
                                                                    (nat.pred
                                                                    (nat.minus
                                                                    n
                                                                    m))
                                                                    (nat.S
                                                                    m))
                                                                    (logic.rewrite_l
                                                                    nat.nat
                                                                    (nat.S
                                                                    (nat.plus
                                                                    (nat.pred
                                                                    (nat.minus
                                                                    n
                                                                    m))
                                                                    m))
                                                                    (__:(
                                                                    cts.Term
                                                                    cts.diamond
                                                                    (cts.cast
                                                                    cts.triangle
                                                                    cts.sinf
                                                                    (cts.univ
                                                                    cts.box
                                                                    cts.triangle
                                                                    cts.I)
                                                                    (cts.univ
                                                                    cts.diamond
                                                                    cts.sinf
                                                                    cts.I)
                                                                    cts.I
                                                                    nat.nat)) =>
                                                                    logic.eq
                                                                    nat.nat
                                                                    __
                                                                    (nat.plus
                                                                    m
                                                                    (nat.S
                                                                    (nat.pred
                                                                    (nat.minus
                                                                    n
                                                                    m)))))
                                                                    (logic.rewrite_l
                                                                    nat.nat
                                                                    (nat.plus
                                                                    m
                                                                    (nat.pred
                                                                    (nat.minus
                                                                    n
                                                                    m)))
                                                                    (__:(
                                                                    cts.Term
                                                                    cts.diamond
                                                                    (cts.cast
                                                                    cts.triangle
                                                                    cts.sinf
                                                                    (cts.univ
                                                                    cts.box
                                                                    cts.triangle
                                                                    cts.I)
                                                                    (cts.univ
                                                                    cts.diamond
                                                                    cts.sinf
                                                                    cts.I)
                                                                    cts.I
                                                                    nat.nat)) =>
                                                                    logic.eq
                                                                    nat.nat
                                                                    (nat.S
                                                                    __)
                                                                    (nat.plus
                                                                    m
                                                                    (nat.S
                                                                    (nat.pred
                                                                    (nat.minus
                                                                    n
                                                                    m)))))
                                                                    (nat.plus_n_Sm
                                                                    m
                                                                    (nat.pred
                                                                    (nat.minus
                                                                    n
                                                                    m)))
                                                                    (nat.plus
                                                                    (nat.pred
                                                                    (nat.minus
                                                                    n
                                                                    m))
                                                                    m)
                                                                    (nat.commutative_plus
                                                                    m
                                                                    (nat.pred
                                                                    (nat.minus
                                                                    n
                                                                    m))))
                                                                    (nat.plus
                                                                    (nat.pred
                                                                    (nat.minus
                                                                    n
                                                                    m))
                                                                    (nat.S
                                                                    m))
                                                                    (nat.plus_n_Sm
                                                                    (nat.pred
                                                                    (nat.minus
                                                                    n
                                                                    m))
                                                                    m)))
                                                                    (nat.S
                                                                    (nat.plus
                                                                    m
                                                                    (nat.pred
                                                                    (nat.minus
                                                                    n
                                                                    m))))
                                                                    (nat.plus_n_Sm
                                                                    m
                                                                    (nat.pred
                                                                    (nat.minus
                                                                    n
                                                                    m))))
                                                                    (nat.minus
                                                                    n
                                                                    (nat.S
                                                                    m))
                                                                    (nat.eq_minus_S_pred
                                                                    n
                                                                    m))
                                                                    (nat.minus
                                                                    n
                                                                    (nat.S
                                                                    m))
                                                                    (nat.eq_minus_S_pred
                                                                    n
                                                                    m)))
                                                                    (nat.plus
                                                                    (nat.times
                                                                    (div_aux
                                                                    q
                                                                    (nat.minus
                                                                    n
                                                                    (nat.S
                                                                    m))
                                                                    m)
                                                                    (nat.S
                                                                    m))
                                                                    (mod_aux
                                                                    q
                                                                    (nat.minus
                                                                    n
                                                                    (nat.S
                                                                    m))
                                                                    m))
                                                                    (Hind
                                                                    (nat.minus
                                                                    n
                                                                    (nat.S
                                                                    m))
                                                                    m))
                                                                   (nat.plus
                                                                    (nat.plus
                                                                    m
                                                                    (nat.times
                                                                    (div_aux
                                                                    q
                                                                    (nat.minus
                                                                    n
                                                                    (nat.S
                                                                    m))
                                                                    m)
                                                                    (nat.S
                                                                    m)))
                                                                    (mod_aux
                                                                    q
                                                                    (nat.minus
                                                                    n
                                                                    (nat.S
                                                                    m))
                                                                    m))
                                                                   (nat.associative_plus
                                                                    m
                                                                    (nat.times
                                                                    (div_aux
                                                                    q
                                                                    (nat.minus
                                                                    n
                                                                    (nat.S
                                                                    m))
                                                                    m)
                                                                    (nat.S
                                                                    m))
                                                                    (mod_aux
                                                                    q
                                                                    (nat.minus
                                                                    n
                                                                    (nat.S
                                                                    m))
                                                                    m)))))))))))))))))))))))
    p.

def div_mod :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0 => logic.eq nat.nat x (nat.plus (nat.times (div x x0) x0) (mod x x0)))))
  :=
  n:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  m:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  nat.match_nat_prop
    (__:(cts.Term
           cts.diamond
           (cts.cast
              cts.triangle
              cts.sinf
              (cts.univ cts.box cts.triangle cts.I)
              (cts.univ cts.diamond cts.sinf cts.I)
              cts.I
              nat.nat)) =>
     logic.eq nat.nat n (nat.plus (nat.times (div n __) __) (mod n __)))
    (nat.sym_eq_times
       (div n nat.O)
       (y:(cts.Term
             cts.diamond
             (cts.cast
                cts.triangle
                cts.sinf
                (cts.univ cts.box cts.triangle cts.I)
                (cts.univ cts.diamond cts.sinf cts.I)
                cts.I
                (cts.prod cts.box cts.box cts.box cts.I nat.nat (x => nat.nat)))) =>
        logic.eq nat.nat n (nat.plus (y nat.O) (mod n nat.O)))
       (nat.sym_eq_match_nat_type_O
          nat.nat
          (nat.S n)
          (p:(cts.Term
                cts.diamond
                (cts.cast
                   cts.triangle
                   cts.sinf
                   (cts.univ cts.box cts.triangle cts.I)
                   (cts.univ cts.diamond cts.sinf cts.I)
                   cts.I
                   nat.nat)) =>
           div_aux n n p)
          (y:(cts.Term
                cts.diamond
                (cts.cast
                   cts.triangle
                   cts.sinf
                   (cts.univ cts.box cts.triangle cts.I)
                   (cts.univ cts.diamond cts.sinf cts.I)
                   cts.I
                   nat.nat)) =>
           logic.eq
             nat.nat
             n
             (nat.plus
                (nat.filter_nat_type
                   (cts.prod cts.box cts.box cts.box cts.I nat.nat (x => nat.nat))
                   nat.times_body
                   y
                   nat.O)
                (nat.match_nat_type
                   nat.nat
                   n
                   (p:(cts.Term
                         cts.diamond
                         (cts.cast
                            cts.triangle
                            cts.sinf
                            (cts.univ cts.box cts.triangle cts.I)
                            (cts.univ cts.diamond cts.sinf cts.I)
                            cts.I
                            nat.nat)) =>
                    mod_aux n n p)
                   nat.O)))
          (nat.sym_eq_filter_nat_type_S
             (cts.prod cts.box cts.box cts.box cts.I nat.nat (x => nat.nat))
             nat.times_body
             n
             (y:(cts.Term
                   cts.diamond
                   (cts.cast
                      cts.triangle
                      cts.sinf
                      (cts.univ cts.box cts.triangle cts.I)
                      (cts.univ cts.diamond cts.sinf cts.I)
                      cts.I
                      (cts.prod cts.box cts.box cts.box cts.I nat.nat (x => nat.nat)))) =>
              logic.eq nat.nat n (nat.plus (y nat.O) (mod n nat.O)))
             (nat.sym_eq_times_body_S
                n
                (y:(cts.Term
                      cts.diamond
                      (cts.cast
                         cts.triangle
                         cts.sinf
                         (cts.univ cts.box cts.triangle cts.I)
                         (cts.univ cts.diamond cts.sinf cts.I)
                         cts.I
                         (cts.prod cts.box cts.box cts.box cts.I nat.nat (x => nat.nat)))) =>
                 logic.eq nat.nat n (nat.plus (y nat.O) (mod n nat.O)))
                (nat.sym_eq_match_nat_type_O
                   nat.nat
                   n
                   (p:(cts.Term
                         cts.diamond
                         (cts.cast
                            cts.triangle
                            cts.sinf
                            (cts.univ cts.box cts.triangle cts.I)
                            (cts.univ cts.diamond cts.sinf cts.I)
                            cts.I
                            nat.nat)) =>
                    mod_aux n n p)
                   (y:(cts.Term
                         cts.diamond
                         (cts.cast
                            cts.triangle
                            cts.sinf
                            (cts.univ cts.box cts.triangle cts.I)
                            (cts.univ cts.diamond cts.sinf cts.I)
                            cts.I
                            nat.nat)) =>
                    logic.eq nat.nat n (nat.plus (nat.plus nat.O (nat.times n nat.O)) y))
                   (nat.sym_eq_plus
                      nat.O
                      (y:(cts.Term
                            cts.diamond
                            (cts.cast
                               cts.triangle
                               cts.sinf
                               (cts.univ cts.box cts.triangle cts.I)
                               (cts.univ cts.diamond cts.sinf cts.I)
                               cts.I
                               (cts.prod
                                  cts.box
                                  cts.box
                                  cts.box
                                  cts.I
                                  nat.nat
                                  (x => nat.nat)))) =>
                       logic.eq nat.nat n (nat.plus (y (nat.times n nat.O)) n))
                      (nat.sym_eq_filter_nat_type_O
                         (cts.prod cts.box cts.box cts.box cts.I nat.nat (x => nat.nat))
                         nat.plus_body
                         (y:(cts.Term
                               cts.diamond
                               (cts.cast
                                  cts.triangle
                                  cts.sinf
                                  (cts.univ cts.box cts.triangle cts.I)
                                  (cts.univ cts.diamond cts.sinf cts.I)
                                  cts.I
                                  (cts.prod
                                     cts.box
                                     cts.box
                                     cts.box
                                     cts.I
                                     nat.nat
                                     (x => nat.nat)))) =>
                          logic.eq nat.nat n (nat.plus (y (nat.times n nat.O)) n))
                         (nat.sym_eq_plus_body_O
                            (y:(cts.Term
                                  cts.diamond
                                  (cts.cast
                                     cts.triangle
                                     cts.sinf
                                     (cts.univ cts.box cts.triangle cts.I)
                                     (cts.univ cts.diamond cts.sinf cts.I)
                                     cts.I
                                     (cts.prod
                                        cts.box
                                        cts.box
                                        cts.box
                                        cts.I
                                        nat.nat
                                        (x => nat.nat)))) =>
                             logic.eq nat.nat n (nat.plus (y (nat.times n nat.O)) n))
                            (logic.rewrite_l
                               nat.nat
                               nat.O
                               (__:(cts.Term
                                      cts.diamond
                                      (cts.cast
                                         cts.triangle
                                         cts.sinf
                                         (cts.univ cts.box cts.triangle cts.I)
                                         (cts.univ cts.diamond cts.sinf cts.I)
                                         cts.I
                                         nat.nat)) =>
                                logic.eq nat.nat n (nat.plus __ n))
                               (logic.rewrite_r
                                  nat.nat
                                  (nat.plus n nat.O)
                                  (__:(cts.Term
                                         cts.diamond
                                         (cts.cast
                                            cts.triangle
                                            cts.sinf
                                            (cts.univ cts.box cts.triangle cts.I)
                                            (cts.univ cts.diamond cts.sinf cts.I)
                                            cts.I
                                            nat.nat)) =>
                                   logic.eq nat.nat n __)
                                  (logic.rewrite_l
                                     nat.nat
                                     n
                                     (__:(cts.Term
                                            cts.diamond
                                            (cts.cast
                                               cts.triangle
                                               cts.sinf
                                               (cts.univ cts.box cts.triangle cts.I)
                                               (cts.univ cts.diamond cts.sinf cts.I)
                                               cts.I
                                               nat.nat)) =>
                                      logic.eq nat.nat n __)
                                     (logic.refl nat.nat n)
                                     (nat.plus n nat.O)
                                     (nat.plus_n_O n))
                                  (nat.plus nat.O n)
                                  (nat.commutative_plus nat.O n))
                               (nat.times n nat.O)
                               (nat.times_n_O n))))))))))
    (auto:(cts.Term
             cts.diamond
             (cts.cast
                cts.triangle
                cts.sinf
                (cts.univ cts.box cts.triangle cts.I)
                (cts.univ cts.diamond cts.sinf cts.I)
                cts.I
                nat.nat)) =>
     nat.sym_eq_match_nat_type_S
       nat.nat
       (nat.S n)
       (p:(cts.Term
             cts.diamond
             (cts.cast
                cts.triangle
                cts.sinf
                (cts.univ cts.box cts.triangle cts.I)
                (cts.univ cts.diamond cts.sinf cts.I)
                cts.I
                nat.nat)) =>
        div_aux n n p)
       auto
       (y:(cts.Term
             cts.diamond
             (cts.cast
                cts.triangle
                cts.sinf
                (cts.univ cts.box cts.triangle cts.I)
                (cts.univ cts.diamond cts.sinf cts.I)
                cts.I
                nat.nat)) =>
        logic.eq
          nat.nat
          n
          (nat.plus
             (nat.times y (nat.S auto))
             (nat.match_nat_type
                nat.nat
                n
                (p:(cts.Term
                      cts.diamond
                      (cts.cast
                         cts.triangle
                         cts.sinf
                         (cts.univ cts.box cts.triangle cts.I)
                         (cts.univ cts.diamond cts.sinf cts.I)
                         cts.I
                         nat.nat)) =>
                 mod_aux n n p)
                (nat.S auto))))
       (nat.sym_eq_match_nat_type_S
          nat.nat
          n
          (p:(cts.Term
                cts.diamond
                (cts.cast
                   cts.triangle
                   cts.sinf
                   (cts.univ cts.box cts.triangle cts.I)
                   (cts.univ cts.diamond cts.sinf cts.I)
                   cts.I
                   nat.nat)) =>
           mod_aux n n p)
          auto
          (y:(cts.Term
                cts.diamond
                (cts.cast
                   cts.triangle
                   cts.sinf
                   (cts.univ cts.box cts.triangle cts.I)
                   (cts.univ cts.diamond cts.sinf cts.I)
                   cts.I
                   nat.nat)) =>
           logic.eq nat.nat n (nat.plus (nat.times (div_aux n n auto) (nat.S auto)) y))
          (logic.rewrite_r
             nat.nat
             (nat.plus (nat.times (div_aux n n auto) (nat.S auto)) (mod_aux n n auto))
             (__:(cts.Term
                    cts.diamond
                    (cts.cast
                       cts.triangle
                       cts.sinf
                       (cts.univ cts.box cts.triangle cts.I)
                       (cts.univ cts.diamond cts.sinf cts.I)
                       cts.I
                       nat.nat)) =>
              logic.eq
                nat.nat
                __
                (nat.plus (nat.times (div_aux n n auto) (nat.S auto)) (mod_aux n n auto)))
             (logic.refl
                nat.nat
                (nat.plus (nat.times (div_aux n n auto) (nat.S auto)) (mod_aux n n auto)))
             n
             (div_aux_mod_aux n n auto))))
    m.

def eq_times_div_minus_mod :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0 => logic.eq nat.nat (nat.times (div x x0) x0) (nat.minus x (mod x x0)))))
  :=
  a:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  b:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  logic.eq_coerc
    (logic.eq
       nat.nat
       (nat.times b (div a b))
       (nat.minus (nat.plus (nat.times b (div a b)) (mod a b)) (mod a b)))
    (logic.eq nat.nat (nat.times (div a b) b) (nat.minus a (mod a b)))
    (nat.minus_plus_m_m (nat.times b (div a b)) (mod a b))
    (logic.rewrite_r
       nat.nat
       (nat.plus (mod a b) (nat.times b (div a b)))
       (__:(cts.Term
              cts.diamond
              (cts.cast
                 cts.triangle
                 cts.sinf
                 (cts.univ cts.box cts.triangle cts.I)
                 (cts.univ cts.diamond cts.sinf cts.I)
                 cts.I
                 nat.nat)) =>
        logic.eq
          (cts.univ cts.star cts.box cts.I)
          (logic.eq nat.nat (nat.times b (div a b)) (nat.minus __ (mod a b)))
          (logic.eq nat.nat (nat.times (div a b) b) (nat.minus a (mod a b))))
       (logic.rewrite_r
          nat.nat
          (nat.times b (div a b))
          (__:(cts.Term
                 cts.diamond
                 (cts.cast
                    cts.triangle
                    cts.sinf
                    (cts.univ cts.box cts.triangle cts.I)
                    (cts.univ cts.diamond cts.sinf cts.I)
                    cts.I
                    nat.nat)) =>
           logic.eq
             (cts.univ cts.star cts.box cts.I)
             (logic.eq
                nat.nat
                (nat.times b (div a b))
                (nat.minus (nat.plus (mod a b) (nat.times b (div a b))) (mod a b)))
             (logic.eq nat.nat __ (nat.minus a (mod a b))))
          (logic.rewrite_l
             nat.nat
             a
             (__:(cts.Term
                    cts.diamond
                    (cts.cast
                       cts.triangle
                       cts.sinf
                       (cts.univ cts.box cts.triangle cts.I)
                       (cts.univ cts.diamond cts.sinf cts.I)
                       cts.I
                       nat.nat)) =>
              logic.eq
                (cts.univ cts.star cts.box cts.I)
                (logic.eq nat.nat (nat.times b (div a b)) (nat.minus __ (mod a b)))
                (logic.eq nat.nat (nat.times b (div a b)) (nat.minus a (mod a b))))
             (logic.refl
                (cts.univ cts.star cts.box cts.I)
                (logic.eq nat.nat (nat.times b (div a b)) (nat.minus a (mod a b))))
             (nat.plus (mod a b) (nat.times b (div a b)))
             (logic.rewrite_l
                nat.nat
                (nat.plus (nat.times b (div a b)) (mod a b))
                (__:(cts.Term
                       cts.diamond
                       (cts.cast
                          cts.triangle
                          cts.sinf
                          (cts.univ cts.box cts.triangle cts.I)
                          (cts.univ cts.diamond cts.sinf cts.I)
                          cts.I
                          nat.nat)) =>
                 logic.eq nat.nat a __)
                (logic.rewrite_l
                   nat.nat
                   (nat.times (div a b) b)
                   (__:(cts.Term
                          cts.diamond
                          (cts.cast
                             cts.triangle
                             cts.sinf
                             (cts.univ cts.box cts.triangle cts.I)
                             (cts.univ cts.diamond cts.sinf cts.I)
                             cts.I
                             nat.nat)) =>
                    logic.eq nat.nat a (nat.plus __ (mod a b)))
                   (div_mod a b)
                   (nat.times b (div a b))
                   (nat.commutative_times (div a b) b))
                (nat.plus (mod a b) (nat.times b (div a b)))
                (nat.commutative_plus (nat.times b (div a b)) (mod a b))))
          (nat.times (div a b) b)
          (nat.commutative_times (div a b) b))
       (nat.plus (nat.times b (div a b)) (mod a b))
       (nat.commutative_plus (nat.times b (div a b)) (mod a b))).

div_mod_spec :
  cts.Term
    cts.diamond
    (cts.cast
       cts.triangle
       cts.sinf
       (cts.univ cts.box cts.triangle cts.I)
       (cts.univ cts.diamond cts.sinf cts.I)
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x =>
           cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0 =>
              cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x1 =>
                 cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x2 => cts.univ cts.star cts.box cts.I)))))).

div_mod_spec_intro :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1 =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x2 =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (nat.lt x2 x0)
                   (x3 =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (logic.eq nat.nat x (nat.plus (nat.times x1 x0) x2))
                      (x4 => div_mod_spec x x0 x1 x2))))))).

match_div_mod_spec_prop :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1 =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x2 =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   (cts.univ cts.star cts.box cts.I)
                   (x3 =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (nat.lt x2 x0)
                         (x4 =>
                          cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (logic.eq nat.nat x (nat.plus (nat.times x1 x0) x2))
                            (x5 => x3)))
                      (x4 =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (div_mod_spec x x0 x1 x2)
                         (x5 => x3)))))))).

def div_mod_spec_div_mod :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (nat.lt nat.O x0)
             (x1 => div_mod_spec x x0 (div x x0) (mod x x0)))))
  :=
  n:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  m:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  posm:(cts.Term cts.star (nat.lt nat.O m)) =>
  div_mod_spec_intro
    n
    m
    (div n m)
    (mod n m)
    (lt_mod_m_m n m posm)
    (logic.rewrite_r
       nat.nat
       (nat.times m (div n m))
       (__:(cts.Term
              cts.diamond
              (cts.cast
                 cts.triangle
                 cts.sinf
                 (cts.univ cts.box cts.triangle cts.I)
                 (cts.univ cts.diamond cts.sinf cts.I)
                 cts.I
                 nat.nat)) =>
        logic.eq nat.nat n (nat.plus __ (mod n m)))
       (logic.rewrite_r
          nat.nat
          (nat.plus (mod n m) (nat.times m (div n m)))
          (__:(cts.Term
                 cts.diamond
                 (cts.cast
                    cts.triangle
                    cts.sinf
                    (cts.univ cts.box cts.triangle cts.I)
                    (cts.univ cts.diamond cts.sinf cts.I)
                    cts.I
                    nat.nat)) =>
           logic.eq nat.nat n __)
          (logic.rewrite_l
             nat.nat
             n
             (__:(cts.Term
                    cts.diamond
                    (cts.cast
                       cts.triangle
                       cts.sinf
                       (cts.univ cts.box cts.triangle cts.I)
                       (cts.univ cts.diamond cts.sinf cts.I)
                       cts.I
                       nat.nat)) =>
              logic.eq nat.nat n __)
             (logic.refl nat.nat n)
             (nat.plus (mod n m) (nat.times m (div n m)))
             (logic.rewrite_l
                nat.nat
                (nat.plus (nat.times m (div n m)) (mod n m))
                (__:(cts.Term
                       cts.diamond
                       (cts.cast
                          cts.triangle
                          cts.sinf
                          (cts.univ cts.box cts.triangle cts.I)
                          (cts.univ cts.diamond cts.sinf cts.I)
                          cts.I
                          nat.nat)) =>
                 logic.eq nat.nat n __)
                (logic.rewrite_l
                   nat.nat
                   (nat.times (div n m) m)
                   (__:(cts.Term
                          cts.diamond
                          (cts.cast
                             cts.triangle
                             cts.sinf
                             (cts.univ cts.box cts.triangle cts.I)
                             (cts.univ cts.diamond cts.sinf cts.I)
                             cts.I
                             nat.nat)) =>
                    logic.eq nat.nat n (nat.plus __ (mod n m)))
                   (div_mod n m)
                   (nat.times m (div n m))
                   (nat.commutative_times (div n m) m))
                (nat.plus (mod n m) (nat.times m (div n m)))
                (nat.commutative_plus (nat.times m (div n m)) (mod n m))))
          (nat.plus (nat.times m (div n m)) (mod n m))
          (nat.commutative_plus (nat.times m (div n m)) (mod n m)))
       (nat.times (div n m) m)
       (nat.commutative_times (div n m) m)).

def let_clause_1078 :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1 =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x2 =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x3 =>
                    cts.prod
                      cts.box
                      cts.star
                      cts.star
                      cts.I
                      nat.nat
                      (x4 =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (div_mod_spec x x0 x1 x2)
                         (x5 =>
                          cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (nat.lt x2 x0)
                            (x6 =>
                             cts.prod
                               cts.star
                               cts.star
                               cts.star
                               cts.I
                               (logic.eq nat.nat x (nat.plus (nat.times x1 x0) x2))
                               (x7 =>
                                cts.prod
                                  cts.star
                                  cts.star
                                  cts.star
                                  cts.I
                                  (div_mod_spec x x0 x3 x4)
                                  (x8 =>
                                   cts.prod
                                     cts.star
                                     cts.star
                                     cts.star
                                     cts.I
                                     (nat.lt x4 x0)
                                     (x9 =>
                                      cts.prod
                                        cts.star
                                        cts.star
                                        cts.star
                                        cts.I
                                        (logic.eq
                                           nat.nat
                                           x
                                           (nat.plus (nat.times x3 x0) x4))
                                        (x10 =>
                                         cts.prod
                                           cts.star
                                           cts.star
                                           cts.star
                                           cts.I
                                           (nat.le x1 x3)
                                           (x11 =>
                                            cts.prod
                                              cts.star
                                              cts.star
                                              cts.star
                                              cts.I
                                              (nat.lt x1 x3)
                                              (x12 =>
                                               logic.eq
                                                 nat.nat
                                                 x
                                                 (nat.plus x2 (nat.times x0 x1)))))))))))))))))
  :=
  a:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  b:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  q:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  r:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  q1:(cts.Term
        cts.diamond
        (cts.cast
           cts.triangle
           cts.sinf
           (cts.univ cts.box cts.triangle cts.I)
           (cts.univ cts.diamond cts.sinf cts.I)
           cts.I
           nat.nat)) =>
  r1:(cts.Term
        cts.diamond
        (cts.cast
           cts.triangle
           cts.sinf
           (cts.univ cts.box cts.triangle cts.I)
           (cts.univ cts.diamond cts.sinf cts.I)
           cts.I
           nat.nat)) =>
  _clearme:(cts.Term cts.star (div_mod_spec a b q r)) =>
  ltrb:(cts.Term cts.star (nat.lt r b)) =>
  spec:(cts.Term cts.star (logic.eq nat.nat a (nat.plus (nat.times q b) r))) =>
  _clearme0:(cts.Term cts.star (div_mod_spec a b q1 r1)) =>
  ltr1b:(cts.Term cts.star (nat.lt r1 b)) =>
  spec1:(cts.Term cts.star (logic.eq nat.nat a (nat.plus (nat.times q1 b) r1))) =>
  leqq1:(cts.Term cts.star (nat.le q q1)) =>
  ltqq1:(cts.Term cts.star (nat.lt q q1)) =>
  logic.rewrite_l
    nat.nat
    (nat.plus (nat.times b q) r)
    (__:(cts.Term
           cts.diamond
           (cts.cast
              cts.triangle
              cts.sinf
              (cts.univ cts.box cts.triangle cts.I)
              (cts.univ cts.diamond cts.sinf cts.I)
              cts.I
              nat.nat)) =>
     logic.eq nat.nat a __)
    (logic.rewrite_l
       nat.nat
       (nat.times q b)
       (__:(cts.Term
              cts.diamond
              (cts.cast
                 cts.triangle
                 cts.sinf
                 (cts.univ cts.box cts.triangle cts.I)
                 (cts.univ cts.diamond cts.sinf cts.I)
                 cts.I
                 nat.nat)) =>
        logic.eq nat.nat a (nat.plus __ r))
       spec
       (nat.times b q)
       (nat.commutative_times q b))
    (nat.plus r (nat.times b q))
    (nat.commutative_plus (nat.times b q) r).

def let_clause_1062 :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1 =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x2 =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x3 =>
                    cts.prod
                      cts.box
                      cts.star
                      cts.star
                      cts.I
                      nat.nat
                      (x4 =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (div_mod_spec x x0 x1 x2)
                         (x5 =>
                          cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (nat.lt x2 x0)
                            (x6 =>
                             cts.prod
                               cts.star
                               cts.star
                               cts.star
                               cts.I
                               (logic.eq nat.nat x (nat.plus (nat.times x1 x0) x2))
                               (x7 =>
                                cts.prod
                                  cts.star
                                  cts.star
                                  cts.star
                                  cts.I
                                  (div_mod_spec x x0 x3 x4)
                                  (x8 =>
                                   cts.prod
                                     cts.star
                                     cts.star
                                     cts.star
                                     cts.I
                                     (nat.lt x4 x0)
                                     (x9 =>
                                      cts.prod
                                        cts.star
                                        cts.star
                                        cts.star
                                        cts.I
                                        (logic.eq
                                           nat.nat
                                           x
                                           (nat.plus (nat.times x3 x0) x4))
                                        (x10 =>
                                         cts.prod
                                           cts.star
                                           cts.star
                                           cts.star
                                           cts.I
                                           (connectives.Not (nat.le x1 x3))
                                           (x11 =>
                                            logic.eq
                                              nat.nat
                                              x
                                              (nat.plus x4 (nat.times x0 x3))))))))))))))))
  :=
  a:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  b:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  q:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  r:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  q1:(cts.Term
        cts.diamond
        (cts.cast
           cts.triangle
           cts.sinf
           (cts.univ cts.box cts.triangle cts.I)
           (cts.univ cts.diamond cts.sinf cts.I)
           cts.I
           nat.nat)) =>
  r1:(cts.Term
        cts.diamond
        (cts.cast
           cts.triangle
           cts.sinf
           (cts.univ cts.box cts.triangle cts.I)
           (cts.univ cts.diamond cts.sinf cts.I)
           cts.I
           nat.nat)) =>
  _clearme:(cts.Term cts.star (div_mod_spec a b q r)) =>
  ltrb:(cts.Term cts.star (nat.lt r b)) =>
  spec:(cts.Term cts.star (logic.eq nat.nat a (nat.plus (nat.times q b) r))) =>
  _clearme0:(cts.Term cts.star (div_mod_spec a b q1 r1)) =>
  ltr1b:(cts.Term cts.star (nat.lt r1 b)) =>
  spec1:(cts.Term cts.star (logic.eq nat.nat a (nat.plus (nat.times q1 b) r1))) =>
  leqq1:(cts.Term cts.star (connectives.Not (nat.le q q1))) =>
  logic.rewrite_l
    nat.nat
    (nat.plus (nat.times b q1) r1)
    (__:(cts.Term
           cts.diamond
           (cts.cast
              cts.triangle
              cts.sinf
              (cts.univ cts.box cts.triangle cts.I)
              (cts.univ cts.diamond cts.sinf cts.I)
              cts.I
              nat.nat)) =>
     logic.eq nat.nat a __)
    (logic.rewrite_l
       nat.nat
       (nat.times q1 b)
       (__:(cts.Term
              cts.diamond
              (cts.cast
                 cts.triangle
                 cts.sinf
                 (cts.univ cts.box cts.triangle cts.I)
                 (cts.univ cts.diamond cts.sinf cts.I)
                 cts.I
                 nat.nat)) =>
        logic.eq nat.nat a (nat.plus __ r1))
       spec1
       (nat.times b q1)
       (nat.commutative_times q1 b))
    (nat.plus r1 (nat.times b q1))
    (nat.commutative_plus (nat.times b q1) r1).

def div_mod_spec_to_eq :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1 =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x2 =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x3 =>
                    cts.prod
                      cts.box
                      cts.star
                      cts.star
                      cts.I
                      nat.nat
                      (x4 =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (div_mod_spec x x0 x1 x2)
                         (x5 =>
                          cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (div_mod_spec x x0 x3 x4)
                            (x6 => logic.eq nat.nat x1 x3)))))))))
  :=
  a:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  b:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  q:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  r:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  q1:(cts.Term
        cts.diamond
        (cts.cast
           cts.triangle
           cts.sinf
           (cts.univ cts.box cts.triangle cts.I)
           (cts.univ cts.diamond cts.sinf cts.I)
           cts.I
           nat.nat)) =>
  r1:(cts.Term
        cts.diamond
        (cts.cast
           cts.triangle
           cts.sinf
           (cts.univ cts.box cts.triangle cts.I)
           (cts.univ cts.diamond cts.sinf cts.I)
           cts.I
           nat.nat)) =>
  _clearme:(cts.Term cts.star (div_mod_spec a b q r)) =>
  match_div_mod_spec_prop
    a
    b
    q
    r
    (cts.prod cts.star cts.star cts.star cts.I (div_mod_spec a b q1 r1) (x => logic.eq nat.nat q q1))
    (ltrb:(cts.Term cts.star (nat.lt r b)) =>
     spec:(cts.Term cts.star (logic.eq nat.nat a (nat.plus (nat.times q b) r))) =>
     _clearme0:(cts.Term cts.star (div_mod_spec a b q1 r1)) =>
     match_div_mod_spec_prop
       a
       b
       q1
       r1
       (logic.eq nat.nat q q1)
       (ltr1b:(cts.Term cts.star (nat.lt r1 b)) =>
        spec1:(cts.Term cts.star (logic.eq nat.nat a (nat.plus (nat.times q1 b) r1))) =>
        nat.leb_elim
          q
          q1
          (__:(cts.Term
                 cts.diamond
                 (cts.cast
                    cts.triangle
                    cts.sinf
                    (cts.univ cts.box cts.triangle cts.I)
                    (cts.univ cts.diamond cts.sinf cts.I)
                    cts.I
                    bool.bool)) =>
           logic.eq nat.nat q q1)
          (leqq1:(cts.Term cts.star (nat.le q q1)) =>
           connectives.match_Or_prop
             (nat.lt q q1)
             (logic.eq nat.nat q q1)
             (logic.eq nat.nat q q1)
             (ltqq1:(cts.Term cts.star (nat.lt q q1)) =>
              connectives.falsity
                (logic.eq nat.nat q q1)
                (logic.absurd
                   (nat.le (nat.S a) a)
                   (nat.lt_to_le_to_lt
                      a
                      (nat.times (nat.S q) b)
                      a
                      (logic.eq_ind_r
                         nat.nat
                         (nat.plus (nat.times q b) r)
                         (x:(cts.Term
                               cts.diamond
                               (cts.cast
                                  cts.triangle
                                  cts.sinf
                                  (cts.univ cts.box cts.triangle cts.I)
                                  (cts.univ cts.diamond cts.sinf cts.I)
                                  cts.I
                                  nat.nat)) =>
                          nat.lt x (nat.times (nat.S q) b))
                         (logic.eq_coerc
                            (nat.lt (nat.plus (nat.times q b) r) (nat.plus (nat.times q b) b))
                            (nat.lt (nat.plus (nat.times q b) r) (nat.times (nat.S q) b))
                            (nat.monotonic_lt_plus_r (nat.times q b) r b ltrb)
                            (logic.rewrite_r
                               nat.nat
                               (nat.times b q)
                               (__:(cts.Term
                                      cts.diamond
                                      (cts.cast
                                         cts.triangle
                                         cts.sinf
                                         (cts.univ cts.box cts.triangle cts.I)
                                         (cts.univ cts.diamond cts.sinf cts.I)
                                         cts.I
                                         nat.nat)) =>
                                logic.eq
                                  (cts.univ cts.star cts.box cts.I)
                                  (nat.lt (nat.plus __ r) (nat.plus __ b))
                                  (nat.lt (nat.plus __ r) (nat.times (nat.S q) b)))
                               (logic.rewrite_r
                                  nat.nat
                                  (nat.plus r (nat.times b q))
                                  (__:(cts.Term
                                         cts.diamond
                                         (cts.cast
                                            cts.triangle
                                            cts.sinf
                                            (cts.univ cts.box cts.triangle cts.I)
                                            (cts.univ cts.diamond cts.sinf cts.I)
                                            cts.I
                                            nat.nat)) =>
                                   logic.eq
                                     (cts.univ cts.star cts.box cts.I)
                                     (nat.lt
                                        (nat.plus (nat.times b q) r)
                                        (nat.plus (nat.times b q) b))
                                     (nat.lt __ (nat.times (nat.S q) b)))
                                  (logic.rewrite_l
                                     nat.nat
                                     a
                                     (__:(cts.Term
                                            cts.diamond
                                            (cts.cast
                                               cts.triangle
                                               cts.sinf
                                               (cts.univ cts.box cts.triangle cts.I)
                                               (cts.univ cts.diamond cts.sinf cts.I)
                                               cts.I
                                               nat.nat)) =>
                                      logic.eq
                                        (cts.univ cts.star cts.box cts.I)
                                        (nat.lt
                                           (nat.plus (nat.times b q) r)
                                           (nat.plus (nat.times b q) b))
                                        (nat.lt __ (nat.times (nat.S q) b)))
                                     (logic.rewrite_r
                                        nat.nat
                                        (nat.times b (nat.S q))
                                        (__:(cts.Term
                                               cts.diamond
                                               (cts.cast
                                                  cts.triangle
                                                  cts.sinf
                                                  (cts.univ
                                                     cts.box
                                                     cts.triangle
                                                     cts.I)
                                                  (cts.univ
                                                     cts.diamond
                                                     cts.sinf
                                                     cts.I)
                                                  cts.I
                                                  nat.nat)) =>
                                         logic.eq
                                           (cts.univ cts.star cts.box cts.I)
                                           (nat.lt
                                              (nat.plus (nat.times b q) r)
                                              (nat.plus (nat.times b q) b))
                                           (nat.lt a __))
                                        (logic.rewrite_l
                                           nat.nat
                                           (nat.plus b (nat.times b q))
                                           (__:(cts.Term
                                                  cts.diamond
                                                  (cts.cast
                                                     cts.triangle
                                                     cts.sinf
                                                     (cts.univ
                                                        cts.box
                                                        cts.triangle
                                                        cts.I)
                                                     (cts.univ
                                                        cts.diamond
                                                        cts.sinf
                                                        cts.I)
                                                     cts.I
                                                     nat.nat)) =>
                                            logic.eq
                                              (cts.univ cts.star cts.box cts.I)
                                              (nat.lt
                                                 (nat.plus (nat.times b q) r)
                                                 (nat.plus (nat.times b q) b))
                                              (nat.lt a __))
                                           (logic.rewrite_r
                                              nat.nat
                                              (nat.plus r (nat.times b q))
                                              (__:(cts.Term
                                                     cts.diamond
                                                     (cts.cast
                                                        cts.triangle
                                                        cts.sinf
                                                        (cts.univ
                                                           cts.box
                                                           cts.triangle
                                                           cts.I)
                                                        (cts.univ
                                                           cts.diamond
                                                           cts.sinf
                                                           cts.I)
                                                        cts.I
                                                        nat.nat)) =>
                                               logic.eq
                                                 (cts.univ cts.star cts.box cts.I)
                                                 (nat.lt
                                                    __
                                                    (nat.plus (nat.times b q) b))
                                                 (nat.lt
                                                    a
                                                    (nat.plus b (nat.times b q))))
                                              (logic.rewrite_l
                                                 nat.nat
                                                 a
                                                 (__:(cts.Term
                                                        cts.diamond
                                                        (cts.cast
                                                           cts.triangle
                                                           cts.sinf
                                                           (cts.univ
                                                              cts.box
                                                              cts.triangle
                                                              cts.I)
                                                           (cts.univ
                                                              cts.diamond
                                                              cts.sinf
                                                              cts.I)
                                                           cts.I
                                                           nat.nat)) =>
                                                  logic.eq
                                                    (cts.univ cts.star cts.box cts.I)
                                                    (nat.lt
                                                       __
                                                       (nat.plus (nat.times b q) b))
                                                    (nat.lt
                                                       a
                                                       (nat.plus b (nat.times b q))))
                                                 (logic.rewrite_r
                                                    nat.nat
                                                    (nat.plus b (nat.times b q))
                                                    (__:(cts.Term
                                                           cts.diamond
                                                           (cts.cast
                                                              cts.triangle
                                                              cts.sinf
                                                              (cts.univ
                                                                 cts.box
                                                                 cts.triangle
                                                                 cts.I)
                                                              (cts.univ
                                                                 cts.diamond
                                                                 cts.sinf
                                                                 cts.I)
                                                              cts.I
                                                              nat.nat)) =>
                                                     logic.eq
                                                       (cts.univ
                                                          cts.star
                                                          cts.box
                                                          cts.I)
                                                       (nat.lt a __)
                                                       (nat.lt
                                                          a
                                                          (nat.plus
                                                             b
                                                             (nat.times b q))))
                                                    (logic.refl
                                                       (cts.univ
                                                          cts.star
                                                          cts.box
                                                          cts.I)
                                                       (nat.lt
                                                          a
                                                          (nat.plus
                                                             b
                                                             (nat.times b q))))
                                                    (nat.plus (nat.times b q) b)
                                                    (nat.commutative_plus
                                                       (nat.times b q)
                                                       b))
                                                 (nat.plus r (nat.times b q))
                                                 (let_clause_1078
                                                    a
                                                    b
                                                    q
                                                    r
                                                    q1
                                                    r1
                                                    _clearme
                                                    ltrb
                                                    spec
                                                    _clearme0
                                                    ltr1b
                                                    spec1
                                                    leqq1
                                                    ltqq1))
                                              (nat.plus (nat.times b q) r)
                                              (nat.commutative_plus (nat.times b q) r))
                                           (nat.times b (nat.S q))
                                           (nat.times_n_Sm b q))
                                        (nat.times (nat.S q) b)
                                        (nat.commutative_times (nat.S q) b))
                                     (nat.plus r (nat.times b q))
                                     (let_clause_1078
                                        a
                                        b
                                        q
                                        r
                                        q1
                                        r1
                                        _clearme
                                        ltrb
                                        spec
                                        _clearme0
                                        ltr1b
                                        spec1
                                        leqq1
                                        ltqq1))
                                  (nat.plus (nat.times b q) r)
                                  (nat.commutative_plus (nat.times b q) r))
                               (nat.times q b)
                               (nat.commutative_times q b)))
                         a
                         spec)
                      (nat.transitive_le
                         (nat.times (nat.S q) b)
                         (nat.times q1 b)
                         a
                         (logic.eq_coerc
                            (nat.le (nat.times b (nat.S q)) (nat.times b q1))
                            (nat.le (nat.times (nat.S q) b) (nat.times q1 b))
                            (nat.monotonic_le_times_r b (nat.S q) q1 ltqq1)
                            (logic.rewrite_r
                               nat.nat
                               (nat.times b (nat.S q))
                               (__:(cts.Term
                                      cts.diamond
                                      (cts.cast
                                         cts.triangle
                                         cts.sinf
                                         (cts.univ cts.box cts.triangle cts.I)
                                         (cts.univ cts.diamond cts.sinf cts.I)
                                         cts.I
                                         nat.nat)) =>
                                logic.eq
                                  (cts.univ cts.star cts.box cts.I)
                                  (nat.le (nat.times b (nat.S q)) (nat.times b q1))
                                  (nat.le __ (nat.times q1 b)))
                               (logic.rewrite_l
                                  nat.nat
                                  (nat.plus b (nat.times b q))
                                  (__:(cts.Term
                                         cts.diamond
                                         (cts.cast
                                            cts.triangle
                                            cts.sinf
                                            (cts.univ cts.box cts.triangle cts.I)
                                            (cts.univ cts.diamond cts.sinf cts.I)
                                            cts.I
                                            nat.nat)) =>
                                   logic.eq
                                     (cts.univ cts.star cts.box cts.I)
                                     (nat.le (nat.times b (nat.S q)) (nat.times b q1))
                                     (nat.le __ (nat.times q1 b)))
                                  (logic.rewrite_r
                                     nat.nat
                                     (nat.times b q1)
                                     (__:(cts.Term
                                            cts.diamond
                                            (cts.cast
                                               cts.triangle
                                               cts.sinf
                                               (cts.univ cts.box cts.triangle cts.I)
                                               (cts.univ cts.diamond cts.sinf cts.I)
                                               cts.I
                                               nat.nat)) =>
                                      logic.eq
                                        (cts.univ cts.star cts.box cts.I)
                                        (nat.le (nat.times b (nat.S q)) (nat.times b q1))
                                        (nat.le (nat.plus b (nat.times b q)) __))
                                     (logic.rewrite_l
                                        nat.nat
                                        (nat.plus b (nat.times b q))
                                        (__:(cts.Term
                                               cts.diamond
                                               (cts.cast
                                                  cts.triangle
                                                  cts.sinf
                                                  (cts.univ
                                                     cts.box
                                                     cts.triangle
                                                     cts.I)
                                                  (cts.univ
                                                     cts.diamond
                                                     cts.sinf
                                                     cts.I)
                                                  cts.I
                                                  nat.nat)) =>
                                         logic.eq
                                           (cts.univ cts.star cts.box cts.I)
                                           (nat.le __ (nat.times b q1))
                                           (nat.le
                                              (nat.plus b (nat.times b q))
                                              (nat.times b q1)))
                                        (logic.refl
                                           (cts.univ cts.star cts.box cts.I)
                                           (nat.le
                                              (nat.plus b (nat.times b q))
                                              (nat.times b q1)))
                                        (nat.times b (nat.S q))
                                        (nat.times_n_Sm b q))
                                     (nat.times q1 b)
                                     (nat.commutative_times q1 b))
                                  (nat.times b (nat.S q))
                                  (nat.times_n_Sm b q))
                               (nat.times (nat.S q) b)
                               (nat.commutative_times (nat.S q) b)))
                         (logic.eq_coerc
                            (nat.le (nat.times q1 b) (nat.plus (nat.times q1 b) r1))
                            (nat.le (nat.times q1 b) a)
                            (nat.le_plus_n_r r1 (nat.times q1 b))
                            (logic.rewrite_r
                               nat.nat
                               (nat.times b q1)
                               (__:(cts.Term
                                      cts.diamond
                                      (cts.cast
                                         cts.triangle
                                         cts.sinf
                                         (cts.univ cts.box cts.triangle cts.I)
                                         (cts.univ cts.diamond cts.sinf cts.I)
                                         cts.I
                                         nat.nat)) =>
                                logic.eq
                                  (cts.univ cts.star cts.box cts.I)
                                  (nat.le __ (nat.plus __ r1))
                                  (nat.le __ a))
                               (logic.rewrite_r
                                  nat.nat
                                  (nat.plus r1 (nat.times b q1))
                                  (__:(cts.Term
                                         cts.diamond
                                         (cts.cast
                                            cts.triangle
                                            cts.sinf
                                            (cts.univ cts.box cts.triangle cts.I)
                                            (cts.univ cts.diamond cts.sinf cts.I)
                                            cts.I
                                            nat.nat)) =>
                                   logic.eq
                                     (cts.univ cts.star cts.box cts.I)
                                     (nat.le (nat.times b q1) __)
                                     (nat.le (nat.times b q1) a))
                                  (logic.rewrite_l
                                     nat.nat
                                     a
                                     (__:(cts.Term
                                            cts.diamond
                                            (cts.cast
                                               cts.triangle
                                               cts.sinf
                                               (cts.univ cts.box cts.triangle cts.I)
                                               (cts.univ cts.diamond cts.sinf cts.I)
                                               cts.I
                                               nat.nat)) =>
                                      logic.eq
                                        (cts.univ cts.star cts.box cts.I)
                                        (nat.le (nat.times b q1) __)
                                        (nat.le (nat.times b q1) a))
                                     (logic.refl
                                        (cts.univ cts.star cts.box cts.I)
                                        (nat.le (nat.times b q1) a))
                                     (nat.plus r1 (nat.times b q1))
                                     (logic.rewrite_l
                                        nat.nat
                                        (nat.plus (nat.times b q1) r1)
                                        (__:(cts.Term
                                               cts.diamond
                                               (cts.cast
                                                  cts.triangle
                                                  cts.sinf
                                                  (cts.univ
                                                     cts.box
                                                     cts.triangle
                                                     cts.I)
                                                  (cts.univ
                                                     cts.diamond
                                                     cts.sinf
                                                     cts.I)
                                                  cts.I
                                                  nat.nat)) =>
                                         logic.eq nat.nat a __)
                                        (logic.rewrite_l
                                           nat.nat
                                           (nat.times q1 b)
                                           (__:(cts.Term
                                                  cts.diamond
                                                  (cts.cast
                                                     cts.triangle
                                                     cts.sinf
                                                     (cts.univ
                                                        cts.box
                                                        cts.triangle
                                                        cts.I)
                                                     (cts.univ
                                                        cts.diamond
                                                        cts.sinf
                                                        cts.I)
                                                     cts.I
                                                     nat.nat)) =>
                                            logic.eq nat.nat a (nat.plus __ r1))
                                           spec1
                                           (nat.times b q1)
                                           (nat.commutative_times q1 b))
                                        (nat.plus r1 (nat.times b q1))
                                        (nat.commutative_plus (nat.times b q1) r1)))
                                  (nat.plus (nat.times b q1) r1)
                                  (nat.commutative_plus (nat.times b q1) r1))
                               (nat.times q1 b)
                               (nat.commutative_times q1 b)))))
                   (nat.not_le_Sn_n a)))
             (_x_172:(cts.Term cts.star (logic.eq nat.nat q q1)) =>
              logic.rewrite_l
                nat.nat
                q
                (__:(cts.Term
                       cts.diamond
                       (cts.cast
                          cts.triangle
                          cts.sinf
                          (cts.univ cts.box cts.triangle cts.I)
                          (cts.univ cts.diamond cts.sinf cts.I)
                          cts.I
                          nat.nat)) =>
                 logic.eq nat.nat q __)
                (logic.refl nat.nat q)
                q1
                _x_172)
             (nat.le_to_or_lt_eq q q1 leqq1))
          (leqq1:(cts.Term cts.star (connectives.Not (nat.le q q1))) =>
           connectives.falsity
             (logic.eq nat.nat q q1)
             (logic.absurd
                (nat.le (nat.S a) a)
                (nat.lt_to_le_to_lt
                   a
                   (nat.times (nat.S q1) b)
                   a
                   (logic.eq_ind_r
                      nat.nat
                      (nat.plus (nat.times q1 b) r1)
                      (x:(cts.Term
                            cts.diamond
                            (cts.cast
                               cts.triangle
                               cts.sinf
                               (cts.univ cts.box cts.triangle cts.I)
                               (cts.univ cts.diamond cts.sinf cts.I)
                               cts.I
                               nat.nat)) =>
                       nat.lt x (nat.times (nat.S q1) b))
                      (logic.eq_coerc
                         (nat.lt (nat.plus (nat.times q1 b) r1) (nat.plus (nat.times q1 b) b))
                         (nat.lt (nat.plus (nat.times q1 b) r1) (nat.times (nat.S q1) b))
                         (nat.monotonic_lt_plus_r (nat.times q1 b) r1 b ltr1b)
                         (logic.rewrite_r
                            nat.nat
                            (nat.times b q1)
                            (__:(cts.Term
                                   cts.diamond
                                   (cts.cast
                                      cts.triangle
                                      cts.sinf
                                      (cts.univ cts.box cts.triangle cts.I)
                                      (cts.univ cts.diamond cts.sinf cts.I)
                                      cts.I
                                      nat.nat)) =>
                             logic.eq
                               (cts.univ cts.star cts.box cts.I)
                               (nat.lt (nat.plus __ r1) (nat.plus __ b))
                               (nat.lt (nat.plus __ r1) (nat.times (nat.S q1) b)))
                            (logic.rewrite_r
                               nat.nat
                               (nat.plus r1 (nat.times b q1))
                               (__:(cts.Term
                                      cts.diamond
                                      (cts.cast
                                         cts.triangle
                                         cts.sinf
                                         (cts.univ cts.box cts.triangle cts.I)
                                         (cts.univ cts.diamond cts.sinf cts.I)
                                         cts.I
                                         nat.nat)) =>
                                logic.eq
                                  (cts.univ cts.star cts.box cts.I)
                                  (nat.lt
                                     (nat.plus (nat.times b q1) r1)
                                     (nat.plus (nat.times b q1) b))
                                  (nat.lt __ (nat.times (nat.S q1) b)))
                               (logic.rewrite_l
                                  nat.nat
                                  a
                                  (__:(cts.Term
                                         cts.diamond
                                         (cts.cast
                                            cts.triangle
                                            cts.sinf
                                            (cts.univ cts.box cts.triangle cts.I)
                                            (cts.univ cts.diamond cts.sinf cts.I)
                                            cts.I
                                            nat.nat)) =>
                                   logic.eq
                                     (cts.univ cts.star cts.box cts.I)
                                     (nat.lt
                                        (nat.plus (nat.times b q1) r1)
                                        (nat.plus (nat.times b q1) b))
                                     (nat.lt __ (nat.times (nat.S q1) b)))
                                  (logic.rewrite_r
                                     nat.nat
                                     (nat.times b (nat.S q1))
                                     (__:(cts.Term
                                            cts.diamond
                                            (cts.cast
                                               cts.triangle
                                               cts.sinf
                                               (cts.univ cts.box cts.triangle cts.I)
                                               (cts.univ cts.diamond cts.sinf cts.I)
                                               cts.I
                                               nat.nat)) =>
                                      logic.eq
                                        (cts.univ cts.star cts.box cts.I)
                                        (nat.lt
                                           (nat.plus (nat.times b q1) r1)
                                           (nat.plus (nat.times b q1) b))
                                        (nat.lt a __))
                                     (logic.rewrite_l
                                        nat.nat
                                        (nat.plus b (nat.times b q1))
                                        (__:(cts.Term
                                               cts.diamond
                                               (cts.cast
                                                  cts.triangle
                                                  cts.sinf
                                                  (cts.univ
                                                     cts.box
                                                     cts.triangle
                                                     cts.I)
                                                  (cts.univ
                                                     cts.diamond
                                                     cts.sinf
                                                     cts.I)
                                                  cts.I
                                                  nat.nat)) =>
                                         logic.eq
                                           (cts.univ cts.star cts.box cts.I)
                                           (nat.lt
                                              (nat.plus (nat.times b q1) r1)
                                              (nat.plus (nat.times b q1) b))
                                           (nat.lt a __))
                                        (logic.rewrite_r
                                           nat.nat
                                           (nat.plus r1 (nat.times b q1))
                                           (__:(cts.Term
                                                  cts.diamond
                                                  (cts.cast
                                                     cts.triangle
                                                     cts.sinf
                                                     (cts.univ
                                                        cts.box
                                                        cts.triangle
                                                        cts.I)
                                                     (cts.univ
                                                        cts.diamond
                                                        cts.sinf
                                                        cts.I)
                                                     cts.I
                                                     nat.nat)) =>
                                            logic.eq
                                              (cts.univ cts.star cts.box cts.I)
                                              (nat.lt __ (nat.plus (nat.times b q1) b))
                                              (nat.lt a (nat.plus b (nat.times b q1))))
                                           (logic.rewrite_l
                                              nat.nat
                                              a
                                              (__:(cts.Term
                                                     cts.diamond
                                                     (cts.cast
                                                        cts.triangle
                                                        cts.sinf
                                                        (cts.univ
                                                           cts.box
                                                           cts.triangle
                                                           cts.I)
                                                        (cts.univ
                                                           cts.diamond
                                                           cts.sinf
                                                           cts.I)
                                                        cts.I
                                                        nat.nat)) =>
                                               logic.eq
                                                 (cts.univ cts.star cts.box cts.I)
                                                 (nat.lt
                                                    __
                                                    (nat.plus (nat.times b q1) b))
                                                 (nat.lt
                                                    a
                                                    (nat.plus b (nat.times b q1))))
                                              (logic.rewrite_r
                                                 nat.nat
                                                 (nat.plus b (nat.times b q1))
                                                 (__:(cts.Term
                                                        cts.diamond
                                                        (cts.cast
                                                           cts.triangle
                                                           cts.sinf
                                                           (cts.univ
                                                              cts.box
                                                              cts.triangle
                                                              cts.I)
                                                           (cts.univ
                                                              cts.diamond
                                                              cts.sinf
                                                              cts.I)
                                                           cts.I
                                                           nat.nat)) =>
                                                  logic.eq
                                                    (cts.univ cts.star cts.box cts.I)
                                                    (nat.lt a __)
                                                    (nat.lt
                                                       a
                                                       (nat.plus b (nat.times b q1))))
                                                 (logic.refl
                                                    (cts.univ cts.star cts.box cts.I)
                                                    (nat.lt
                                                       a
                                                       (nat.plus b (nat.times b q1))))
                                                 (nat.plus (nat.times b q1) b)
                                                 (nat.commutative_plus
                                                    (nat.times b q1)
                                                    b))
                                              (nat.plus r1 (nat.times b q1))
                                              (let_clause_1062
                                                 a
                                                 b
                                                 q
                                                 r
                                                 q1
                                                 r1
                                                 _clearme
                                                 ltrb
                                                 spec
                                                 _clearme0
                                                 ltr1b
                                                 spec1
                                                 leqq1))
                                           (nat.plus (nat.times b q1) r1)
                                           (nat.commutative_plus (nat.times b q1) r1))
                                        (nat.times b (nat.S q1))
                                        (nat.times_n_Sm b q1))
                                     (nat.times (nat.S q1) b)
                                     (nat.commutative_times (nat.S q1) b))
                                  (nat.plus r1 (nat.times b q1))
                                  (let_clause_1062
                                     a
                                     b
                                     q
                                     r
                                     q1
                                     r1
                                     _clearme
                                     ltrb
                                     spec
                                     _clearme0
                                     ltr1b
                                     spec1
                                     leqq1))
                               (nat.plus (nat.times b q1) r1)
                               (nat.commutative_plus (nat.times b q1) r1))
                            (nat.times q1 b)
                            (nat.commutative_times q1 b)))
                      a
                      spec1)
                   (nat.transitive_le
                      (nat.times (nat.S q1) b)
                      (nat.times q b)
                      a
                      (logic.eq_coerc
                         (nat.le (nat.times b (nat.S q1)) (nat.times b q))
                         (nat.le (nat.times (nat.S q1) b) (nat.times q b))
                         (nat.monotonic_le_times_r
                            b
                            (nat.S q1)
                            q
                            (nat.not_le_to_lt q q1 leqq1))
                         (logic.rewrite_r
                            nat.nat
                            (nat.times b (nat.S q1))
                            (__:(cts.Term
                                   cts.diamond
                                   (cts.cast
                                      cts.triangle
                                      cts.sinf
                                      (cts.univ cts.box cts.triangle cts.I)
                                      (cts.univ cts.diamond cts.sinf cts.I)
                                      cts.I
                                      nat.nat)) =>
                             logic.eq
                               (cts.univ cts.star cts.box cts.I)
                               (nat.le (nat.times b (nat.S q1)) (nat.times b q))
                               (nat.le __ (nat.times q b)))
                            (logic.rewrite_l
                               nat.nat
                               (nat.plus b (nat.times b q1))
                               (__:(cts.Term
                                      cts.diamond
                                      (cts.cast
                                         cts.triangle
                                         cts.sinf
                                         (cts.univ cts.box cts.triangle cts.I)
                                         (cts.univ cts.diamond cts.sinf cts.I)
                                         cts.I
                                         nat.nat)) =>
                                logic.eq
                                  (cts.univ cts.star cts.box cts.I)
                                  (nat.le (nat.times b (nat.S q1)) (nat.times b q))
                                  (nat.le __ (nat.times q b)))
                               (logic.rewrite_r
                                  nat.nat
                                  (nat.times b q)
                                  (__:(cts.Term
                                         cts.diamond
                                         (cts.cast
                                            cts.triangle
                                            cts.sinf
                                            (cts.univ cts.box cts.triangle cts.I)
                                            (cts.univ cts.diamond cts.sinf cts.I)
                                            cts.I
                                            nat.nat)) =>
                                   logic.eq
                                     (cts.univ cts.star cts.box cts.I)
                                     (nat.le (nat.times b (nat.S q1)) (nat.times b q))
                                     (nat.le (nat.plus b (nat.times b q1)) __))
                                  (logic.rewrite_l
                                     nat.nat
                                     (nat.plus b (nat.times b q1))
                                     (__:(cts.Term
                                            cts.diamond
                                            (cts.cast
                                               cts.triangle
                                               cts.sinf
                                               (cts.univ cts.box cts.triangle cts.I)
                                               (cts.univ cts.diamond cts.sinf cts.I)
                                               cts.I
                                               nat.nat)) =>
                                      logic.eq
                                        (cts.univ cts.star cts.box cts.I)
                                        (nat.le __ (nat.times b q))
                                        (nat.le
                                           (nat.plus b (nat.times b q1))
                                           (nat.times b q)))
                                     (logic.refl
                                        (cts.univ cts.star cts.box cts.I)
                                        (nat.le
                                           (nat.plus b (nat.times b q1))
                                           (nat.times b q)))
                                     (nat.times b (nat.S q1))
                                     (nat.times_n_Sm b q1))
                                  (nat.times q b)
                                  (nat.commutative_times q b))
                               (nat.times b (nat.S q1))
                               (nat.times_n_Sm b q1))
                            (nat.times (nat.S q1) b)
                            (nat.commutative_times (nat.S q1) b)))
                      (logic.eq_coerc
                         (nat.le (nat.times q b) (nat.plus (nat.times q b) r))
                         (nat.le (nat.times q b) a)
                         (nat.le_plus_n_r r (nat.times q b))
                         (logic.rewrite_r
                            nat.nat
                            (nat.times b q)
                            (__:(cts.Term
                                   cts.diamond
                                   (cts.cast
                                      cts.triangle
                                      cts.sinf
                                      (cts.univ cts.box cts.triangle cts.I)
                                      (cts.univ cts.diamond cts.sinf cts.I)
                                      cts.I
                                      nat.nat)) =>
                             logic.eq
                               (cts.univ cts.star cts.box cts.I)
                               (nat.le __ (nat.plus __ r))
                               (nat.le __ a))
                            (logic.rewrite_r
                               nat.nat
                               (nat.plus r (nat.times b q))
                               (__:(cts.Term
                                      cts.diamond
                                      (cts.cast
                                         cts.triangle
                                         cts.sinf
                                         (cts.univ cts.box cts.triangle cts.I)
                                         (cts.univ cts.diamond cts.sinf cts.I)
                                         cts.I
                                         nat.nat)) =>
                                logic.eq
                                  (cts.univ cts.star cts.box cts.I)
                                  (nat.le (nat.times b q) __)
                                  (nat.le (nat.times b q) a))
                               (logic.rewrite_l
                                  nat.nat
                                  a
                                  (__:(cts.Term
                                         cts.diamond
                                         (cts.cast
                                            cts.triangle
                                            cts.sinf
                                            (cts.univ cts.box cts.triangle cts.I)
                                            (cts.univ cts.diamond cts.sinf cts.I)
                                            cts.I
                                            nat.nat)) =>
                                   logic.eq
                                     (cts.univ cts.star cts.box cts.I)
                                     (nat.le (nat.times b q) __)
                                     (nat.le (nat.times b q) a))
                                  (logic.refl
                                     (cts.univ cts.star cts.box cts.I)
                                     (nat.le (nat.times b q) a))
                                  (nat.plus r (nat.times b q))
                                  (logic.rewrite_l
                                     nat.nat
                                     (nat.plus (nat.times b q) r)
                                     (__:(cts.Term
                                            cts.diamond
                                            (cts.cast
                                               cts.triangle
                                               cts.sinf
                                               (cts.univ cts.box cts.triangle cts.I)
                                               (cts.univ cts.diamond cts.sinf cts.I)
                                               cts.I
                                               nat.nat)) =>
                                      logic.eq nat.nat a __)
                                     (logic.rewrite_l
                                        nat.nat
                                        (nat.times q b)
                                        (__:(cts.Term
                                               cts.diamond
                                               (cts.cast
                                                  cts.triangle
                                                  cts.sinf
                                                  (cts.univ
                                                     cts.box
                                                     cts.triangle
                                                     cts.I)
                                                  (cts.univ
                                                     cts.diamond
                                                     cts.sinf
                                                     cts.I)
                                                  cts.I
                                                  nat.nat)) =>
                                         logic.eq nat.nat a (nat.plus __ r))
                                        spec
                                        (nat.times b q)
                                        (nat.commutative_times q b))
                                     (nat.plus r (nat.times b q))
                                     (nat.commutative_plus (nat.times b q) r)))
                               (nat.plus (nat.times b q) r)
                               (nat.commutative_plus (nat.times b q) r))
                            (nat.times q b)
                            (nat.commutative_times q b)))))
                (nat.not_le_Sn_n a))))
       _clearme0)
    _clearme.

def div_mod_spec_to_eq2 :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1 =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x2 =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x3 =>
                    cts.prod
                      cts.box
                      cts.star
                      cts.star
                      cts.I
                      nat.nat
                      (x4 =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (div_mod_spec x x0 x1 x2)
                         (x5 =>
                          cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (div_mod_spec x x0 x3 x4)
                            (x6 => logic.eq nat.nat x2 x4)))))))))
  :=
  a:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  b:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  q:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  r:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  q1:(cts.Term
        cts.diamond
        (cts.cast
           cts.triangle
           cts.sinf
           (cts.univ cts.box cts.triangle cts.I)
           (cts.univ cts.diamond cts.sinf cts.I)
           cts.I
           nat.nat)) =>
  r1:(cts.Term
        cts.diamond
        (cts.cast
           cts.triangle
           cts.sinf
           (cts.univ cts.box cts.triangle cts.I)
           (cts.univ cts.diamond cts.sinf cts.I)
           cts.I
           nat.nat)) =>
  spec:(cts.Term cts.star (div_mod_spec a b q r)) =>
  spec1:(cts.Term cts.star (div_mod_spec a b q1 r1)) =>
  match_div_mod_spec_prop
    a
    b
    q
    r
    (logic.eq nat.nat r r1)
    (__:(cts.Term cts.star (nat.lt r b)) =>
     eqa:(cts.Term cts.star (logic.eq nat.nat a (nat.plus (nat.times q b) r))) =>
     match_div_mod_spec_prop
       a
       b
       q1
       r1
       (logic.eq nat.nat r r1)
       (_0:(cts.Term cts.star (nat.lt r1 b)) =>
        eqa1:(cts.Term cts.star (logic.eq nat.nat a (nat.plus (nat.times q1 b) r1))) =>
        nat.injective_plus_r
          (nat.times q b)
          r
          r1
          (logic.rewrite_r
             nat.nat
             (nat.times b q)
             (__1:(cts.Term
                     cts.diamond
                     (cts.cast
                        cts.triangle
                        cts.sinf
                        (cts.univ cts.box cts.triangle cts.I)
                        (cts.univ cts.diamond cts.sinf cts.I)
                        cts.I
                        nat.nat)) =>
              logic.eq nat.nat (nat.plus __1 r) (nat.plus (nat.times q b) r1))
             (logic.rewrite_r
                nat.nat
                (nat.plus r (nat.times b q))
                (__1:(cts.Term
                        cts.diamond
                        (cts.cast
                           cts.triangle
                           cts.sinf
                           (cts.univ cts.box cts.triangle cts.I)
                           (cts.univ cts.diamond cts.sinf cts.I)
                           cts.I
                           nat.nat)) =>
                 logic.eq nat.nat __1 (nat.plus (nat.times q b) r1))
                (logic.rewrite_l
                   nat.nat
                   a
                   (__1:(cts.Term
                           cts.diamond
                           (cts.cast
                              cts.triangle
                              cts.sinf
                              (cts.univ cts.box cts.triangle cts.I)
                              (cts.univ cts.diamond cts.sinf cts.I)
                              cts.I
                              nat.nat)) =>
                    logic.eq nat.nat __1 (nat.plus (nat.times q b) r1))
                   (logic.rewrite_r
                      nat.nat
                      (nat.times b q)
                      (__1:(cts.Term
                              cts.diamond
                              (cts.cast
                                 cts.triangle
                                 cts.sinf
                                 (cts.univ cts.box cts.triangle cts.I)
                                 (cts.univ cts.diamond cts.sinf cts.I)
                                 cts.I
                                 nat.nat)) =>
                       logic.eq nat.nat a (nat.plus __1 r1))
                      (logic.rewrite_r
                         nat.nat
                         (nat.plus r1 (nat.times b q))
                         (__1:(cts.Term
                                 cts.diamond
                                 (cts.cast
                                    cts.triangle
                                    cts.sinf
                                    (cts.univ cts.box cts.triangle cts.I)
                                    (cts.univ cts.diamond cts.sinf cts.I)
                                    cts.I
                                    nat.nat)) =>
                          logic.eq nat.nat a __1)
                         (logic.rewrite_l
                            nat.nat
                            a
                            (__1:(cts.Term
                                    cts.diamond
                                    (cts.cast
                                       cts.triangle
                                       cts.sinf
                                       (cts.univ cts.box cts.triangle cts.I)
                                       (cts.univ cts.diamond cts.sinf cts.I)
                                       cts.I
                                       nat.nat)) =>
                             logic.eq nat.nat a __1)
                            (logic.refl nat.nat a)
                            (nat.plus r1 (nat.times b q))
                            (logic.rewrite_r
                               nat.nat
                               q1
                               (__1:(cts.Term
                                       cts.diamond
                                       (cts.cast
                                          cts.triangle
                                          cts.sinf
                                          (cts.univ cts.box cts.triangle cts.I)
                                          (cts.univ cts.diamond cts.sinf cts.I)
                                          cts.I
                                          nat.nat)) =>
                                logic.eq nat.nat a (nat.plus r1 (nat.times b __1)))
                               (logic.rewrite_l
                                  nat.nat
                                  (nat.plus (nat.times b q1) r1)
                                  (__1:(cts.Term
                                          cts.diamond
                                          (cts.cast
                                             cts.triangle
                                             cts.sinf
                                             (cts.univ cts.box cts.triangle cts.I)
                                             (cts.univ cts.diamond cts.sinf cts.I)
                                             cts.I
                                             nat.nat)) =>
                                   logic.eq nat.nat a __1)
                                  (logic.rewrite_l
                                     nat.nat
                                     (nat.times q1 b)
                                     (__1:(cts.Term
                                             cts.diamond
                                             (cts.cast
                                                cts.triangle
                                                cts.sinf
                                                (cts.univ cts.box cts.triangle cts.I)
                                                (cts.univ cts.diamond cts.sinf cts.I)
                                                cts.I
                                                nat.nat)) =>
                                      logic.eq nat.nat a (nat.plus __1 r1))
                                     eqa1
                                     (nat.times b q1)
                                     (nat.commutative_times q1 b))
                                  (nat.plus r1 (nat.times b q1))
                                  (nat.commutative_plus (nat.times b q1) r1))
                               q
                               (div_mod_spec_to_eq a b q r q1 r1 spec spec1)))
                         (nat.plus (nat.times b q) r1)
                         (nat.commutative_plus (nat.times b q) r1))
                      (nat.times q b)
                      (nat.commutative_times q b))
                   (nat.plus r (nat.times b q))
                   (logic.rewrite_l
                      nat.nat
                      (nat.plus (nat.times b q) r)
                      (__1:(cts.Term
                              cts.diamond
                              (cts.cast
                                 cts.triangle
                                 cts.sinf
                                 (cts.univ cts.box cts.triangle cts.I)
                                 (cts.univ cts.diamond cts.sinf cts.I)
                                 cts.I
                                 nat.nat)) =>
                       logic.eq nat.nat a __1)
                      (logic.rewrite_l
                         nat.nat
                         (nat.times q b)
                         (__1:(cts.Term
                                 cts.diamond
                                 (cts.cast
                                    cts.triangle
                                    cts.sinf
                                    (cts.univ cts.box cts.triangle cts.I)
                                    (cts.univ cts.diamond cts.sinf cts.I)
                                    cts.I
                                    nat.nat)) =>
                          logic.eq nat.nat a (nat.plus __1 r))
                         eqa
                         (nat.times b q)
                         (nat.commutative_times q b))
                      (nat.plus r (nat.times b q))
                      (nat.commutative_plus (nat.times b q) r)))
                (nat.plus (nat.times b q) r)
                (nat.commutative_plus (nat.times b q) r))
             (nat.times q b)
             (nat.commutative_times q b)))
       spec1)
    spec.

def div_times :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (nat.lt nat.O x0)
             (x1 => logic.eq nat.nat (div (nat.times x x0) x0) x))))
  :=
  a:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  b:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  posb:(cts.Term cts.star (nat.lt nat.O b)) =>
  div_mod_spec_to_eq
    (nat.times a b)
    b
    (div (nat.times a b) b)
    (mod (nat.times a b) b)
    a
    nat.O
    (div_mod_spec_div_mod (nat.times a b) b posb)
    (div_mod_spec_intro
       (nat.times a b)
       b
       a
       nat.O
       posb
       (logic.rewrite_r
          nat.nat
          (nat.plus nat.O (nat.times a b))
          (__:(cts.Term
                 cts.diamond
                 (cts.cast
                    cts.triangle
                    cts.sinf
                    (cts.univ cts.box cts.triangle cts.I)
                    (cts.univ cts.diamond cts.sinf cts.I)
                    cts.I
                    nat.nat)) =>
           logic.eq nat.nat (nat.times a b) __)
          (logic.rewrite_l
             nat.nat
             (nat.times a b)
             (__:(cts.Term
                    cts.diamond
                    (cts.cast
                       cts.triangle
                       cts.sinf
                       (cts.univ cts.box cts.triangle cts.I)
                       (cts.univ cts.diamond cts.sinf cts.I)
                       cts.I
                       nat.nat)) =>
              logic.eq nat.nat (nat.times a b) __)
             (logic.refl nat.nat (nat.times a b))
             (nat.plus nat.O (nat.times a b))
             (nat.plus_O_n (nat.times a b)))
          (nat.plus (nat.times a b) nat.O)
          (nat.commutative_plus (nat.times a b) nat.O))).

def eq_div_O :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (nat.lt x x0)
             (x1 => logic.eq nat.nat (div x x0) nat.O))))
  :=
  n:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  m:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  ltnm:(cts.Term cts.star (nat.lt n m)) =>
  div_mod_spec_to_eq
    n
    m
    (div n m)
    (mod n m)
    nat.O
    n
    (div_mod_spec_div_mod n m (nat.ltn_to_ltO n m ltnm))
    (div_mod_spec_intro
       n
       m
       nat.O
       n
       ltnm
       (logic.rewrite_r
          nat.nat
          (nat.times m nat.O)
          (__:(cts.Term
                 cts.diamond
                 (cts.cast
                    cts.triangle
                    cts.sinf
                    (cts.univ cts.box cts.triangle cts.I)
                    (cts.univ cts.diamond cts.sinf cts.I)
                    cts.I
                    nat.nat)) =>
           logic.eq nat.nat n (nat.plus __ n))
          (logic.rewrite_l
             nat.nat
             nat.O
             (__:(cts.Term
                    cts.diamond
                    (cts.cast
                       cts.triangle
                       cts.sinf
                       (cts.univ cts.box cts.triangle cts.I)
                       (cts.univ cts.diamond cts.sinf cts.I)
                       cts.I
                       nat.nat)) =>
              logic.eq nat.nat n (nat.plus __ n))
             (logic.rewrite_r
                nat.nat
                (nat.plus n nat.O)
                (__:(cts.Term
                       cts.diamond
                       (cts.cast
                          cts.triangle
                          cts.sinf
                          (cts.univ cts.box cts.triangle cts.I)
                          (cts.univ cts.diamond cts.sinf cts.I)
                          cts.I
                          nat.nat)) =>
                 logic.eq nat.nat n __)
                (logic.rewrite_l
                   nat.nat
                   n
                   (__:(cts.Term
                          cts.diamond
                          (cts.cast
                             cts.triangle
                             cts.sinf
                             (cts.univ cts.box cts.triangle cts.I)
                             (cts.univ cts.diamond cts.sinf cts.I)
                             cts.I
                             nat.nat)) =>
                    logic.eq nat.nat n __)
                   (logic.refl nat.nat n)
                   (nat.plus n nat.O)
                   (nat.plus_n_O n))
                (nat.plus nat.O n)
                (nat.commutative_plus nat.O n))
             (nat.times m nat.O)
             (nat.times_n_O m))
          (nat.times nat.O m)
          (nat.commutative_times nat.O m))).

def mod_O_n :
  cts.Term
    cts.star
    (cts.prod cts.box cts.star cts.star cts.I nat.nat (x => logic.eq nat.nat (mod nat.O x) nat.O))
  :=
  n:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          nat.nat)) =>
  logic.sym_eq
    nat.nat
    nat.O
    (mod nat.O n)
    (logic.eq_coerc
       (logic.eq nat.nat nat.O (mod nat.O n))
       (logic.eq nat.nat nat.O (mod nat.O n))
       (nat.le_n_O_to_eq
          (mod nat.O n)
          (logic.eq_coerc
             (nat.le
                (nat.minus
                   (nat.plus (mod nat.O n) (nat.times n (div nat.O n)))
                   (nat.plus nat.O (nat.times n (div nat.O n))))
                (nat.plus (mod nat.O n) (nat.times n (div nat.O n))))
             (nat.le (mod nat.O n) nat.O)
             (nat.minus_le
                (nat.plus (mod nat.O n) (nat.times n (div nat.O n)))
                (nat.plus nat.O (nat.times n (div nat.O n))))
             (logic.rewrite_r
                nat.nat
                (nat.minus (mod nat.O n) nat.O)
                (__:(cts.Term
                       cts.diamond
                       (cts.cast
                          cts.triangle
                          cts.sinf
                          (cts.univ cts.box cts.triangle cts.I)
                          (cts.univ cts.diamond cts.sinf cts.I)
                          cts.I
                          nat.nat)) =>
                 logic.eq
                   (cts.univ cts.star cts.box cts.I)
                   (nat.le __ (nat.plus (mod nat.O n) (nat.times n (div nat.O n))))
                   (nat.le (mod nat.O n) nat.O))
                (logic.rewrite_l
                   nat.nat
                   (mod nat.O n)
                   (__:(cts.Term
                          cts.diamond
                          (cts.cast
                             cts.triangle
                             cts.sinf
                             (cts.univ cts.box cts.triangle cts.I)
                             (cts.univ cts.diamond cts.sinf cts.I)
                             cts.I
                             nat.nat)) =>
                    logic.eq
                      (cts.univ cts.star cts.box cts.I)
                      (nat.le __ (nat.plus (mod nat.O n) (nat.times n (div nat.O n))))
                      (nat.le (mod nat.O n) nat.O))
                   (logic.rewrite_l
                      nat.nat
                      nat.O
                      (__:(cts.Term
                             cts.diamond
                             (cts.cast
                                cts.triangle
                                cts.sinf
                                (cts.univ cts.box cts.triangle cts.I)
                                (cts.univ cts.diamond cts.sinf cts.I)
                                cts.I
                                nat.nat)) =>
                       logic.eq
                         (cts.univ cts.star cts.box cts.I)
                         (nat.le (mod nat.O n) __)
                         (nat.le (mod nat.O n) nat.O))
                      (logic.refl
                         (cts.univ cts.star cts.box cts.I)
                         (nat.le (mod nat.O n) nat.O))
                      (nat.plus (mod nat.O n) (nat.times n (div nat.O n)))
                      (logic.rewrite_l
                         nat.nat
                         (nat.plus (nat.times n (div nat.O n)) (mod nat.O n))
                         (__:(cts.Term
                                cts.diamond
                                (cts.cast
                                   cts.triangle
                                   cts.sinf
                                   (cts.univ cts.box cts.triangle cts.I)
                                   (cts.univ cts.diamond cts.sinf cts.I)
                                   cts.I
                                   nat.nat)) =>
                          logic.eq nat.nat nat.O __)
                         (logic.rewrite_l
                            nat.nat
                            (nat.times (div nat.O n) n)
                            (__:(cts.Term
                                   cts.diamond
                                   (cts.cast
                                      cts.triangle
                                      cts.sinf
                                      (cts.univ cts.box cts.triangle cts.I)
                                      (cts.univ cts.diamond cts.sinf cts.I)
                                      cts.I
                                      nat.nat)) =>
                             logic.eq nat.nat nat.O (nat.plus __ (mod nat.O n)))
                            (div_mod nat.O n)
                            (nat.times n (div nat.O n))
                            (nat.commutative_times (div nat.O n) n))
                         (nat.plus (mod nat.O n) (nat.times n (div nat.O n)))
                         (nat.commutative_plus (nat.times n (div nat.O n)) (mod nat.O n))))
                   (nat.minus (mod nat.O n) nat.O)
                   (nat.minus_n_O (mod nat.O n)))
                (nat.minus
                   (nat.plus (mod nat.O n) (nat.times n (div nat.O n)))
                   (nat.plus nat.O (nat.times n (div nat.O n))))
                (nat.minus_plus_plus_l (mod nat.O n) nat.O (nat.times n (div nat.O n))))))
       (logic.refl (cts.univ cts.star cts.box cts.I) (logic.eq nat.nat nat.O (mod nat.O n)))).

