def reflexive :
  cts.Term
    cts.diamond
    (cts.prod
       cts.triangle
       cts.diamond
       cts.diamond
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x =>
        cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                x
                (x0 =>
                 cts.prod cts.box cts.box cts.box cts.I x (x1 => cts.univ cts.star cts.box cts.I)))
             (x0 => cts.univ cts.star cts.box cts.I))))
  :=
  A:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
  R:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             A
             (x =>
              cts.prod cts.box cts.box cts.box cts.I A (x0 => cts.univ cts.star cts.box cts.I))))) =>
  cts.prod cts.box cts.star cts.star cts.I A (x => R x x).

def transitive :
  cts.Term
    cts.diamond
    (cts.prod
       cts.triangle
       cts.diamond
       cts.diamond
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x =>
        cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                x
                (x0 =>
                 cts.prod cts.box cts.box cts.box cts.I x (x1 => cts.univ cts.star cts.box cts.I)))
             (x0 => cts.univ cts.star cts.box cts.I))))
  :=
  A:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
  R:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             A
             (x =>
              cts.prod cts.box cts.box cts.box cts.I A (x0 => cts.univ cts.star cts.box cts.I))))) =>
  cts.prod
    cts.box
    cts.star
    cts.star
    cts.I
    A
    (x =>
     cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       A
       (x0 =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          A
          (x1 =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (R x x0)
             (x2 => cts.prod cts.star cts.star cts.star cts.I (R x0 x1) (x3 => R x x1))))).

def RC :
  cts.Term
    cts.diamond
    (cts.prod
       cts.triangle
       cts.diamond
       cts.diamond
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x =>
        cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                x
                (x0 =>
                 cts.prod cts.box cts.box cts.box cts.I x (x1 => cts.univ cts.star cts.box cts.I)))
             (x0 =>
              cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                x
                (x1 =>
                 cts.prod cts.box cts.box cts.box cts.I x (x2 => cts.univ cts.star cts.box cts.I))))))
  :=
  A:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
  R:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             A
             (x =>
              cts.prod cts.box cts.box cts.box cts.I A (x0 => cts.univ cts.star cts.box cts.I))))) =>
  x:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          A)) =>
  y:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          A)) =>
  connectives.Or (R x y) (logic.eq A x y).

def RC_reflexive :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             x
             (x0 =>
              cts.prod cts.box cts.box cts.box cts.I x (x1 => cts.univ cts.star cts.box cts.I)))
          (x0 => reflexive x (RC x x0))))
  :=
  A:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
  R:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             A
             (x =>
              cts.prod cts.box cts.box cts.box cts.I A (x0 => cts.univ cts.star cts.box cts.I))))) =>
  x:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          A)) =>
  connectives.or_intror (R x x) (logic.eq A x x) (logic.refl A x).

def injective_ :
  cts.Term
    cts.diamond
    (cts.prod
       cts.triangle
       cts.diamond
       cts.diamond
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x =>
        cts.prod
          cts.triangle
          cts.diamond
          cts.diamond
          cts.I
          (cts.univ cts.box cts.triangle cts.I)
          (x0 =>
           cts.cast
             cts.triangle
             cts.sinf
             (cts.univ cts.box cts.triangle cts.I)
             (cts.univ cts.diamond cts.sinf cts.I)
             cts.I
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                (cts.prod cts.box cts.box cts.box cts.I x (x1 => x0))
                (x1 => cts.univ cts.star cts.box cts.I)))))
  :=
  A:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
  B:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
  f:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.prod cts.box cts.box cts.box cts.I A (x => B)))) =>
  cts.prod
    cts.box
    cts.star
    cts.star
    cts.I
    A
    (x =>
     cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       A
       (x0 =>
        cts.prod cts.star cts.star cts.star cts.I (logic.eq B (f x) (f x0)) (x1 => logic.eq A x x0))).

def commutative :
  cts.Term
    cts.diamond
    (cts.prod
       cts.triangle
       cts.diamond
       cts.diamond
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x =>
        cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                x
                (x0 => cts.prod cts.box cts.box cts.box cts.I x (x1 => x)))
             (x0 => cts.univ cts.star cts.box cts.I))))
  :=
  A:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
  f:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             A
             (x => cts.prod cts.box cts.box cts.box cts.I A (x0 => A))))) =>
  cts.prod
    cts.box
    cts.star
    cts.star
    cts.I
    A
    (x => cts.prod cts.box cts.star cts.star cts.I A (x0 => logic.eq A (f x x0) (f x0 x))).

def associative :
  cts.Term
    cts.diamond
    (cts.prod
       cts.triangle
       cts.diamond
       cts.diamond
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x =>
        cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                x
                (x0 => cts.prod cts.box cts.box cts.box cts.I x (x1 => x)))
             (x0 => cts.univ cts.star cts.box cts.I))))
  :=
  A:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
  f:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             A
             (x => cts.prod cts.box cts.box cts.box cts.I A (x0 => A))))) =>
  cts.prod
    cts.box
    cts.star
    cts.star
    cts.I
    A
    (x =>
     cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       A
       (x0 =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          A
          (x1 => logic.eq A (f (f x x0) x1) (f x (f x0 x1))))).

def monotonic :
  cts.Term
    cts.diamond
    (cts.prod
       cts.triangle
       cts.diamond
       cts.diamond
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x =>
        cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                x
                (x0 =>
                 cts.prod cts.box cts.box cts.box cts.I x (x1 => cts.univ cts.star cts.box cts.I)))
             (x0 =>
              cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                (cts.prod cts.box cts.box cts.box cts.I x (x1 => x))
                (x1 => cts.univ cts.star cts.box cts.I)))))
  :=
  A:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
  R:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             A
             (x =>
              cts.prod cts.box cts.box cts.box cts.I A (x0 => cts.univ cts.star cts.box cts.I))))) =>
  f:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.prod cts.box cts.box cts.box cts.I A (x => A)))) =>
  cts.prod
    cts.box
    cts.star
    cts.star
    cts.I
    A
    (x =>
     cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       A
       (x0 => cts.prod cts.star cts.star cts.star cts.I (R x x0) (x1 => R (f x) (f x0)))).

def distributive :
  cts.Term
    cts.diamond
    (cts.prod
       cts.triangle
       cts.diamond
       cts.diamond
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x =>
        cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                x
                (x0 => cts.prod cts.box cts.box cts.box cts.I x (x1 => x)))
             (x0 =>
              cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   x
                   (x1 => cts.prod cts.box cts.box cts.box cts.I x (x2 => x)))
                (x1 => cts.univ cts.star cts.box cts.I)))))
  :=
  A:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
  f:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             A
             (x => cts.prod cts.box cts.box cts.box cts.I A (x0 => A))))) =>
  g:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             A
             (x => cts.prod cts.box cts.box cts.box cts.I A (x0 => A))))) =>
  cts.prod
    cts.box
    cts.star
    cts.star
    cts.I
    A
    (x =>
     cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       A
       (x0 =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          A
          (x1 => logic.eq A (f x (g x0 x1)) (g (f x x0) (f x x1))))).

