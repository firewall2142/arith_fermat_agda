module cong where
open import Agda.Primitive
open import div_mod
open import logic
open import nat
open import primes
open import relations
congruent : _
congruent = \(n : nat.nat) -> \(m : nat.nat) -> \(p : nat.nat) -> logic.eq (nat.nat) (div_mod.mod n p) (div_mod.mod m p)

congruent::n::n : _
congruent::n::n = \(n : nat.nat) -> \(p : nat.nat) -> ((logic.refl) (nat.nat)) (div_mod.mod n p)

transitive::congruent : _
transitive::congruent = \(p : nat.nat) -> \(x : nat.nat) -> \(y : nat.nat) -> \(z : nat.nat) -> \(auto : congruent x y p) -> (\(auto' : congruent y z p) -> (((((((logic.rewrite::l) (nat.nat)) (div_mod.mod x p)) (\(:::: : nat.nat) -> logic.eq (nat.nat) (div_mod.mod x p) ::::)) (((logic.refl) (nat.nat)) (div_mod.mod x p))) (div_mod.mod z p)) (((((((logic.rewrite::r) (nat.nat)) (div_mod.mod y p)) (\(:::: : nat.nat) -> logic.eq (nat.nat) :::: (div_mod.mod z p))) (auto')) (div_mod.mod x p)) (auto))))

mod::mod : _
mod::mod = \(n : nat.nat) -> \(p : nat.nat) -> \(posp : nat.lt nat.O p) -> (((((((logic.eq::ind::r) (nat.nat)) (nat.plus (nat.times (div_mod.div (div_mod.mod n p) p) p) (div_mod.mod (div_mod.mod n p) p))) (\(x : nat.nat) -> logic.eq (nat.nat) x (div_mod.mod (div_mod.mod n p) p))) (((((((logic.eq::ind::r) (nat.nat)) (nat.O)) (\(x : nat.nat) -> logic.eq (nat.nat) (nat.plus (nat.times x p) (div_mod.mod (div_mod.mod n p) p)) (div_mod.mod (div_mod.mod n p) p))) (((((((logic.rewrite::r) (nat.nat)) (nat.times p nat.O)) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.plus :::: (div_mod.mod (div_mod.mod n p) p)) (div_mod.mod (div_mod.mod n p) p))) (((((((logic.rewrite::l) (nat.nat)) (nat.O)) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.plus :::: (div_mod.mod (div_mod.mod n p) p)) (div_mod.mod (div_mod.mod n p) p))) (((((((logic.rewrite::l) (nat.nat)) (div_mod.mod (div_mod.mod n p) p)) (\(:::: : nat.nat) -> logic.eq (nat.nat) :::: (div_mod.mod (div_mod.mod n p) p))) (((logic.refl) (nat.nat)) (div_mod.mod (div_mod.mod n p) p))) (nat.plus nat.O (div_mod.mod (div_mod.mod n p) p))) ((nat.plus::O::n) (div_mod.mod (div_mod.mod n p) p)))) (nat.times p nat.O)) ((nat.times::n::O) (p)))) (nat.times nat.O p)) (((nat.commutative::times) (nat.O)) (p)))) (div_mod.div (div_mod.mod n p) p)) ((((div_mod.eq::div::O) (div_mod.mod n p)) (p)) ((((div_mod.lt::mod::m::m) (n)) (p)) (posp))))) (div_mod.mod n p)) (((div_mod.div::mod) (div_mod.mod n p)) (p)))

congruent::n::mod::n : _
congruent::n::mod::n = \(n : nat.nat) -> \(p : nat.nat) -> \(posp : nat.lt nat.O p) -> ((((mod::mod) (n)) (p)) (posp))

eq::times::plus::to::congruent : _
eq::times::plus::to::congruent = \(n : nat.nat) -> \(m : nat.nat) -> \(p : nat.nat) -> \(r : nat.nat) -> \(posp : nat.lt nat.O p) -> (\(Hn : logic.eq (nat.nat) n (nat.plus (nat.times r p) m)) -> (((((((((div_mod.div::mod::spec::to::eq2) (n)) (p)) (div_mod.div n p)) (div_mod.mod n p)) (nat.plus r (div_mod.div m p))) (div_mod.mod m p)) ((((div_mod.div::mod::spec::div::mod) (n)) (p)) (posp))) (((((((div_mod.div::mod::spec::intro) (n)) (p)) (nat.plus r (div_mod.div m p))) (div_mod.mod m p)) ((((div_mod.lt::mod::m::m) (m)) (p)) (posp))) (((((((logic.eq::ind::r) (nat.nat)) (nat.times p (nat.plus r (div_mod.div m p)))) (\(x : nat.nat) -> logic.eq (nat.nat) n (nat.plus x (div_mod.mod m p)))) (((((((logic.eq::ind::r) (nat.nat)) (nat.plus (nat.times p r) (nat.times p (div_mod.div m p)))) (\(x : nat.nat) -> logic.eq (nat.nat) n (nat.plus x (div_mod.mod m p)))) (((((((logic.eq::ind::r) (nat.nat)) (nat.times r p)) (\(x : nat.nat) -> logic.eq (nat.nat) n (nat.plus (nat.plus x (nat.times p (div_mod.div m p))) (div_mod.mod m p)))) (((((((logic.eq::ind::r) (nat.nat)) (nat.times (div_mod.div m p) p)) (\(x : nat.nat) -> logic.eq (nat.nat) n (nat.plus (nat.plus (nat.times r p) x) (div_mod.mod m p)))) (((((((logic.eq::ind::r) (nat.nat)) (nat.plus (nat.times r p) (nat.plus (nat.times (div_mod.div m p) p) (div_mod.mod m p)))) (\(x : nat.nat) -> logic.eq (nat.nat) n x)) (((((((logic.rewrite::r) (nat.nat)) (nat.times p r)) (\(:::: : nat.nat) -> logic.eq (nat.nat) n (nat.plus :::: (nat.plus (nat.times (div_mod.div m p) p) (div_mod.mod m p))))) (((((((logic.rewrite::r) (nat.nat)) (nat.times p (div_mod.div m p))) (\(:::: : nat.nat) -> logic.eq (nat.nat) n (nat.plus (nat.times p r) (nat.plus :::: (div_mod.mod m p))))) (((((((logic.rewrite::r) (nat.nat)) (nat.plus (div_mod.mod m p) (nat.times p (div_mod.div m p)))) (\(:::: : nat.nat) -> logic.eq (nat.nat) n (nat.plus (nat.times p r) ::::))) (((((((logic.rewrite::l) (nat.nat)) (m)) (\(:::: : nat.nat) -> logic.eq (nat.nat) n (nat.plus (nat.times p r) ::::))) (((((((logic.rewrite::r) (nat.nat)) (nat.plus m (nat.times p r))) (\(:::: : nat.nat) -> logic.eq (nat.nat) n ::::)) (((((((logic.rewrite::l) (nat.nat)) (n)) (\(:::: : nat.nat) -> logic.eq (nat.nat) n ::::)) (((logic.refl) (nat.nat)) (n))) (nat.plus m (nat.times p r))) (((((((logic.rewrite::l) (nat.nat)) (nat.plus (nat.times p r) m)) (\(:::: : nat.nat) -> logic.eq (nat.nat) n ::::)) (((((((logic.rewrite::l) (nat.nat)) (nat.times r p)) (\(:::: : nat.nat) -> logic.eq (nat.nat) n (nat.plus :::: m))) (Hn)) (nat.times p r)) (((nat.commutative::times) (r)) (p)))) (nat.plus m (nat.times p r))) (((nat.commutative::plus) (nat.times p r)) (m))))) (nat.plus (nat.times p r) m)) (((nat.commutative::plus) (nat.times p r)) (m)))) (nat.plus (div_mod.mod m p) (nat.times p (div_mod.div m p)))) (((((((logic.rewrite::l) (nat.nat)) (nat.plus (nat.times p (div_mod.div m p)) (div_mod.mod m p))) (\(:::: : nat.nat) -> logic.eq (nat.nat) m ::::)) (((((((logic.rewrite::l) (nat.nat)) (nat.times (div_mod.div m p) p)) (\(:::: : nat.nat) -> logic.eq (nat.nat) m (nat.plus :::: (div_mod.mod m p)))) (((div_mod.div::mod) (m)) (p))) (nat.times p (div_mod.div m p))) (((nat.commutative::times) (div_mod.div m p)) (p)))) (nat.plus (div_mod.mod m p) (nat.times p (div_mod.div m p)))) (((nat.commutative::plus) (nat.times p (div_mod.div m p))) (div_mod.mod m p))))) (nat.plus (nat.times p (div_mod.div m p)) (div_mod.mod m p))) (((nat.commutative::plus) (nat.times p (div_mod.div m p))) (div_mod.mod m p)))) (nat.times (div_mod.div m p) p)) (((nat.commutative::times) (div_mod.div m p)) (p)))) (nat.times r p)) (((nat.commutative::times) (r)) (p)))) (nat.plus (nat.plus (nat.times r p) (nat.times (div_mod.div m p) p)) (div_mod.mod m p))) ((((nat.associative::plus) (nat.times r p)) (nat.times (div_mod.div m p) p)) (div_mod.mod m p)))) (nat.times p (div_mod.div m p))) (((nat.commutative::times) (p)) (div_mod.div m p)))) (nat.times p r)) (((nat.commutative::times) (p)) (r)))) (nat.times p (nat.plus r (div_mod.div m p)))) ((((nat.distributive::times::plus) (p)) (r)) (div_mod.div m p)))) (nat.times (nat.plus r (div_mod.div m p)) p)) (((nat.commutative::times) (nat.plus r (div_mod.div m p))) (p))))))

divides::to::congruent : _
divides::to::congruent = \(n : nat.nat) -> \(m : nat.nat) -> \(p : nat.nat) -> \(posp : nat.lt nat.O p) -> (\(lemn : nat.le m n) -> (\(::clearme : primes.divides p (nat.minus n m)) -> ((((((primes.match::divides::prop) (p)) (nat.minus n m)) (congruent n m p)) (\(q : nat.nat) -> \(Hdiv : logic.eq (nat.nat) (nat.minus n m) (nat.times p q)) -> (((((((eq::times::plus::to::congruent) (n)) (m)) (p)) (q)) (posp)) (((((((logic.eq::ind::r) (nat.nat)) (nat.plus m (nat.times q p))) (\(x : nat.nat) -> logic.eq (nat.nat) n x)) ((((((nat.minus::to::plus) (n)) (m)) (nat.times q p)) (lemn)) (((((((logic.rewrite::r) (nat.nat)) (nat.times p q)) (\(:::: : nat.nat) -> logic.eq (nat.nat) :::: (nat.times q p))) (((((((logic.rewrite::r) (nat.nat)) (nat.times p q)) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.times p q) ::::)) (((logic.refl) (nat.nat)) (nat.times p q))) (nat.times q p)) (((nat.commutative::times) (q)) (p)))) (nat.minus n m)) (Hdiv)))) (nat.plus (nat.times q p) m)) (((nat.commutative::plus) (nat.times q p)) (m)))))) (::clearme))))

congruent::to::divides : _
congruent::to::divides = \(n : nat.nat) -> \(m : nat.nat) -> \(p : nat.nat) -> \(posp : nat.lt nat.O p) -> (\(Hcong : congruent n m p) -> (((((primes.quotient) (p)) (nat.minus n m)) (nat.minus (div_mod.div n p) (div_mod.div m p))) (((((((logic.eq::ind::r) (nat.nat)) (nat.times (nat.minus (div_mod.div n p) (div_mod.div m p)) p)) (\(x : nat.nat) -> logic.eq (nat.nat) (nat.minus n m) x)) (((((((logic.eq::ind::r) (nat.nat)) (nat.plus (nat.times (div_mod.div n p) p) (div_mod.mod n p))) (\(x : nat.nat) -> logic.eq (nat.nat) (nat.minus x m) (nat.times (nat.minus (div_mod.div n p) (div_mod.div m p)) p))) (((((((logic.eq::ind::r) (nat.nat)) (nat.plus (nat.times (div_mod.div m p) p) (div_mod.mod m p))) (\(x : nat.nat) -> logic.eq (nat.nat) (nat.minus (nat.plus (nat.times (div_mod.div n p) p) (div_mod.mod n p)) x) (nat.times (nat.minus (div_mod.div n p) (div_mod.div m p)) p))) (((((((logic.rewrite::r) (nat.nat)) (nat.times p (div_mod.div n p))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.minus (nat.plus :::: (div_mod.mod n p)) (nat.plus (nat.times (div_mod.div m p) p) (div_mod.mod m p))) (nat.times (nat.minus (div_mod.div n p) (div_mod.div m p)) p))) (((((((logic.rewrite::r) (nat.nat)) (nat.plus (div_mod.mod n p) (nat.times p (div_mod.div n p)))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.minus :::: (nat.plus (nat.times (div_mod.div m p) p) (div_mod.mod m p))) (nat.times (nat.minus (div_mod.div n p) (div_mod.div m p)) p))) (((((((logic.rewrite::l) (nat.nat)) (n)) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.minus :::: (nat.plus (nat.times (div_mod.div m p) p) (div_mod.mod m p))) (nat.times (nat.minus (div_mod.div n p) (div_mod.div m p)) p))) (((((((logic.rewrite::r) (nat.nat)) (nat.times p (div_mod.div m p))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.minus n (nat.plus :::: (div_mod.mod m p))) (nat.times (nat.minus (div_mod.div n p) (div_mod.div m p)) p))) (((((((logic.rewrite::l) (nat.nat)) (div_mod.mod n p)) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.minus n (nat.plus (nat.times p (div_mod.div m p)) ::::)) (nat.times (nat.minus (div_mod.div n p) (div_mod.div m p)) p))) (((((((logic.rewrite::r) (nat.nat)) (nat.plus (div_mod.mod n p) (nat.times p (div_mod.div m p)))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.minus n ::::) (nat.times (nat.minus (div_mod.div n p) (div_mod.div m p)) p))) (((((((logic.rewrite::l) (nat.nat)) (nat.minus (nat.minus n (div_mod.mod n p)) (nat.times p (div_mod.div m p)))) (\(:::: : nat.nat) -> logic.eq (nat.nat) :::: (nat.times (nat.minus (div_mod.div n p) (div_mod.div m p)) p))) (((((((logic.rewrite::l) (nat.nat)) (nat.times p (div_mod.div n p))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.minus :::: (nat.times p (div_mod.div m p))) (nat.times (nat.minus (div_mod.div n p) (div_mod.div m p)) p))) (((((((logic.rewrite::l) (nat.nat)) (nat.times p (nat.minus (div_mod.div n p) (div_mod.div m p)))) (\(:::: : nat.nat) -> logic.eq (nat.nat) :::: (nat.times (nat.minus (div_mod.div n p) (div_mod.div m p)) p))) (((((((logic.rewrite::r) (nat.nat)) (nat.times p (nat.minus (div_mod.div n p) (div_mod.div m p)))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.times p (nat.minus (div_mod.div n p) (div_mod.div m p))) ::::)) (((logic.refl) (nat.nat)) (nat.times p (nat.minus (div_mod.div n p) (div_mod.div m p))))) (nat.times (nat.minus (div_mod.div n p) (div_mod.div m p)) p)) (((nat.commutative::times) (nat.minus (div_mod.div n p) (div_mod.div m p))) (p)))) (nat.minus (nat.times p (div_mod.div n p)) (nat.times p (div_mod.div m p)))) ((((nat.distributive::times::minus) (p)) (div_mod.div n p)) (div_mod.div m p)))) (nat.minus n (div_mod.mod n p))) (((((((logic.rewrite::l) (nat.nat)) (nat.times (div_mod.div n p) p)) (\(:::: : nat.nat) -> logic.eq (nat.nat) :::: (nat.minus n (div_mod.mod n p)))) (((div_mod.eq::times::div::minus::mod) (n)) (p))) (nat.times p (div_mod.div n p))) (((nat.commutative::times) (div_mod.div n p)) (p))))) (nat.minus n (nat.plus (div_mod.mod n p) (nat.times p (div_mod.div m p))))) ((((nat.minus::plus) (n)) (div_mod.mod n p)) (nat.times p (div_mod.div m p))))) (nat.plus (nat.times p (div_mod.div m p)) (div_mod.mod n p))) (((nat.commutative::plus) (nat.times p (div_mod.div m p))) (div_mod.mod n p)))) (div_mod.mod m p)) (Hcong))) (nat.times (div_mod.div m p) p)) (((nat.commutative::times) (div_mod.div m p)) (p)))) (nat.plus (div_mod.mod n p) (nat.times p (div_mod.div n p)))) (((((((logic.rewrite::l) (nat.nat)) (nat.plus (nat.times p (div_mod.div n p)) (div_mod.mod n p))) (\(:::: : nat.nat) -> logic.eq (nat.nat) n ::::)) (((((((logic.rewrite::l) (nat.nat)) (nat.times (div_mod.div n p) p)) (\(:::: : nat.nat) -> logic.eq (nat.nat) n (nat.plus :::: (div_mod.mod n p)))) (((div_mod.div::mod) (n)) (p))) (nat.times p (div_mod.div n p))) (((nat.commutative::times) (div_mod.div n p)) (p)))) (nat.plus (div_mod.mod n p) (nat.times p (div_mod.div n p)))) (((nat.commutative::plus) (nat.times p (div_mod.div n p))) (div_mod.mod n p))))) (nat.plus (nat.times p (div_mod.div n p)) (div_mod.mod n p))) (((nat.commutative::plus) (nat.times p (div_mod.div n p))) (div_mod.mod n p)))) (nat.times (div_mod.div n p) p)) (((nat.commutative::times) (div_mod.div n p)) (p)))) (m)) (((div_mod.div::mod) (m)) (p)))) (n)) (((div_mod.div::mod) (n)) (p)))) (nat.times p (nat.minus (div_mod.div n p) (div_mod.div m p)))) (((nat.commutative::times) (p)) (nat.minus (div_mod.div n p) (div_mod.div m p))))))

let::clause::1034 : _
let::clause::1034 = \(n : nat.nat) -> \(m : nat.nat) -> \(p : nat.nat) -> \(posp : nat.lt nat.O p) -> (\(x2515 : nat.nat) -> \(x2516 : nat.nat) -> ((((((logic.rewrite::l) (nat.nat)) (nat.plus (nat.times x2516 (div_mod.div x2515 x2516)) (div_mod.mod x2515 x2516))) (\(:::: : nat.nat) -> logic.eq (nat.nat) x2515 ::::)) (((((((logic.rewrite::l) (nat.nat)) (nat.times (div_mod.div x2515 x2516) x2516)) (\(:::: : nat.nat) -> logic.eq (nat.nat) x2515 (nat.plus :::: (div_mod.mod x2515 x2516)))) (((div_mod.div::mod) (x2515)) (x2516))) (nat.times x2516 (div_mod.div x2515 x2516))) (((nat.commutative::times) (div_mod.div x2515 x2516)) (x2516)))) (nat.plus (div_mod.mod x2515 x2516) (nat.times x2516 (div_mod.div x2515 x2516)))) (((nat.commutative::plus) (nat.times x2516 (div_mod.div x2515 x2516))) (div_mod.mod x2515 x2516)))

let::clause::73 : _
let::clause::73 = \(n : nat.nat) -> \(m : nat.nat) -> \(p : nat.nat) -> \(posp : nat.lt nat.O p) -> (\(x134 : nat.nat) -> \(x135 : nat.nat) -> \(x136 : nat.nat) -> ((((((logic.rewrite::l) (nat.nat)) (nat.plus (nat.plus x135 x134) x136)) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.plus x134 (nat.plus x135 x136)) ::::)) ((((nat.assoc::plus1) (x136)) (x135)) (x134))) (nat.plus x135 (nat.plus x134 x136))) ((((nat.associative::plus) (x135)) (x134)) (x136)))

mod::times : _
mod::times = \(n : nat.nat) -> \(m : nat.nat) -> \(p : nat.nat) -> \(posp : nat.lt nat.O p) -> (((((((eq::times::plus::to::congruent) (nat.times n m)) (nat.times (div_mod.mod n p) (div_mod.mod m p))) (p)) (nat.plus (nat.plus (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) (nat.times (div_mod.div n p) (div_mod.mod m p))) (nat.times (div_mod.mod n p) (div_mod.div m p)))) (posp)) (((((((logic.trans::eq) (nat.nat)) (nat.times n m)) (nat.times (nat.plus (nat.times (div_mod.div n p) p) (div_mod.mod n p)) (nat.plus (nat.times (div_mod.div m p) p) (div_mod.mod m p)))) (nat.plus (nat.times (nat.plus (nat.plus (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) (nat.times (div_mod.div n p) (div_mod.mod m p))) (nat.times (div_mod.mod n p) (div_mod.div m p))) p) (nat.times (div_mod.mod n p) (div_mod.mod m p)))) (((((((logic.rewrite::r) (nat.nat)) (nat.times p (div_mod.div n p))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.times n m) (nat.times (nat.plus :::: (div_mod.mod n p)) (nat.plus (nat.times (div_mod.div m p) p) (div_mod.mod m p))))) (((((((logic.rewrite::r) (nat.nat)) (nat.plus (div_mod.mod n p) (nat.times p (div_mod.div n p)))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.times n m) (nat.times :::: (nat.plus (nat.times (div_mod.div m p) p) (div_mod.mod m p))))) (((((((logic.rewrite::l) (nat.nat)) (n)) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.times n m) (nat.times :::: (nat.plus (nat.times (div_mod.div m p) p) (div_mod.mod m p))))) (((((((logic.rewrite::r) (nat.nat)) (nat.times p (div_mod.div m p))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.times n m) (nat.times n (nat.plus :::: (div_mod.mod m p))))) (((((((logic.rewrite::r) (nat.nat)) (nat.plus (div_mod.mod m p) (nat.times p (div_mod.div m p)))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.times n m) (nat.times n ::::))) (((((((logic.rewrite::l) (nat.nat)) (m)) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.times n m) (nat.times n ::::))) (((logic.refl) (nat.nat)) (nat.times n m))) (nat.plus (div_mod.mod m p) (nat.times p (div_mod.div m p)))) (((((((let::clause::1034) (n)) (m)) (p)) (posp)) (m)) (p)))) (nat.plus (nat.times p (div_mod.div m p)) (div_mod.mod m p))) (((nat.commutative::plus) (nat.times p (div_mod.div m p))) (div_mod.mod m p)))) (nat.times (div_mod.div m p) p)) (((nat.commutative::times) (div_mod.div m p)) (p)))) (nat.plus (div_mod.mod n p) (nat.times p (div_mod.div n p)))) (((((((let::clause::1034) (n)) (m)) (p)) (posp)) (n)) (p)))) (nat.plus (nat.times p (div_mod.div n p)) (div_mod.mod n p))) (((nat.commutative::plus) (nat.times p (div_mod.div n p))) (div_mod.mod n p)))) (nat.times (div_mod.div n p) p)) (((nat.commutative::times) (div_mod.div n p)) (p)))) (((((((logic.trans::eq) (nat.nat)) (nat.times (nat.plus (nat.times (div_mod.div n p) p) (div_mod.mod n p)) (nat.plus (nat.times (div_mod.div m p) p) (div_mod.mod m p)))) (nat.plus (nat.plus (nat.plus (nat.times (nat.times (div_mod.div n p) p) (nat.times (div_mod.div m p) p)) (nat.times (nat.times (div_mod.div n p) p) (div_mod.mod m p))) (nat.times (div_mod.mod n p) (nat.times (div_mod.div m p) p))) (nat.times (div_mod.mod n p) (div_mod.mod m p)))) (nat.plus (nat.times (nat.plus (nat.plus (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) (nat.times (div_mod.div n p) (div_mod.mod m p))) (nat.times (div_mod.mod n p) (div_mod.div m p))) p) (nat.times (div_mod.mod n p) (div_mod.mod m p)))) (((((((logic.eq::ind::r) (nat.nat)) (nat.plus (nat.times (nat.times (div_mod.div n p) p) (nat.plus (nat.times (div_mod.div m p) p) (div_mod.mod m p))) (nat.times (div_mod.mod n p) (nat.plus (nat.times (div_mod.div m p) p) (div_mod.mod m p))))) (\(x : nat.nat) -> logic.eq (nat.nat) x (nat.plus (nat.plus (nat.plus (nat.times (nat.times (div_mod.div n p) p) (nat.times (div_mod.div m p) p)) (nat.times (nat.times (div_mod.div n p) p) (div_mod.mod m p))) (nat.times (div_mod.mod n p) (nat.times (div_mod.div m p) p))) (nat.times (div_mod.mod n p) (div_mod.mod m p))))) (((((((logic.eq::ind::r) (nat.nat)) (nat.plus (nat.times (nat.times (div_mod.div n p) p) (nat.times (div_mod.div m p) p)) (nat.times (nat.times (div_mod.div n p) p) (div_mod.mod m p)))) (\(x : nat.nat) -> logic.eq (nat.nat) (nat.plus x (nat.times (div_mod.mod n p) (nat.plus (nat.times (div_mod.div m p) p) (div_mod.mod m p)))) (nat.plus (nat.plus (nat.plus (nat.times (nat.times (div_mod.div n p) p) (nat.times (div_mod.div m p) p)) (nat.times (nat.times (div_mod.div n p) p) (div_mod.mod m p))) (nat.times (div_mod.mod n p) (nat.times (div_mod.div m p) p))) (nat.times (div_mod.mod n p) (div_mod.mod m p))))) (((((((logic.eq::ind::r) (nat.nat)) (nat.plus (nat.times (div_mod.mod n p) (nat.times (div_mod.div m p) p)) (nat.times (div_mod.mod n p) (div_mod.mod m p)))) (\(x : nat.nat) -> logic.eq (nat.nat) (nat.plus (nat.plus (nat.times (nat.times (div_mod.div n p) p) (nat.times (div_mod.div m p) p)) (nat.times (nat.times (div_mod.div n p) p) (div_mod.mod m p))) x) (nat.plus (nat.plus (nat.plus (nat.times (nat.times (div_mod.div n p) p) (nat.times (div_mod.div m p) p)) (nat.times (nat.times (div_mod.div n p) p) (div_mod.mod m p))) (nat.times (div_mod.mod n p) (nat.times (div_mod.div m p) p))) (nat.times (div_mod.mod n p) (div_mod.mod m p))))) (((((((logic.rewrite::l) (nat.nat)) (nat.plus (nat.plus (nat.plus (nat.times (nat.times (div_mod.div n p) p) (nat.times (div_mod.div m p) p)) (nat.times (nat.times (div_mod.div n p) p) (div_mod.mod m p))) (nat.times (div_mod.mod n p) (nat.times (div_mod.div m p) p))) (nat.times (div_mod.mod n p) (div_mod.mod m p)))) (\(:::: : nat.nat) -> logic.eq (nat.nat) :::: (nat.plus (nat.plus (nat.plus (nat.times (nat.times (div_mod.div n p) p) (nat.times (div_mod.div m p) p)) (nat.times (nat.times (div_mod.div n p) p) (div_mod.mod m p))) (nat.times (div_mod.mod n p) (nat.times (div_mod.div m p) p))) (nat.times (div_mod.mod n p) (div_mod.mod m p))))) (((logic.refl) (nat.nat)) (nat.plus (nat.plus (nat.plus (nat.times (nat.times (div_mod.div n p) p) (nat.times (div_mod.div m p) p)) (nat.times (nat.times (div_mod.div n p) p) (div_mod.mod m p))) (nat.times (div_mod.mod n p) (nat.times (div_mod.div m p) p))) (nat.times (div_mod.mod n p) (div_mod.mod m p))))) (nat.plus (nat.plus (nat.times (nat.times (div_mod.div n p) p) (nat.times (div_mod.div m p) p)) (nat.times (nat.times (div_mod.div n p) p) (div_mod.mod m p))) (nat.plus (nat.times (div_mod.mod n p) (nat.times (div_mod.div m p) p)) (nat.times (div_mod.mod n p) (div_mod.mod m p))))) ((((nat.associative::plus) (nat.plus (nat.times (nat.times (div_mod.div n p) p) (nat.times (div_mod.div m p) p)) (nat.times (nat.times (div_mod.div n p) p) (div_mod.mod m p)))) (nat.times (div_mod.mod n p) (nat.times (div_mod.div m p) p))) (nat.times (div_mod.mod n p) (div_mod.mod m p))))) (nat.times (div_mod.mod n p) (nat.plus (nat.times (div_mod.div m p) p) (div_mod.mod m p)))) ((((nat.distributive::times::plus) (div_mod.mod n p)) (nat.times (div_mod.div m p) p)) (div_mod.mod m p)))) (nat.times (nat.times (div_mod.div n p) p) (nat.plus (nat.times (div_mod.div m p) p) (div_mod.mod m p)))) ((((nat.distributive::times::plus) (nat.times (div_mod.div n p) p)) (nat.times (div_mod.div m p) p)) (div_mod.mod m p)))) (nat.times (nat.plus (nat.times (div_mod.div n p) p) (div_mod.mod n p)) (nat.plus (nat.times (div_mod.div m p) p) (div_mod.mod m p)))) ((((nat.distributive::times::plus::r) (nat.plus (nat.times (div_mod.div m p) p) (div_mod.mod m p))) (nat.times (div_mod.div n p) p)) (div_mod.mod n p)))) (((((((((((logic.eq::f2) (nat.nat)) (nat.nat)) (nat.nat)) (nat.plus)) (nat.plus (nat.plus (nat.times (nat.times (div_mod.div n p) p) (nat.times (div_mod.div m p) p)) (nat.times (nat.times (div_mod.div n p) p) (div_mod.mod m p))) (nat.times (div_mod.mod n p) (nat.times (div_mod.div m p) p)))) (nat.times (nat.plus (nat.plus (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) (nat.times (div_mod.div n p) (div_mod.mod m p))) (nat.times (div_mod.mod n p) (div_mod.div m p))) p)) (nat.times (div_mod.mod n p) (div_mod.mod m p))) (nat.times (div_mod.mod n p) (div_mod.mod m p))) (((((((logic.eq::ind) (nat.nat)) (nat.times (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) p)) (\(x::1 : nat.nat) -> logic.eq (nat.nat) (nat.plus (nat.plus x::1 (nat.times (nat.times (div_mod.div n p) p) (div_mod.mod m p))) (nat.times (div_mod.mod n p) (nat.times (div_mod.div m p) p))) (nat.times (nat.plus (nat.plus (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) (nat.times (div_mod.div n p) (div_mod.mod m p))) (nat.times (div_mod.mod n p) (div_mod.div m p))) p))) (((((((logic.eq::ind::r) (nat.nat)) (nat.times (div_mod.div n p) (nat.times p (div_mod.mod m p)))) (\(x : nat.nat) -> logic.eq (nat.nat) (nat.plus (nat.plus (nat.times (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) p) x) (nat.times (div_mod.mod n p) (nat.times (div_mod.div m p) p))) (nat.times (nat.plus (nat.plus (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) (nat.times (div_mod.div n p) (div_mod.mod m p))) (nat.times (div_mod.mod n p) (div_mod.div m p))) p))) (((((((logic.eq::ind::r) (nat.nat)) (nat.times (div_mod.mod m p) p)) (\(x : nat.nat) -> logic.eq (nat.nat) (nat.plus (nat.plus (nat.times (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) p) (nat.times (div_mod.div n p) x)) (nat.times (div_mod.mod n p) (nat.times (div_mod.div m p) p))) (nat.times (nat.plus (nat.plus (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) (nat.times (div_mod.div n p) (div_mod.mod m p))) (nat.times (div_mod.mod n p) (div_mod.div m p))) p))) (((((((logic.eq::ind) (nat.nat)) (nat.times (nat.times (div_mod.div n p) (div_mod.mod m p)) p)) (\(x::1 : nat.nat) -> logic.eq (nat.nat) (nat.plus (nat.plus (nat.times (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) p) x::1) (nat.times (div_mod.mod n p) (nat.times (div_mod.div m p) p))) (nat.times (nat.plus (nat.plus (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) (nat.times (div_mod.div n p) (div_mod.mod m p))) (nat.times (div_mod.mod n p) (div_mod.div m p))) p))) (((((((logic.eq::ind::r) (nat.nat)) (nat.plus (nat.times (nat.plus (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) (nat.times (div_mod.div n p) (div_mod.mod m p))) p) (nat.times (nat.times (div_mod.mod n p) (div_mod.div m p)) p))) (\(x : nat.nat) -> logic.eq (nat.nat) (nat.plus (nat.plus (nat.times (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) p) (nat.times (nat.times (div_mod.div n p) (div_mod.mod m p)) p)) (nat.times (div_mod.mod n p) (nat.times (div_mod.div m p) p))) x)) (((((((logic.rewrite::r) (nat.nat)) (nat.times p (div_mod.div n p))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.plus (nat.plus (nat.times (nat.times :::: (div_mod.div m p)) p) (nat.times (nat.times (div_mod.div n p) (div_mod.mod m p)) p)) (nat.times (div_mod.mod n p) (nat.times (div_mod.div m p) p))) (nat.plus (nat.times (nat.plus (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) (nat.times (div_mod.div n p) (div_mod.mod m p))) p) (nat.times (nat.times (div_mod.mod n p) (div_mod.div m p)) p)))) (((((((logic.rewrite::r) (nat.nat)) (nat.times (div_mod.div m p) (nat.times p (div_mod.div n p)))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.plus (nat.plus (nat.times :::: p) (nat.times (nat.times (div_mod.div n p) (div_mod.mod m p)) p)) (nat.times (div_mod.mod n p) (nat.times (div_mod.div m p) p))) (nat.plus (nat.times (nat.plus (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) (nat.times (div_mod.div n p) (div_mod.mod m p))) p) (nat.times (nat.times (div_mod.mod n p) (div_mod.div m p)) p)))) (((((((logic.rewrite::r) (nat.nat)) (nat.times p (nat.times (div_mod.div m p) (div_mod.div n p)))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.plus (nat.plus (nat.times :::: p) (nat.times (nat.times (div_mod.div n p) (div_mod.mod m p)) p)) (nat.times (div_mod.mod n p) (nat.times (div_mod.div m p) p))) (nat.plus (nat.times (nat.plus (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) (nat.times (div_mod.div n p) (div_mod.mod m p))) p) (nat.times (nat.times (div_mod.mod n p) (div_mod.div m p)) p)))) (((((((logic.rewrite::r) (nat.nat)) (nat.times (div_mod.div n p) (div_mod.div m p))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.plus (nat.plus (nat.times (nat.times p ::::) p) (nat.times (nat.times (div_mod.div n p) (div_mod.mod m p)) p)) (nat.times (div_mod.mod n p) (nat.times (div_mod.div m p) p))) (nat.plus (nat.times (nat.plus (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) (nat.times (div_mod.div n p) (div_mod.mod m p))) p) (nat.times (nat.times (div_mod.mod n p) (div_mod.div m p)) p)))) (((((((logic.rewrite::r) (nat.nat)) (nat.times p (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.plus (nat.plus :::: (nat.times (nat.times (div_mod.div n p) (div_mod.mod m p)) p)) (nat.times (div_mod.mod n p) (nat.times (div_mod.div m p) p))) (nat.plus (nat.times (nat.plus (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) (nat.times (div_mod.div n p) (div_mod.mod m p))) p) (nat.times (nat.times (div_mod.mod n p) (div_mod.div m p)) p)))) (((((((logic.rewrite::r) (nat.nat)) (nat.times p (nat.times (div_mod.div n p) (div_mod.mod m p)))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.plus (nat.plus (nat.times p (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p)))) ::::) (nat.times (div_mod.mod n p) (nat.times (div_mod.div m p) p))) (nat.plus (nat.times (nat.plus (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) (nat.times (div_mod.div n p) (div_mod.mod m p))) p) (nat.times (nat.times (div_mod.mod n p) (div_mod.div m p)) p)))) (((((((logic.rewrite::l) (nat.nat)) (nat.times p (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.times (div_mod.div n p) (div_mod.mod m p))))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.plus :::: (nat.times (div_mod.mod n p) (nat.times (div_mod.div m p) p))) (nat.plus (nat.times (nat.plus (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) (nat.times (div_mod.div n p) (div_mod.mod m p))) p) (nat.times (nat.times (div_mod.mod n p) (div_mod.div m p)) p)))) (((((((logic.rewrite::r) (nat.nat)) (nat.times p (div_mod.div m p))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.plus (nat.times p (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.times (div_mod.div n p) (div_mod.mod m p)))) (nat.times (div_mod.mod n p) ::::)) (nat.plus (nat.times (nat.plus (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) (nat.times (div_mod.div n p) (div_mod.mod m p))) p) (nat.times (nat.times (div_mod.mod n p) (div_mod.div m p)) p)))) (((((((logic.rewrite::r) (nat.nat)) (nat.times p (nat.times (div_mod.mod n p) (div_mod.div m p)))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.plus (nat.times p (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.times (div_mod.div n p) (div_mod.mod m p)))) ::::) (nat.plus (nat.times (nat.plus (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) (nat.times (div_mod.div n p) (div_mod.mod m p))) p) (nat.times (nat.times (div_mod.mod n p) (div_mod.div m p)) p)))) (((((((logic.rewrite::r) (nat.nat)) (nat.times (div_mod.div m p) (div_mod.mod n p))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.plus (nat.times p (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.times (div_mod.div n p) (div_mod.mod m p)))) (nat.times p ::::)) (nat.plus (nat.times (nat.plus (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) (nat.times (div_mod.div n p) (div_mod.mod m p))) p) (nat.times (nat.times (div_mod.mod n p) (div_mod.div m p)) p)))) (((((((logic.rewrite::r) (nat.nat)) (nat.plus (nat.times p (nat.times (div_mod.div m p) (div_mod.mod n p))) (nat.times p (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.times (div_mod.div n p) (div_mod.mod m p)))))) (\(:::: : nat.nat) -> logic.eq (nat.nat) :::: (nat.plus (nat.times (nat.plus (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) (nat.times (div_mod.div n p) (div_mod.mod m p))) p) (nat.times (nat.times (div_mod.mod n p) (div_mod.div m p)) p)))) (((((((logic.rewrite::l) (nat.nat)) (nat.times p (nat.plus (nat.times (div_mod.div m p) (div_mod.mod n p)) (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.times (div_mod.div n p) (div_mod.mod m p)))))) (\(:::: : nat.nat) -> logic.eq (nat.nat) :::: (nat.plus (nat.times (nat.plus (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) (nat.times (div_mod.div n p) (div_mod.mod m p))) p) (nat.times (nat.times (div_mod.mod n p) (div_mod.div m p)) p)))) (((((((logic.rewrite::r) (nat.nat)) (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.plus (nat.times (div_mod.div m p) (div_mod.mod n p)) (nat.times (div_mod.div n p) (div_mod.mod m p))))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.times p ::::) (nat.plus (nat.times (nat.plus (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) (nat.times (div_mod.div n p) (div_mod.mod m p))) p) (nat.times (nat.times (div_mod.mod n p) (div_mod.div m p)) p)))) (((((((logic.rewrite::r) (nat.nat)) (nat.plus (nat.times (div_mod.div n p) (div_mod.mod m p)) (nat.times (div_mod.div m p) (div_mod.mod n p)))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.times p (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) ::::)) (nat.plus (nat.times (nat.plus (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) (nat.times (div_mod.div n p) (div_mod.mod m p))) p) (nat.times (nat.times (div_mod.mod n p) (div_mod.div m p)) p)))) (((((((logic.rewrite::r) (nat.nat)) (nat.times p (div_mod.div n p))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.times p (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.plus (nat.times (div_mod.div n p) (div_mod.mod m p)) (nat.times (div_mod.div m p) (div_mod.mod n p))))) (nat.plus (nat.times (nat.plus (nat.times :::: (div_mod.div m p)) (nat.times (div_mod.div n p) (div_mod.mod m p))) p) (nat.times (nat.times (div_mod.mod n p) (div_mod.div m p)) p)))) (((((((logic.rewrite::r) (nat.nat)) (nat.times (div_mod.div m p) (nat.times p (div_mod.div n p)))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.times p (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.plus (nat.times (div_mod.div n p) (div_mod.mod m p)) (nat.times (div_mod.div m p) (div_mod.mod n p))))) (nat.plus (nat.times (nat.plus :::: (nat.times (div_mod.div n p) (div_mod.mod m p))) p) (nat.times (nat.times (div_mod.mod n p) (div_mod.div m p)) p)))) (((((((logic.rewrite::r) (nat.nat)) (nat.times p (nat.times (div_mod.div m p) (div_mod.div n p)))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.times p (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.plus (nat.times (div_mod.div n p) (div_mod.mod m p)) (nat.times (div_mod.div m p) (div_mod.mod n p))))) (nat.plus (nat.times (nat.plus :::: (nat.times (div_mod.div n p) (div_mod.mod m p))) p) (nat.times (nat.times (div_mod.mod n p) (div_mod.div m p)) p)))) (((((((logic.rewrite::r) (nat.nat)) (nat.times (div_mod.div n p) (div_mod.div m p))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.times p (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.plus (nat.times (div_mod.div n p) (div_mod.mod m p)) (nat.times (div_mod.div m p) (div_mod.mod n p))))) (nat.plus (nat.times (nat.plus (nat.times p ::::) (nat.times (div_mod.div n p) (div_mod.mod m p))) p) (nat.times (nat.times (div_mod.mod n p) (div_mod.div m p)) p)))) (((((((logic.rewrite::r) (nat.nat)) (nat.times p (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.times (div_mod.div n p) (div_mod.mod m p))))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.times p (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.plus (nat.times (div_mod.div n p) (div_mod.mod m p)) (nat.times (div_mod.div m p) (div_mod.mod n p))))) (nat.plus :::: (nat.times (nat.times (div_mod.mod n p) (div_mod.div m p)) p)))) (((((((logic.rewrite::r) (nat.nat)) (nat.times (div_mod.div m p) (div_mod.mod n p))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.times p (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.plus (nat.times (div_mod.div n p) (div_mod.mod m p)) (nat.times (div_mod.div m p) (div_mod.mod n p))))) (nat.plus (nat.times p (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.times (div_mod.div n p) (div_mod.mod m p)))) (nat.times :::: p)))) (((((((logic.rewrite::r) (nat.nat)) (nat.times p (nat.times (div_mod.div m p) (div_mod.mod n p)))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.times p (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.plus (nat.times (div_mod.div n p) (div_mod.mod m p)) (nat.times (div_mod.div m p) (div_mod.mod n p))))) (nat.plus (nat.times p (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.times (div_mod.div n p) (div_mod.mod m p)))) ::::))) (((((((logic.rewrite::r) (nat.nat)) (nat.plus (nat.times p (nat.times (div_mod.div m p) (div_mod.mod n p))) (nat.times p (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.times (div_mod.div n p) (div_mod.mod m p)))))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.times p (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.plus (nat.times (div_mod.div n p) (div_mod.mod m p)) (nat.times (div_mod.div m p) (div_mod.mod n p))))) ::::)) (((((((logic.rewrite::l) (nat.nat)) (nat.times p (nat.plus (nat.times (div_mod.div m p) (div_mod.mod n p)) (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.times (div_mod.div n p) (div_mod.mod m p)))))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.times p (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.plus (nat.times (div_mod.div n p) (div_mod.mod m p)) (nat.times (div_mod.div m p) (div_mod.mod n p))))) ::::)) (((((((logic.rewrite::r) (nat.nat)) (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.plus (nat.times (div_mod.div m p) (div_mod.mod n p)) (nat.times (div_mod.div n p) (div_mod.mod m p))))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.times p (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.plus (nat.times (div_mod.div n p) (div_mod.mod m p)) (nat.times (div_mod.div m p) (div_mod.mod n p))))) (nat.times p ::::))) (((((((logic.rewrite::r) (nat.nat)) (nat.plus (nat.times (div_mod.div n p) (div_mod.mod m p)) (nat.times (div_mod.div m p) (div_mod.mod n p)))) (\(:::: : nat.nat) -> logic.eq (nat.nat) (nat.times p (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.plus (nat.times (div_mod.div n p) (div_mod.mod m p)) (nat.times (div_mod.div m p) (div_mod.mod n p))))) (nat.times p (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) ::::)))) (((logic.refl) (nat.nat)) (nat.times p (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.plus (nat.times (div_mod.div n p) (div_mod.mod m p)) (nat.times (div_mod.div m p) (div_mod.mod n p))))))) (nat.plus (nat.times (div_mod.div m p) (div_mod.mod n p)) (nat.times (div_mod.div n p) (div_mod.mod m p)))) (((nat.commutative::plus) (nat.times (div_mod.div m p) (div_mod.mod n p))) (nat.times (div_mod.div n p) (div_mod.mod m p))))) (nat.plus (nat.times (div_mod.div m p) (div_mod.mod n p)) (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.times (div_mod.div n p) (div_mod.mod m p))))) ((((((((let::clause::73) (n)) (m)) (p)) (posp)) (nat.times (div_mod.div m p) (div_mod.mod n p))) (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p)))) (nat.times (div_mod.div n p) (div_mod.mod m p))))) (nat.plus (nat.times p (nat.times (div_mod.div m p) (div_mod.mod n p))) (nat.times p (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.times (div_mod.div n p) (div_mod.mod m p)))))) ((((nat.distributive::times::plus) (p)) (nat.times (div_mod.div m p) (div_mod.mod n p))) (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.times (div_mod.div n p) (div_mod.mod m p)))))) (nat.plus (nat.times p (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.times (div_mod.div n p) (div_mod.mod m p)))) (nat.times p (nat.times (div_mod.div m p) (div_mod.mod n p))))) (((nat.commutative::plus) (nat.times p (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.times (div_mod.div n p) (div_mod.mod m p))))) (nat.times p (nat.times (div_mod.div m p) (div_mod.mod n p)))))) (nat.times (nat.times (div_mod.div m p) (div_mod.mod n p)) p)) (((nat.commutative::times) (nat.times (div_mod.div m p) (div_mod.mod n p))) (p)))) (nat.times (div_mod.mod n p) (div_mod.div m p))) (((nat.commutative::times) (div_mod.mod n p)) (div_mod.div m p)))) (nat.times (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.times (div_mod.div n p) (div_mod.mod m p))) p)) (((nat.commutative::times) (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.times (div_mod.div n p) (div_mod.mod m p)))) (p)))) (nat.times (div_mod.div m p) (div_mod.div n p))) (((nat.commutative::times) (div_mod.div m p)) (div_mod.div n p)))) (nat.times (div_mod.div m p) (nat.times p (div_mod.div n p)))) ((((nat.times::times) (div_mod.div m p)) (p)) (div_mod.div n p)))) (nat.times (nat.times p (div_mod.div n p)) (div_mod.div m p))) (((nat.commutative::times) (nat.times p (div_mod.div n p))) (div_mod.div m p)))) (nat.times (div_mod.div n p) p)) (((nat.commutative::times) (div_mod.div n p)) (p)))) (nat.plus (nat.times (div_mod.div m p) (div_mod.mod n p)) (nat.times (div_mod.div n p) (div_mod.mod m p)))) (((nat.commutative::plus) (nat.times (div_mod.div m p) (div_mod.mod n p))) (nat.times (div_mod.div n p) (div_mod.mod m p))))) (nat.plus (nat.times (div_mod.div m p) (div_mod.mod n p)) (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.times (div_mod.div n p) (div_mod.mod m p))))) ((((((((let::clause::73) (n)) (m)) (p)) (posp)) (nat.times (div_mod.div m p) (div_mod.mod n p))) (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p)))) (nat.times (div_mod.div n p) (div_mod.mod m p))))) (nat.plus (nat.times p (nat.times (div_mod.div m p) (div_mod.mod n p))) (nat.times p (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.times (div_mod.div n p) (div_mod.mod m p)))))) ((((nat.distributive::times::plus) (p)) (nat.times (div_mod.div m p) (div_mod.mod n p))) (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.times (div_mod.div n p) (div_mod.mod m p)))))) (nat.plus (nat.times p (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.times (div_mod.div n p) (div_mod.mod m p)))) (nat.times p (nat.times (div_mod.div m p) (div_mod.mod n p))))) (((nat.commutative::plus) (nat.times p (nat.plus (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) (nat.times (div_mod.div n p) (div_mod.mod m p))))) (nat.times p (nat.times (div_mod.div m p) (div_mod.mod n p)))))) (nat.times (div_mod.mod n p) (div_mod.div m p))) (((nat.commutative::times) (div_mod.mod n p)) (div_mod.div m p)))) (nat.times (div_mod.mod n p) (nat.times p (div_mod.div m p)))) ((((nat.times::times) (div_mod.mod n p)) (p)) (div_mod.div m p)))) (nat.times (div_mod.div m p) p)) (((nat.commutative::times) (div_mod.div m p)) (p)))) (nat.plus (nat.times p (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p)))) (nat.times p (nat.times (div_mod.div n p) (div_mod.mod m p))))) ((((nat.distributive::times::plus) (p)) (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p)))) (nat.times (div_mod.div n p) (div_mod.mod m p))))) (nat.times (nat.times (div_mod.div n p) (div_mod.mod m p)) p)) (((nat.commutative::times) (nat.times (div_mod.div n p) (div_mod.mod m p))) (p)))) (nat.times (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p))) p)) (((nat.commutative::times) (nat.times p (nat.times (div_mod.div n p) (div_mod.div m p)))) (p)))) (nat.times (div_mod.div m p) (div_mod.div n p))) (((nat.commutative::times) (div_mod.div m p)) (div_mod.div n p)))) (nat.times (div_mod.div m p) (nat.times p (div_mod.div n p)))) ((((nat.times::times) (div_mod.div m p)) (p)) (div_mod.div n p)))) (nat.times (nat.times p (div_mod.div n p)) (div_mod.div m p))) (((nat.commutative::times) (nat.times p (div_mod.div n p))) (div_mod.div m p)))) (nat.times (div_mod.div n p) p)) (((nat.commutative::times) (div_mod.div n p)) (p)))) (nat.times (nat.plus (nat.plus (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) (nat.times (div_mod.div n p) (div_mod.mod m p))) (nat.times (div_mod.mod n p) (div_mod.div m p))) p)) ((((nat.distributive::times::plus::r) (p)) (nat.plus (nat.times (nat.times (div_mod.div n p) p) (div_mod.div m p)) (nat.times (div_mod.div n p) (div_mod.mod m p)))) (nat.times (div_mod.mod n p) (div_mod.div m p))))) (nat.times (div_mod.div n p) (nat.times (div_mod.mod m p) p))) ((((nat.associative::times) (div_mod.div n p)) (div_mod.mod m p)) (p)))) (nat.times p (div_mod.mod m p))) (((nat.commutative::times) (p)) (div_mod.mod m p)))) (nat.times (nat.times (div_mod.div n p) p) (div_mod.mod m p))) ((((nat.associative::times) (div_mod.div n p)) (p)) (div_mod.mod m p)))) (nat.times (nat.times (div_mod.div n p) p) (nat.times (div_mod.div m p) p))) ((((nat.associative::times) (nat.times (div_mod.div n p) p)) (div_mod.div m p)) (p)))) (((logic.refl) (nat.nat)) (nat.times (div_mod.mod n p) (div_mod.mod m p)))))))

congruent::times : _
congruent::times = \(n : nat.nat) -> \(m : nat.nat) -> \(n1 : nat.nat) -> \(m1 : nat.nat) -> \(p : nat.nat) -> \(posp : nat.lt nat.O p) -> (\(Hcongn : congruent n n1 p) -> (\(Hcongm : congruent m m1 p) -> (((((((logic.eq::ind::r) (nat.nat)) (div_mod.mod (nat.times (div_mod.mod n p) (div_mod.mod m p)) p)) (\(x : nat.nat) -> logic.eq (nat.nat) x (div_mod.mod (nat.times n1 m1) p))) (((((((logic.eq::ind::r) (nat.nat)) (div_mod.mod n1 p)) (\(x : nat.nat) -> logic.eq (nat.nat) (div_mod.mod (nat.times x (div_mod.mod m p)) p) (div_mod.mod (nat.times n1 m1) p))) (((((((logic.eq::ind::r) (nat.nat)) (div_mod.mod m1 p)) (\(x : nat.nat) -> logic.eq (nat.nat) (div_mod.mod (nat.times (div_mod.mod n1 p) x) p) (div_mod.mod (nat.times n1 m1) p))) (((((logic.sym::eq) (nat.nat)) (div_mod.mod (nat.times n1 m1) p)) (div_mod.mod (nat.times (div_mod.mod n1 p) (div_mod.mod m1 p)) p)) (((((mod::times) (n1)) (m1)) (p)) (posp)))) (div_mod.mod m p)) (Hcongm))) (div_mod.mod n p)) (Hcongn))) (div_mod.mod (nat.times n m) p)) (((((mod::times) (n)) (m)) (p)) (posp)))))

