eq :
  cts.Term
    cts.diamond
    (cts.prod
       cts.triangle
       cts.diamond
       cts.diamond
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x =>
        cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             x
             (x0 =>
              cts.prod cts.box cts.box cts.box cts.I x (x1 => cts.univ cts.star cts.box cts.I))))).

refl :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x => cts.prod cts.box cts.star cts.star cts.I x (x0 => eq x x0 x0))).

eq_ind :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          x
          (x0 =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             (cts.prod cts.box cts.box cts.box cts.I x (x1 => cts.univ cts.star cts.box cts.I))
             (x1 =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (x1 x0)
                (x2 =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   x
                   (x3 => cts.prod cts.star cts.star cts.star cts.I (eq x x0 x3) (x4 => x1 x3))))))).

def eq_rect_r :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          x
          (x0 =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             x
             (x1 =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (eq x x1 x0)
                (x2 =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      x
                      (x3 => cts.univ cts.star cts.box cts.I))
                   (x3 => cts.prod cts.star cts.star cts.star cts.I (x3 x0) (x4 => x3 x1)))))))
  :=
  A:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
  a:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          A)) =>
  x:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          A)) =>
  p:(cts.Term cts.star (eq A x a)) =>
  eq_ind
    A
    x
    (__:(cts.Term
           cts.diamond
           (cts.cast
              cts.triangle
              cts.sinf
              (cts.univ cts.box cts.triangle cts.I)
              (cts.univ cts.diamond cts.sinf cts.I)
              cts.I
              A)) =>
     cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       (cts.prod cts.box cts.box cts.box cts.I A (x0 => cts.univ cts.star cts.box cts.I))
       (x0 => cts.prod cts.star cts.star cts.star cts.I (x0 __) (x1 => x0 x)))
    (P:(cts.Term
          cts.diamond
          (cts.cast
             cts.triangle
             cts.sinf
             (cts.univ cts.box cts.triangle cts.I)
             (cts.univ cts.diamond cts.sinf cts.I)
             cts.I
             (cts.prod cts.box cts.box cts.box cts.I A (x0 => cts.univ cts.star cts.box cts.I)))) =>
     auto:(cts.Term cts.star (P x)) => auto)
    a
    p.

def eq_ind_r :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          x
          (x0 =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             (cts.prod cts.box cts.box cts.box cts.I x (x1 => cts.univ cts.star cts.box cts.I))
             (x1 =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (x1 x0)
                (x2 =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   x
                   (x3 => cts.prod cts.star cts.star cts.star cts.I (eq x x3 x0) (x4 => x1 x3)))))))
  :=
  A:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
  a:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          A)) =>
  P:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.prod cts.box cts.box cts.box cts.I A (x => cts.univ cts.star cts.box cts.I)))) =>
  p:(cts.Term cts.star (P a)) =>
  x0:(cts.Term
        cts.diamond
        (cts.cast
           cts.triangle
           cts.sinf
           (cts.univ cts.box cts.triangle cts.I)
           (cts.univ cts.diamond cts.sinf cts.I)
           cts.I
           A)) =>
  p0:(cts.Term cts.star (eq A x0 a)) =>
  eq_rect_r
    A
    a
    x0
    p0
    (x01:(cts.Term
            cts.diamond
            (cts.cast
               cts.triangle
               cts.sinf
               (cts.univ cts.box cts.triangle cts.I)
               (cts.univ cts.diamond cts.sinf cts.I)
               cts.I
               A)) =>
     P x01)
    p.

def rewrite_l :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          x
          (x0 =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             (cts.prod cts.box cts.box cts.box cts.I x (x1 => cts.univ cts.star cts.box cts.I))
             (x1 =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (x1 x0)
                (x2 =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   x
                   (x3 => cts.prod cts.star cts.star cts.star cts.I (eq x x0 x3) (x4 => x1 x3)))))))
  :=
  A:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
  x:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          A)) =>
  P:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.prod cts.box cts.box cts.box cts.I A (x0 => cts.univ cts.star cts.box cts.I)))) =>
  Hx:(cts.Term cts.star (P x)) =>
  y:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          A)) =>
  Heq:(cts.Term cts.star (eq A x y)) =>
  eq_ind
    A
    x
    (__:(cts.Term
           cts.diamond
           (cts.cast
              cts.triangle
              cts.sinf
              (cts.univ cts.box cts.triangle cts.I)
              (cts.univ cts.diamond cts.sinf cts.I)
              cts.I
              A)) =>
     P __)
    Hx
    y
    Heq.

def sym_eq :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          x
          (x0 =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             x
             (x1 => cts.prod cts.star cts.star cts.star cts.I (eq x x0 x1) (x2 => eq x x1 x0)))))
  :=
  A:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
  x:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          A)) =>
  y:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          A)) =>
  Heq:(cts.Term cts.star (eq A x y)) =>
  rewrite_l
    A
    x
    (__:(cts.Term
           cts.diamond
           (cts.cast
              cts.triangle
              cts.sinf
              (cts.univ cts.box cts.triangle cts.I)
              (cts.univ cts.diamond cts.sinf cts.I)
              cts.I
              A)) =>
     eq A __ x)
    (refl A x)
    y
    (rewrite_l
       A
       x
       (__:(cts.Term
              cts.diamond
              (cts.cast
                 cts.triangle
                 cts.sinf
                 (cts.univ cts.box cts.triangle cts.I)
                 (cts.univ cts.diamond cts.sinf cts.I)
                 cts.I
                 A)) =>
        eq A x __)
       (refl A x)
       y
       Heq).

def rewrite_r :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          x
          (x0 =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             (cts.prod cts.box cts.box cts.box cts.I x (x1 => cts.univ cts.star cts.box cts.I))
             (x1 =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (x1 x0)
                (x2 =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   x
                   (x3 => cts.prod cts.star cts.star cts.star cts.I (eq x x3 x0) (x4 => x1 x3)))))))
  :=
  A:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
  x:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          A)) =>
  P:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.prod cts.box cts.box cts.box cts.I A (x0 => cts.univ cts.star cts.box cts.I)))) =>
  Hx:(cts.Term cts.star (P x)) =>
  y:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          A)) =>
  Heq:(cts.Term cts.star (eq A y x)) =>
  eq_ind
    A
    x
    (__:(cts.Term
           cts.diamond
           (cts.cast
              cts.triangle
              cts.sinf
              (cts.univ cts.box cts.triangle cts.I)
              (cts.univ cts.diamond cts.sinf cts.I)
              cts.I
              A)) =>
     P __)
    Hx
    y
    (sym_eq A y x Heq).

def eq_coerc :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       (cts.univ cts.star cts.box cts.I)
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          (cts.univ cts.star cts.box cts.I)
          (x0 =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             x
             (x1 =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (eq (cts.univ cts.star cts.box cts.I) x x0)
                (x2 => x0)))))
  :=
  A:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.univ cts.star cts.box cts.I))) =>
  B:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.univ cts.star cts.box cts.I))) =>
  Ha:(cts.Term cts.star A) =>
  Heq:(cts.Term cts.star (eq (cts.univ cts.star cts.box cts.I) A B)) =>
  eq_ind
    (cts.univ cts.star cts.box cts.I)
    A
    (x_19:(cts.Term
             cts.diamond
             (cts.cast
                cts.triangle
                cts.sinf
                (cts.univ cts.box cts.triangle cts.I)
                (cts.univ cts.diamond cts.sinf cts.I)
                cts.I
                (cts.univ cts.star cts.box cts.I))) =>
     x_19)
    Ha
    B
    Heq.

def trans_eq :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          x
          (x0 =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             x
             (x1 =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                x
                (x2 =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (eq x x0 x1)
                   (x3 =>
                    cts.prod cts.star cts.star cts.star cts.I (eq x x1 x2) (x4 => eq x x0 x2)))))))
  :=
  A:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
  x:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          A)) =>
  y:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          A)) =>
  z:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          A)) =>
  H1:(cts.Term cts.star (eq A x y)) =>
  H2:(cts.Term cts.star (eq A y z)) =>
  eq_ind_r
    A
    y
    (x0:(cts.Term
           cts.diamond
           (cts.cast
              cts.triangle
              cts.sinf
              (cts.univ cts.box cts.triangle cts.I)
              (cts.univ cts.diamond cts.sinf cts.I)
              cts.I
              A)) =>
     eq A x0 z)
    (rewrite_l
       A
       x
       (__:(cts.Term
              cts.diamond
              (cts.cast
                 cts.triangle
                 cts.sinf
                 (cts.univ cts.box cts.triangle cts.I)
                 (cts.univ cts.diamond cts.sinf cts.I)
                 cts.I
                 A)) =>
        eq A __ z)
       (rewrite_l
          A
          x
          (__:(cts.Term
                 cts.diamond
                 (cts.cast
                    cts.triangle
                    cts.sinf
                    (cts.univ cts.box cts.triangle cts.I)
                    (cts.univ cts.diamond cts.sinf cts.I)
                    cts.I
                    A)) =>
           eq A x __)
          (refl A x)
          z
          (rewrite_r
             A
             y
             (__:(cts.Term
                    cts.diamond
                    (cts.cast
                       cts.triangle
                       cts.sinf
                       (cts.univ cts.box cts.triangle cts.I)
                       (cts.univ cts.diamond cts.sinf cts.I)
                       cts.I
                       A)) =>
              eq A __ z)
             H2
             x
             H1))
       y
       H1)
    x
    H1.

def eq_f :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x =>
        cts.prod
          cts.triangle
          cts.star
          cts.star
          cts.I
          (cts.univ cts.box cts.triangle cts.I)
          (x0 =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             (cts.prod cts.box cts.box cts.box cts.I x (x1 => x0))
             (x1 =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                x
                (x2 =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   x
                   (x3 =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (eq x x2 x3)
                      (x4 => eq x0 (x1 x2) (x1 x3))))))))
  :=
  A:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
  B:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
  f:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.prod cts.box cts.box cts.box cts.I A (x => B)))) =>
  x:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          A)) =>
  y:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          A)) =>
  H:(cts.Term cts.star (eq A x y)) =>
  eq_ind_r
    A
    y
    (x0:(cts.Term
           cts.diamond
           (cts.cast
              cts.triangle
              cts.sinf
              (cts.univ cts.box cts.triangle cts.I)
              (cts.univ cts.diamond cts.sinf cts.I)
              cts.I
              A)) =>
     eq B (f x0) (f y))
    (rewrite_l
       A
       x
       (__:(cts.Term
              cts.diamond
              (cts.cast
                 cts.triangle
                 cts.sinf
                 (cts.univ cts.box cts.triangle cts.I)
                 (cts.univ cts.diamond cts.sinf cts.I)
                 cts.I
                 A)) =>
        eq B (f __) (f y))
       (rewrite_l
          A
          x
          (__:(cts.Term
                 cts.diamond
                 (cts.cast
                    cts.triangle
                    cts.sinf
                    (cts.univ cts.box cts.triangle cts.I)
                    (cts.univ cts.diamond cts.sinf cts.I)
                    cts.I
                    A)) =>
           eq B (f x) (f __))
          (refl B (f x))
          y
          H)
       y
       H)
    x
    H.

def eq_f2 :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x =>
        cts.prod
          cts.triangle
          cts.star
          cts.star
          cts.I
          (cts.univ cts.box cts.triangle cts.I)
          (x0 =>
           cts.prod
             cts.triangle
             cts.star
             cts.star
             cts.I
             (cts.univ cts.box cts.triangle cts.I)
             (x1 =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   x
                   (x2 => cts.prod cts.box cts.box cts.box cts.I x0 (x3 => x1)))
                (x2 =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   x
                   (x3 =>
                    cts.prod
                      cts.box
                      cts.star
                      cts.star
                      cts.I
                      x
                      (x4 =>
                       cts.prod
                         cts.box
                         cts.star
                         cts.star
                         cts.I
                         x0
                         (x5 =>
                          cts.prod
                            cts.box
                            cts.star
                            cts.star
                            cts.I
                            x0
                            (x6 =>
                             cts.prod
                               cts.star
                               cts.star
                               cts.star
                               cts.I
                               (eq x x3 x4)
                               (x7 =>
                                cts.prod
                                  cts.star
                                  cts.star
                                  cts.star
                                  cts.I
                                  (eq x0 x5 x6)
                                  (x8 => eq x1 (x2 x3 x5) (x2 x4 x6))))))))))))
  :=
  A:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
  B:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
  C:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
  f:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             A
             (x => cts.prod cts.box cts.box cts.box cts.I B (x0 => C))))) =>
  x1:(cts.Term
        cts.diamond
        (cts.cast
           cts.triangle
           cts.sinf
           (cts.univ cts.box cts.triangle cts.I)
           (cts.univ cts.diamond cts.sinf cts.I)
           cts.I
           A)) =>
  x2:(cts.Term
        cts.diamond
        (cts.cast
           cts.triangle
           cts.sinf
           (cts.univ cts.box cts.triangle cts.I)
           (cts.univ cts.diamond cts.sinf cts.I)
           cts.I
           A)) =>
  y1:(cts.Term
        cts.diamond
        (cts.cast
           cts.triangle
           cts.sinf
           (cts.univ cts.box cts.triangle cts.I)
           (cts.univ cts.diamond cts.sinf cts.I)
           cts.I
           B)) =>
  y2:(cts.Term
        cts.diamond
        (cts.cast
           cts.triangle
           cts.sinf
           (cts.univ cts.box cts.triangle cts.I)
           (cts.univ cts.diamond cts.sinf cts.I)
           cts.I
           B)) =>
  E1:(cts.Term cts.star (eq A x1 x2)) =>
  E2:(cts.Term cts.star (eq B y1 y2)) =>
  eq_ind_r
    A
    x2
    (x:(cts.Term
          cts.diamond
          (cts.cast
             cts.triangle
             cts.sinf
             (cts.univ cts.box cts.triangle cts.I)
             (cts.univ cts.diamond cts.sinf cts.I)
             cts.I
             A)) =>
     eq C (f x y1) (f x2 y2))
    (eq_ind_r
       B
       y2
       (x:(cts.Term
             cts.diamond
             (cts.cast
                cts.triangle
                cts.sinf
                (cts.univ cts.box cts.triangle cts.I)
                (cts.univ cts.diamond cts.sinf cts.I)
                cts.I
                B)) =>
        eq C (f x2 x) (f x2 y2))
       (rewrite_l
          A
          x1
          (__:(cts.Term
                 cts.diamond
                 (cts.cast
                    cts.triangle
                    cts.sinf
                    (cts.univ cts.box cts.triangle cts.I)
                    (cts.univ cts.diamond cts.sinf cts.I)
                    cts.I
                    A)) =>
           eq C (f __ y2) (f x2 y2))
          (rewrite_l
             B
             y1
             (__:(cts.Term
                    cts.diamond
                    (cts.cast
                       cts.triangle
                       cts.sinf
                       (cts.univ cts.box cts.triangle cts.I)
                       (cts.univ cts.diamond cts.sinf cts.I)
                       cts.I
                       B)) =>
              eq C (f x1 __) (f x2 y2))
             (rewrite_l
                A
                x1
                (__:(cts.Term
                       cts.diamond
                       (cts.cast
                          cts.triangle
                          cts.sinf
                          (cts.univ cts.box cts.triangle cts.I)
                          (cts.univ cts.diamond cts.sinf cts.I)
                          cts.I
                          A)) =>
                 eq C (f x1 y1) (f __ y2))
                (rewrite_l
                   B
                   y1
                   (__:(cts.Term
                          cts.diamond
                          (cts.cast
                             cts.triangle
                             cts.sinf
                             (cts.univ cts.box cts.triangle cts.I)
                             (cts.univ cts.diamond cts.sinf cts.I)
                             cts.I
                             B)) =>
                    eq C (f x1 y1) (f x1 __))
                   (refl C (f x1 y1))
                   y2
                   E2)
                x2
                E1)
             y2
             E2)
          x2
          E1)
       y1
       E2)
    x1
    E1.

def absurd :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       (cts.univ cts.star cts.box cts.I)
       (x =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          x
          (x0 =>
           cts.prod cts.star cts.star cts.star cts.I (connectives.Not x) (x1 => connectives.False))))
  :=
  A:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.univ cts.star cts.box cts.I))) =>
  H:(cts.Term cts.star A) =>
  Hn:(cts.Term cts.star (connectives.Not A)) =>
  connectives.Not_ind
    A
    connectives.False
    (_x_80:(cts.Term
              cts.star
              (cts.prod cts.star cts.star cts.star cts.I A (x => connectives.False))) =>
     _x_80 H)
    Hn.

def not_to_not :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       (cts.univ cts.star cts.box cts.I)
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          (cts.univ cts.star cts.box cts.I)
          (x0 =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (cts.prod cts.star cts.star cts.star cts.I x (x1 => x0))
             (x1 =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (connectives.Not x0)
                (x2 => connectives.Not x)))))
  :=
  A:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.univ cts.star cts.box cts.I))) =>
  B:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.univ cts.star cts.box cts.I))) =>
  auto:(cts.Term cts.star (cts.prod cts.star cts.star cts.star cts.I A (x => B))) =>
  auto':(cts.Term cts.star (connectives.Not B)) =>
  connectives.nmk A (auto'':(cts.Term cts.star A) => absurd B (auto auto'') auto').

def sym_not_eq :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          x
          (x0 =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             x
             (x1 =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (connectives.Not (eq x x0 x1))
                (x2 => connectives.Not (eq x x1 x0))))))
  :=
  A:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
  x:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          A)) =>
  y:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          A)) =>
  auto:(cts.Term cts.star (connectives.Not (eq A x y))) =>
  connectives.nmk
    (eq A y x)
    (auto':(cts.Term cts.star (eq A y x)) =>
     absurd
       (eq A x y)
       (rewrite_r
          A
          x
          (__:(cts.Term
                 cts.diamond
                 (cts.cast
                    cts.triangle
                    cts.sinf
                    (cts.univ cts.box cts.triangle cts.I)
                    (cts.univ cts.diamond cts.sinf cts.I)
                    cts.I
                    A)) =>
           eq A x __)
          (refl A x)
          y
          auto')
       auto).

def proj1 :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       (cts.univ cts.star cts.box cts.I)
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          (cts.univ cts.star cts.box cts.I)
          (x0 => cts.prod cts.star cts.star cts.star cts.I (connectives.And x x0) (x1 => x))))
  :=
  A:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.univ cts.star cts.box cts.I))) =>
  B:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.univ cts.star cts.box cts.I))) =>
  AB:(cts.Term cts.star (connectives.And A B)) =>
  connectives.match_And_prop
    A
    B
    A
    (_x_120:(cts.Term cts.star A) => _x_119:(cts.Term cts.star B) => _x_120)
    AB.

def proj2 :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       (cts.univ cts.star cts.box cts.I)
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          (cts.univ cts.star cts.box cts.I)
          (x0 => cts.prod cts.star cts.star cts.star cts.I (connectives.And x x0) (x1 => x0))))
  :=
  A:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.univ cts.star cts.box cts.I))) =>
  B:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.univ cts.star cts.box cts.I))) =>
  AB:(cts.Term cts.star (connectives.And A B)) =>
  connectives.match_And_prop
    A
    B
    B
    (_x_120:(cts.Term cts.star A) => _x_119:(cts.Term cts.star B) => _x_119)
    AB.

def decidable :
  cts.Term
    cts.diamond
    (cts.cast
       cts.triangle
       cts.sinf
       (cts.univ cts.box cts.triangle cts.I)
       (cts.univ cts.diamond cts.sinf cts.I)
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          (cts.univ cts.star cts.box cts.I)
          (x => cts.univ cts.star cts.box cts.I)))
  :=
  A:(cts.Term
       cts.diamond
       (cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.univ cts.star cts.box cts.I))) =>
  connectives.Or A (connectives.Not A).

